(()=>{"use strict";var e,p={},_={};function n(e){var a=_[e];if(void 0!==a)return a.exports;var r=_[e]={exports:{}};return p[e](r,r.exports,n),r.exports}n.m=p,e=[],n.O=(a,r,u,t)=>{if(!r){var s=1/0;for(f=0;f<e.length;f++){for(var[r,u,t]=e[f],c=!0,l=0;l<r.length;l++)(!1&t||s>=t)&&Object.keys(n.O).every(h=>n.O[h](r[l]))?r.splice(l--,1):(c=!1,t<s&&(s=t));if(c){e.splice(f--,1);var o=u();void 0!==o&&(a=o)}}return a}t=t||0;for(var f=e.length;f>0&&e[f-1][2]>t;f--)e[f]=e[f-1];e[f]=[r,u,t]},n.n=e=>{var a=e&&e.__esModule?()=>e.default:()=>e;return n.d(a,{a}),a},n.d=(e,a)=>{for(var r in a)n.o(a,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:a[r]})},n.o=(e,a)=>Object.prototype.hasOwnProperty.call(e,a),(()=>{var e={666:0};n.O.j=u=>0===e[u];var a=(u,t)=>{var l,o,[f,s,c]=t,v=0;if(f.some(d=>0!==e[d])){for(l in s)n.o(s,l)&&(n.m[l]=s[l]);if(c)var b=c(n)}for(u&&u(t);v<f.length;v++)n.o(e,o=f[v])&&e[o]&&e[o][0](),e[o]=0;return n.O(b)},r=self.webpackChunkremoteApps=self.webpackChunkremoteApps||[];r.forEach(a.bind(null,0)),r.push=a.bind(null,r.push.bind(r))})()})();"use strict";(self.webpackChunkremoteApps=self.webpackChunkremoteApps||[]).push([[429],{435:(ie,Ee,de)=>{de(583)},583:()=>{!function(e){const n=e.performance;function i(M){n&&n.mark&&n.mark(M)}function o(M,E){n&&n.measure&&n.measure(M,E)}i("Zone");const c=e.__Zone_symbol_prefix||"__zone_symbol__";function a(M){return c+M}const y=!0===e[a("forceDuplicateZoneCheck")];if(e.Zone){if(y||"function"!=typeof e.Zone.__symbol__)throw new Error("Zone already loaded.");return e.Zone}let d=(()=>{class M{constructor(t,r){this._parent=t,this._name=r?r.name||"unnamed":"<root>",this._properties=r&&r.properties||{},this._zoneDelegate=new v(this,this._parent&&this._parent._zoneDelegate,r)}static assertZonePatched(){if(e.Promise!==oe.ZoneAwarePromise)throw new Error("Zone.js has detected that ZoneAwarePromise `(window|global).Promise` has been overwritten.\nMost likely cause is that a Promise polyfill has been loaded after Zone.js (Polyfilling Promise api is not necessary when zone.js is loaded. If you must load one, do so before loading zone.js.)")}static get root(){let t=M.current;for(;t.parent;)t=t.parent;return t}static get current(){return U.zone}static get currentTask(){return re}static __load_patch(t,r,k=!1){if(oe.hasOwnProperty(t)){if(!k&&y)throw Error("Already loaded patch: "+t)}else if(!e["__Zone_disable_"+t]){const C="Zone:"+t;i(C),oe[t]=r(e,M,z),o(C,C)}}get parent(){return this._parent}get name(){return this._name}get(t){const r=this.getZoneWith(t);if(r)return r._properties[t]}getZoneWith(t){let r=this;for(;r;){if(r._properties.hasOwnProperty(t))return r;r=r._parent}return null}fork(t){if(!t)throw new Error("ZoneSpec required!");return this._zoneDelegate.fork(this,t)}wrap(t,r){if("function"!=typeof t)throw new Error("Expecting function got: "+t);const k=this._zoneDelegate.intercept(this,t,r),C=this;return function(){return C.runGuarded(k,this,arguments,r)}}run(t,r,k,C){U={parent:U,zone:this};try{return this._zoneDelegate.invoke(this,t,r,k,C)}finally{U=U.parent}}runGuarded(t,r=null,k,C){U={parent:U,zone:this};try{try{return this._zoneDelegate.invoke(this,t,r,k,C)}catch($){if(this._zoneDelegate.handleError(this,$))throw $}}finally{U=U.parent}}runTask(t,r,k){if(t.zone!=this)throw new Error("A task can only be run in the zone of creation! (Creation: "+(t.zone||K).name+"; Execution: "+this.name+")");if(t.state===x&&(t.type===Q||t.type===w))return;const C=t.state!=p;C&&t._transitionTo(p,A),t.runCount++;const $=re;re=t,U={parent:U,zone:this};try{t.type==w&&t.data&&!t.data.isPeriodic&&(t.cancelFn=void 0);try{return this._zoneDelegate.invokeTask(this,t,r,k)}catch(l){if(this._zoneDelegate.handleError(this,l))throw l}}finally{t.state!==x&&t.state!==h&&(t.type==Q||t.data&&t.data.isPeriodic?C&&t._transitionTo(A,p):(t.runCount=0,this._updateTaskCount(t,-1),C&&t._transitionTo(x,p,x))),U=U.parent,re=$}}scheduleTask(t){if(t.zone&&t.zone!==this){let k=this;for(;k;){if(k===t.zone)throw Error(`can not reschedule task to ${this.name} which is descendants of the original zone ${t.zone.name}`);k=k.parent}}t._transitionTo(X,x);const r=[];t._zoneDelegates=r,t._zone=this;try{t=this._zoneDelegate.scheduleTask(this,t)}catch(k){throw t._transitionTo(h,X,x),this._zoneDelegate.handleError(this,k),k}return t._zoneDelegates===r&&this._updateTaskCount(t,1),t.state==X&&t._transitionTo(A,X),t}scheduleMicroTask(t,r,k,C){return this.scheduleTask(new m(I,t,r,k,C,void 0))}scheduleMacroTask(t,r,k,C,$){return this.scheduleTask(new m(w,t,r,k,C,$))}scheduleEventTask(t,r,k,C,$){return this.scheduleTask(new m(Q,t,r,k,C,$))}cancelTask(t){if(t.zone!=this)throw new Error("A task can only be cancelled in the zone of creation! (Creation: "+(t.zone||K).name+"; Execution: "+this.name+")");t._transitionTo(G,A,p);try{this._zoneDelegate.cancelTask(this,t)}catch(r){throw t._transitionTo(h,G),this._zoneDelegate.handleError(this,r),r}return this._updateTaskCount(t,-1),t._transitionTo(x,G),t.runCount=0,t}_updateTaskCount(t,r){const k=t._zoneDelegates;-1==r&&(t._zoneDelegates=null);for(let C=0;C<k.length;C++)k[C]._updateTaskCount(t.type,r)}}return M.__symbol__=a,M})();const P={name:"",onHasTask:(M,E,t,r)=>M.hasTask(t,r),onScheduleTask:(M,E,t,r)=>M.scheduleTask(t,r),onInvokeTask:(M,E,t,r,k,C)=>M.invokeTask(t,r,k,C),onCancelTask:(M,E,t,r)=>M.cancelTask(t,r)};class v{constructor(E,t,r){this._taskCounts={microTask:0,macroTask:0,eventTask:0},this.zone=E,this._parentDelegate=t,this._forkZS=r&&(r&&r.onFork?r:t._forkZS),this._forkDlgt=r&&(r.onFork?t:t._forkDlgt),this._forkCurrZone=r&&(r.onFork?this.zone:t._forkCurrZone),this._interceptZS=r&&(r.onIntercept?r:t._interceptZS),this._interceptDlgt=r&&(r.onIntercept?t:t._interceptDlgt),this._interceptCurrZone=r&&(r.onIntercept?this.zone:t._interceptCurrZone),this._invokeZS=r&&(r.onInvoke?r:t._invokeZS),this._invokeDlgt=r&&(r.onInvoke?t:t._invokeDlgt),this._invokeCurrZone=r&&(r.onInvoke?this.zone:t._invokeCurrZone),this._handleErrorZS=r&&(r.onHandleError?r:t._handleErrorZS),this._handleErrorDlgt=r&&(r.onHandleError?t:t._handleErrorDlgt),this._handleErrorCurrZone=r&&(r.onHandleError?this.zone:t._handleErrorCurrZone),this._scheduleTaskZS=r&&(r.onScheduleTask?r:t._scheduleTaskZS),this._scheduleTaskDlgt=r&&(r.onScheduleTask?t:t._scheduleTaskDlgt),this._scheduleTaskCurrZone=r&&(r.onScheduleTask?this.zone:t._scheduleTaskCurrZone),this._invokeTaskZS=r&&(r.onInvokeTask?r:t._invokeTaskZS),this._invokeTaskDlgt=r&&(r.onInvokeTask?t:t._invokeTaskDlgt),this._invokeTaskCurrZone=r&&(r.onInvokeTask?this.zone:t._invokeTaskCurrZone),this._cancelTaskZS=r&&(r.onCancelTask?r:t._cancelTaskZS),this._cancelTaskDlgt=r&&(r.onCancelTask?t:t._cancelTaskDlgt),this._cancelTaskCurrZone=r&&(r.onCancelTask?this.zone:t._cancelTaskCurrZone),this._hasTaskZS=null,this._hasTaskDlgt=null,this._hasTaskDlgtOwner=null,this._hasTaskCurrZone=null;const k=r&&r.onHasTask;(k||t&&t._hasTaskZS)&&(this._hasTaskZS=k?r:P,this._hasTaskDlgt=t,this._hasTaskDlgtOwner=this,this._hasTaskCurrZone=E,r.onScheduleTask||(this._scheduleTaskZS=P,this._scheduleTaskDlgt=t,this._scheduleTaskCurrZone=this.zone),r.onInvokeTask||(this._invokeTaskZS=P,this._invokeTaskDlgt=t,this._invokeTaskCurrZone=this.zone),r.onCancelTask||(this._cancelTaskZS=P,this._cancelTaskDlgt=t,this._cancelTaskCurrZone=this.zone))}fork(E,t){return this._forkZS?this._forkZS.onFork(this._forkDlgt,this.zone,E,t):new d(E,t)}intercept(E,t,r){return this._interceptZS?this._interceptZS.onIntercept(this._interceptDlgt,this._interceptCurrZone,E,t,r):t}invoke(E,t,r,k,C){return this._invokeZS?this._invokeZS.onInvoke(this._invokeDlgt,this._invokeCurrZone,E,t,r,k,C):t.apply(r,k)}handleError(E,t){return!this._handleErrorZS||this._handleErrorZS.onHandleError(this._handleErrorDlgt,this._handleErrorCurrZone,E,t)}scheduleTask(E,t){let r=t;if(this._scheduleTaskZS)this._hasTaskZS&&r._zoneDelegates.push(this._hasTaskDlgtOwner),r=this._scheduleTaskZS.onScheduleTask(this._scheduleTaskDlgt,this._scheduleTaskCurrZone,E,t),r||(r=t);else if(t.scheduleFn)t.scheduleFn(t);else{if(t.type!=I)throw new Error("Task is missing scheduleFn.");R(t)}return r}invokeTask(E,t,r,k){return this._invokeTaskZS?this._invokeTaskZS.onInvokeTask(this._invokeTaskDlgt,this._invokeTaskCurrZone,E,t,r,k):t.callback.apply(r,k)}cancelTask(E,t){let r;if(this._cancelTaskZS)r=this._cancelTaskZS.onCancelTask(this._cancelTaskDlgt,this._cancelTaskCurrZone,E,t);else{if(!t.cancelFn)throw Error("Task is not cancelable");r=t.cancelFn(t)}return r}hasTask(E,t){try{this._hasTaskZS&&this._hasTaskZS.onHasTask(this._hasTaskDlgt,this._hasTaskCurrZone,E,t)}catch(r){this.handleError(E,r)}}_updateTaskCount(E,t){const r=this._taskCounts,k=r[E],C=r[E]=k+t;if(C<0)throw new Error("More tasks executed then were scheduled.");0!=k&&0!=C||this.hasTask(this.zone,{microTask:r.microTask>0,macroTask:r.macroTask>0,eventTask:r.eventTask>0,change:E})}}class m{constructor(E,t,r,k,C,$){if(this._zone=null,this.runCount=0,this._zoneDelegates=null,this._state="notScheduled",this.type=E,this.source=t,this.data=k,this.scheduleFn=C,this.cancelFn=$,!r)throw new Error("callback is not defined");this.callback=r;const l=this;this.invoke=E===Q&&k&&k.useG?m.invokeTask:function(){return m.invokeTask.call(e,l,this,arguments)}}static invokeTask(E,t,r){E||(E=this),ee++;try{return E.runCount++,E.zone.runTask(E,t,r)}finally{1==ee&&_(),ee--}}get zone(){return this._zone}get state(){return this._state}cancelScheduleRequest(){this._transitionTo(x,X)}_transitionTo(E,t,r){if(this._state!==t&&this._state!==r)throw new Error(`${this.type} '${this.source}': can not transition to '${E}', expecting state '${t}'${r?" or '"+r+"'":""}, was '${this._state}'.`);this._state=E,E==x&&(this._zoneDelegates=null)}toString(){return this.data&&typeof this.data.handleId<"u"?this.data.handleId.toString():Object.prototype.toString.call(this)}toJSON(){return{type:this.type,state:this.state,source:this.source,zone:this.zone.name,runCount:this.runCount}}}const L=a("setTimeout"),Z=a("Promise"),N=a("then");let J,B=[],H=!1;function q(M){if(J||e[Z]&&(J=e[Z].resolve(0)),J){let E=J[N];E||(E=J.then),E.call(J,M)}else e[L](M,0)}function R(M){0===ee&&0===B.length&&q(_),M&&B.push(M)}function _(){if(!H){for(H=!0;B.length;){const M=B;B=[];for(let E=0;E<M.length;E++){const t=M[E];try{t.zone.runTask(t,null,null)}catch(r){z.onUnhandledError(r)}}}z.microtaskDrainDone(),H=!1}}const K={name:"NO ZONE"},x="notScheduled",X="scheduling",A="scheduled",p="running",G="canceling",h="unknown",I="microTask",w="macroTask",Q="eventTask",oe={},z={symbol:a,currentZoneFrame:()=>U,onUnhandledError:W,microtaskDrainDone:W,scheduleMicroTask:R,showUncaughtError:()=>!d[a("ignoreConsoleErrorUncaughtError")],patchEventTarget:()=>[],patchOnProperties:W,patchMethod:()=>W,bindArguments:()=>[],patchThen:()=>W,patchMacroTask:()=>W,patchEventPrototype:()=>W,isIEOrEdge:()=>!1,getGlobalObjects:()=>{},ObjectDefineProperty:()=>W,ObjectGetOwnPropertyDescriptor:()=>{},ObjectCreate:()=>{},ArraySlice:()=>[],patchClass:()=>W,wrapWithCurrentZone:()=>W,filterProperties:()=>[],attachOriginToPatched:()=>W,_redefineProperty:()=>W,patchCallbacks:()=>W,nativeScheduleMicroTask:q};let U={parent:null,zone:new d(null,null)},re=null,ee=0;function W(){}o("Zone","Zone"),e.Zone=d}(typeof window<"u"&&window||typeof self<"u"&&self||global);const ie=Object.getOwnPropertyDescriptor,Ee=Object.defineProperty,de=Object.getPrototypeOf,ge=Object.create,Ve=Array.prototype.slice,Oe="addEventListener",Se="removeEventListener",Ze=Zone.__symbol__(Oe),Ne=Zone.__symbol__(Se),ce="true",ae="false",ke=Zone.__symbol__("");function Ie(e,n){return Zone.current.wrap(e,n)}function Me(e,n,i,o,c){return Zone.current.scheduleMacroTask(e,n,i,o,c)}const j=Zone.__symbol__,Pe=typeof window<"u",Te=Pe?window:void 0,Y=Pe&&Te||"object"==typeof self&&self||global;function Le(e,n){for(let i=e.length-1;i>=0;i--)"function"==typeof e[i]&&(e[i]=Ie(e[i],n+"_"+i));return e}function Fe(e){return!e||!1!==e.writable&&!("function"==typeof e.get&&typeof e.set>"u")}const Be=typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope,we=!("nw"in Y)&&typeof Y.process<"u"&&"[object process]"==={}.toString.call(Y.process),Ae=!we&&!Be&&!(!Pe||!Te.HTMLElement),Ue=typeof Y.process<"u"&&"[object process]"==={}.toString.call(Y.process)&&!Be&&!(!Pe||!Te.HTMLElement),Re={},We=function(e){if(!(e=e||Y.event))return;let n=Re[e.type];n||(n=Re[e.type]=j("ON_PROPERTY"+e.type));const i=this||e.target||Y,o=i[n];let c;if(Ae&&i===Te&&"error"===e.type){const a=e;c=o&&o.call(this,a.message,a.filename,a.lineno,a.colno,a.error),!0===c&&e.preventDefault()}else c=o&&o.apply(this,arguments),null!=c&&!c&&e.preventDefault();return c};function qe(e,n,i){let o=ie(e,n);if(!o&&i&&ie(i,n)&&(o={enumerable:!0,configurable:!0}),!o||!o.configurable)return;const c=j("on"+n+"patched");if(e.hasOwnProperty(c)&&e[c])return;delete o.writable,delete o.value;const a=o.get,y=o.set,d=n.slice(2);let P=Re[d];P||(P=Re[d]=j("ON_PROPERTY"+d)),o.set=function(v){let m=this;!m&&e===Y&&(m=Y),m&&("function"==typeof m[P]&&m.removeEventListener(d,We),y&&y.call(m,null),m[P]=v,"function"==typeof v&&m.addEventListener(d,We,!1))},o.get=function(){let v=this;if(!v&&e===Y&&(v=Y),!v)return null;const m=v[P];if(m)return m;if(a){let L=a.call(this);if(L)return o.set.call(this,L),"function"==typeof v.removeAttribute&&v.removeAttribute(n),L}return null},Ee(e,n,o),e[c]=!0}function Xe(e,n,i){if(n)for(let o=0;o<n.length;o++)qe(e,"on"+n[o],i);else{const o=[];for(const c in e)"on"==c.slice(0,2)&&o.push(c);for(let c=0;c<o.length;c++)qe(e,o[c],i)}}const ne=j("originalInstance");function ve(e){const n=Y[e];if(!n)return;Y[j(e)]=n,Y[e]=function(){const c=Le(arguments,e);switch(c.length){case 0:this[ne]=new n;break;case 1:this[ne]=new n(c[0]);break;case 2:this[ne]=new n(c[0],c[1]);break;case 3:this[ne]=new n(c[0],c[1],c[2]);break;case 4:this[ne]=new n(c[0],c[1],c[2],c[3]);break;default:throw new Error("Arg list too long.")}},ue(Y[e],n);const i=new n(function(){});let o;for(o in i)"XMLHttpRequest"===e&&"responseBlob"===o||function(c){"function"==typeof i[c]?Y[e].prototype[c]=function(){return this[ne][c].apply(this[ne],arguments)}:Ee(Y[e].prototype,c,{set:function(a){"function"==typeof a?(this[ne][c]=Ie(a,e+"."+c),ue(this[ne][c],a)):this[ne][c]=a},get:function(){return this[ne][c]}})}(o);for(o in n)"prototype"!==o&&n.hasOwnProperty(o)&&(Y[e][o]=n[o])}function le(e,n,i){let o=e;for(;o&&!o.hasOwnProperty(n);)o=de(o);!o&&e[n]&&(o=e);const c=j(n);let a=null;if(o&&(!(a=o[c])||!o.hasOwnProperty(c))&&(a=o[c]=o[n],Fe(o&&ie(o,n)))){const d=i(a,c,n);o[n]=function(){return d(this,arguments)},ue(o[n],a)}return a}function lt(e,n,i){let o=null;function c(a){const y=a.data;return y.args[y.cbIdx]=function(){a.invoke.apply(this,arguments)},o.apply(y.target,y.args),a}o=le(e,n,a=>function(y,d){const P=i(y,d);return P.cbIdx>=0&&"function"==typeof d[P.cbIdx]?Me(P.name,d[P.cbIdx],P,c):a.apply(y,d)})}function ue(e,n){e[j("OriginalDelegate")]=n}let ze=!1,je=!1;function ft(){if(ze)return je;ze=!0;try{const e=Te.navigator.userAgent;(-1!==e.indexOf("MSIE ")||-1!==e.indexOf("Trident/")||-1!==e.indexOf("Edge/"))&&(je=!0)}catch{}return je}Zone.__load_patch("ZoneAwarePromise",(e,n,i)=>{const o=Object.getOwnPropertyDescriptor,c=Object.defineProperty,y=i.symbol,d=[],P=!0===e[y("DISABLE_WRAPPING_UNCAUGHT_PROMISE_REJECTION")],v=y("Promise"),m=y("then");i.onUnhandledError=l=>{if(i.showUncaughtError()){const u=l&&l.rejection;u?console.error("Unhandled Promise rejection:",u instanceof Error?u.message:u,"; Zone:",l.zone.name,"; Task:",l.task&&l.task.source,"; Value:",u,u instanceof Error?u.stack:void 0):console.error(l)}},i.microtaskDrainDone=()=>{for(;d.length;){const l=d.shift();try{l.zone.runGuarded(()=>{throw l.throwOriginal?l.rejection:l})}catch(u){N(u)}}};const Z=y("unhandledPromiseRejectionHandler");function N(l){i.onUnhandledError(l);try{const u=n[Z];"function"==typeof u&&u.call(this,l)}catch{}}function B(l){return l&&l.then}function H(l){return l}function J(l){return t.reject(l)}const q=y("state"),R=y("value"),_=y("finally"),K=y("parentPromiseValue"),x=y("parentPromiseState"),A=null,p=!0,G=!1;function I(l,u){return s=>{try{z(l,u,s)}catch(f){z(l,!1,f)}}}const w=function(){let l=!1;return function(s){return function(){l||(l=!0,s.apply(null,arguments))}}},oe=y("currentTaskTrace");function z(l,u,s){const f=w();if(l===s)throw new TypeError("Promise resolved with itself");if(l[q]===A){let g=null;try{("object"==typeof s||"function"==typeof s)&&(g=s&&s.then)}catch(b){return f(()=>{z(l,!1,b)})(),l}if(u!==G&&s instanceof t&&s.hasOwnProperty(q)&&s.hasOwnProperty(R)&&s[q]!==A)re(s),z(l,s[q],s[R]);else if(u!==G&&"function"==typeof g)try{g.call(s,f(I(l,u)),f(I(l,!1)))}catch(b){f(()=>{z(l,!1,b)})()}else{l[q]=u;const b=l[R];if(l[R]=s,l[_]===_&&u===p&&(l[q]=l[x],l[R]=l[K]),u===G&&s instanceof Error){const T=n.currentTask&&n.currentTask.data&&n.currentTask.data.__creationTrace__;T&&c(s,oe,{configurable:!0,enumerable:!1,writable:!0,value:T})}for(let T=0;T<b.length;)ee(l,b[T++],b[T++],b[T++],b[T++]);if(0==b.length&&u==G){l[q]=0;let T=s;try{throw new Error("Uncaught (in promise): "+function a(l){return l&&l.toString===Object.prototype.toString?(l.constructor&&l.constructor.name||"")+": "+JSON.stringify(l):l?l.toString():Object.prototype.toString.call(l)}(s)+(s&&s.stack?"\n"+s.stack:""))}catch(D){T=D}P&&(T.throwOriginal=!0),T.rejection=s,T.promise=l,T.zone=n.current,T.task=n.currentTask,d.push(T),i.scheduleMicroTask()}}}return l}const U=y("rejectionHandledHandler");function re(l){if(0===l[q]){try{const u=n[U];u&&"function"==typeof u&&u.call(this,{rejection:l[R],promise:l})}catch{}l[q]=G;for(let u=0;u<d.length;u++)l===d[u].promise&&d.splice(u,1)}}function ee(l,u,s,f,g){re(l);const b=l[q],T=b?"function"==typeof f?f:H:"function"==typeof g?g:J;u.scheduleMicroTask("Promise.then",()=>{try{const D=l[R],O=!!s&&_===s[_];O&&(s[K]=D,s[x]=b);const S=u.run(T,void 0,O&&T!==J&&T!==H?[]:[D]);z(s,!0,S)}catch(D){z(s,!1,D)}},s)}const M=function(){},E=e.AggregateError;class t{static toString(){return"function ZoneAwarePromise() { [native code] }"}static resolve(u){return z(new this(null),p,u)}static reject(u){return z(new this(null),G,u)}static any(u){if(!u||"function"!=typeof u[Symbol.iterator])return Promise.reject(new E([],"All promises were rejected"));const s=[];let f=0;try{for(let T of u)f++,s.push(t.resolve(T))}catch{return Promise.reject(new E([],"All promises were rejected"))}if(0===f)return Promise.reject(new E([],"All promises were rejected"));let g=!1;const b=[];return new t((T,D)=>{for(let O=0;O<s.length;O++)s[O].then(S=>{g||(g=!0,T(S))},S=>{b.push(S),f--,0===f&&(g=!0,D(new E(b,"All promises were rejected")))})})}static race(u){let s,f,g=new this((D,O)=>{s=D,f=O});function b(D){s(D)}function T(D){f(D)}for(let D of u)B(D)||(D=this.resolve(D)),D.then(b,T);return g}static all(u){return t.allWithCallback(u)}static allSettled(u){return(this&&this.prototype instanceof t?this:t).allWithCallback(u,{thenCallback:f=>({status:"fulfilled",value:f}),errorCallback:f=>({status:"rejected",reason:f})})}static allWithCallback(u,s){let f,g,b=new this((S,V)=>{f=S,g=V}),T=2,D=0;const O=[];for(let S of u){B(S)||(S=this.resolve(S));const V=D;try{S.then(F=>{O[V]=s?s.thenCallback(F):F,T--,0===T&&f(O)},F=>{s?(O[V]=s.errorCallback(F),T--,0===T&&f(O)):g(F)})}catch(F){g(F)}T++,D++}return T-=2,0===T&&f(O),b}constructor(u){const s=this;if(!(s instanceof t))throw new Error("Must be an instanceof Promise.");s[q]=A,s[R]=[];try{const f=w();u&&u(f(I(s,p)),f(I(s,G)))}catch(f){z(s,!1,f)}}get[Symbol.toStringTag](){return"Promise"}get[Symbol.species](){return t}then(u,s){var f;let g=null===(f=this.constructor)||void 0===f?void 0:f[Symbol.species];(!g||"function"!=typeof g)&&(g=this.constructor||t);const b=new g(M),T=n.current;return this[q]==A?this[R].push(T,b,u,s):ee(this,T,b,u,s),b}catch(u){return this.then(null,u)}finally(u){var s;let f=null===(s=this.constructor)||void 0===s?void 0:s[Symbol.species];(!f||"function"!=typeof f)&&(f=t);const g=new f(M);g[_]=_;const b=n.current;return this[q]==A?this[R].push(b,g,u,u):ee(this,b,g,u,u),g}}t.resolve=t.resolve,t.reject=t.reject,t.race=t.race,t.all=t.all;const r=e[v]=e.Promise;e.Promise=t;const k=y("thenPatched");function C(l){const u=l.prototype,s=o(u,"then");if(s&&(!1===s.writable||!s.configurable))return;const f=u.then;u[m]=f,l.prototype.then=function(g,b){return new t((D,O)=>{f.call(this,D,O)}).then(g,b)},l[k]=!0}return i.patchThen=C,r&&(C(r),le(e,"fetch",l=>function $(l){return function(u,s){let f=l.apply(u,s);if(f instanceof t)return f;let g=f.constructor;return g[k]||C(g),f}}(l))),Promise[n.__symbol__("uncaughtPromiseErrors")]=d,t}),Zone.__load_patch("toString",e=>{const n=Function.prototype.toString,i=j("OriginalDelegate"),o=j("Promise"),c=j("Error"),a=function(){if("function"==typeof this){const v=this[i];if(v)return"function"==typeof v?n.call(v):Object.prototype.toString.call(v);if(this===Promise){const m=e[o];if(m)return n.call(m)}if(this===Error){const m=e[c];if(m)return n.call(m)}}return n.call(this)};a[i]=n,Function.prototype.toString=a;const y=Object.prototype.toString;Object.prototype.toString=function(){return"function"==typeof Promise&&this instanceof Promise?"[object Promise]":y.call(this)}});let ye=!1;if(typeof window<"u")try{const e=Object.defineProperty({},"passive",{get:function(){ye=!0}});window.addEventListener("test",e,e),window.removeEventListener("test",e,e)}catch{ye=!1}const ht={useG:!0},te={},Ye={},$e=new RegExp("^"+ke+"(\\w+)(true|false)$"),Ke=j("propagationStopped");function Je(e,n){const i=(n?n(e):e)+ae,o=(n?n(e):e)+ce,c=ke+i,a=ke+o;te[e]={},te[e][ae]=c,te[e][ce]=a}function dt(e,n,i,o){const c=o&&o.add||Oe,a=o&&o.rm||Se,y=o&&o.listeners||"eventListeners",d=o&&o.rmAll||"removeAllListeners",P=j(c),v="."+c+":",Z=function(R,_,K){if(R.isRemoved)return;const x=R.callback;let X;"object"==typeof x&&x.handleEvent&&(R.callback=p=>x.handleEvent(p),R.originalDelegate=x);try{R.invoke(R,_,[K])}catch(p){X=p}const A=R.options;return A&&"object"==typeof A&&A.once&&_[a].call(_,K.type,R.originalDelegate?R.originalDelegate:R.callback,A),X};function N(R,_,K){if(!(_=_||e.event))return;const x=R||_.target||e,X=x[te[_.type][K?ce:ae]];if(X){const A=[];if(1===X.length){const p=Z(X[0],x,_);p&&A.push(p)}else{const p=X.slice();for(let G=0;G<p.length&&(!_||!0!==_[Ke]);G++){const h=Z(p[G],x,_);h&&A.push(h)}}if(1===A.length)throw A[0];for(let p=0;p<A.length;p++){const G=A[p];n.nativeScheduleMicroTask(()=>{throw G})}}}const B=function(R){return N(this,R,!1)},H=function(R){return N(this,R,!0)};function J(R,_){if(!R)return!1;let K=!0;_&&void 0!==_.useG&&(K=_.useG);const x=_&&_.vh;let X=!0;_&&void 0!==_.chkDup&&(X=_.chkDup);let A=!1;_&&void 0!==_.rt&&(A=_.rt);let p=R;for(;p&&!p.hasOwnProperty(c);)p=de(p);if(!p&&R[c]&&(p=R),!p||p[P])return!1;const G=_&&_.eventNameToString,h={},I=p[P]=p[c],w=p[j(a)]=p[a],Q=p[j(y)]=p[y],oe=p[j(d)]=p[d];let z;function U(s,f){return!ye&&"object"==typeof s&&s?!!s.capture:ye&&f?"boolean"==typeof s?{capture:s,passive:!0}:s?"object"==typeof s&&!1!==s.passive?Object.assign(Object.assign({},s),{passive:!0}):s:{passive:!0}:s}_&&_.prepend&&(z=p[j(_.prepend)]=p[_.prepend]);const t=K?function(s){if(!h.isExisting)return I.call(h.target,h.eventName,h.capture?H:B,h.options)}:function(s){return I.call(h.target,h.eventName,s.invoke,h.options)},r=K?function(s){if(!s.isRemoved){const f=te[s.eventName];let g;f&&(g=f[s.capture?ce:ae]);const b=g&&s.target[g];if(b)for(let T=0;T<b.length;T++)if(b[T]===s){b.splice(T,1),s.isRemoved=!0,0===b.length&&(s.allRemoved=!0,s.target[g]=null);break}}if(s.allRemoved)return w.call(s.target,s.eventName,s.capture?H:B,s.options)}:function(s){return w.call(s.target,s.eventName,s.invoke,s.options)},C=_&&_.diff?_.diff:function(s,f){const g=typeof f;return"function"===g&&s.callback===f||"object"===g&&s.originalDelegate===f},$=Zone[j("UNPATCHED_EVENTS")],l=e[j("PASSIVE_EVENTS")],u=function(s,f,g,b,T=!1,D=!1){return function(){const O=this||e;let S=arguments[0];_&&_.transferEventName&&(S=_.transferEventName(S));let V=arguments[1];if(!V)return s.apply(this,arguments);if(we&&"uncaughtException"===S)return s.apply(this,arguments);let F=!1;if("function"!=typeof V){if(!V.handleEvent)return s.apply(this,arguments);F=!0}if(x&&!x(s,V,O,arguments))return;const fe=ye&&!!l&&-1!==l.indexOf(S),se=U(arguments[2],fe);if($)for(let _e=0;_e<$.length;_e++)if(S===$[_e])return fe?s.call(O,S,V,se):s.apply(this,arguments);const xe=!!se&&("boolean"==typeof se||se.capture),nt=!(!se||"object"!=typeof se)&&se.once,gt=Zone.current;let Ge=te[S];Ge||(Je(S,G),Ge=te[S]);const rt=Ge[xe?ce:ae];let De,me=O[rt],ot=!1;if(me){if(ot=!0,X)for(let _e=0;_e<me.length;_e++)if(C(me[_e],V))return}else me=O[rt]=[];const st=O.constructor.name,it=Ye[st];it&&(De=it[S]),De||(De=st+f+(G?G(S):S)),h.options=se,nt&&(h.options.once=!1),h.target=O,h.capture=xe,h.eventName=S,h.isExisting=ot;const be=K?ht:void 0;be&&(be.taskData=h);const he=gt.scheduleEventTask(De,V,be,g,b);return h.target=null,be&&(be.taskData=null),nt&&(se.once=!0),!ye&&"boolean"==typeof he.options||(he.options=se),he.target=O,he.capture=xe,he.eventName=S,F&&(he.originalDelegate=V),D?me.unshift(he):me.push(he),T?O:void 0}};return p[c]=u(I,v,t,r,A),z&&(p.prependListener=u(z,".prependListener:",function(s){return z.call(h.target,h.eventName,s.invoke,h.options)},r,A,!0)),p[a]=function(){const s=this||e;let f=arguments[0];_&&_.transferEventName&&(f=_.transferEventName(f));const g=arguments[2],b=!!g&&("boolean"==typeof g||g.capture),T=arguments[1];if(!T)return w.apply(this,arguments);if(x&&!x(w,T,s,arguments))return;const D=te[f];let O;D&&(O=D[b?ce:ae]);const S=O&&s[O];if(S)for(let V=0;V<S.length;V++){const F=S[V];if(C(F,T))return S.splice(V,1),F.isRemoved=!0,0===S.length&&(F.allRemoved=!0,s[O]=null,"string"==typeof f)&&(s[ke+"ON_PROPERTY"+f]=null),F.zone.cancelTask(F),A?s:void 0}return w.apply(this,arguments)},p[y]=function(){const s=this||e;let f=arguments[0];_&&_.transferEventName&&(f=_.transferEventName(f));const g=[],b=Qe(s,G?G(f):f);for(let T=0;T<b.length;T++){const D=b[T];g.push(D.originalDelegate?D.originalDelegate:D.callback)}return g},p[d]=function(){const s=this||e;let f=arguments[0];if(f){_&&_.transferEventName&&(f=_.transferEventName(f));const g=te[f];if(g){const D=s[g[ae]],O=s[g[ce]];if(D){const S=D.slice();for(let V=0;V<S.length;V++){const F=S[V];this[a].call(this,f,F.originalDelegate?F.originalDelegate:F.callback,F.options)}}if(O){const S=O.slice();for(let V=0;V<S.length;V++){const F=S[V];this[a].call(this,f,F.originalDelegate?F.originalDelegate:F.callback,F.options)}}}}else{const g=Object.keys(s);for(let b=0;b<g.length;b++){const D=$e.exec(g[b]);let O=D&&D[1];O&&"removeListener"!==O&&this[d].call(this,O)}this[d].call(this,"removeListener")}if(A)return this},ue(p[c],I),ue(p[a],w),oe&&ue(p[d],oe),Q&&ue(p[y],Q),!0}let q=[];for(let R=0;R<i.length;R++)q[R]=J(i[R],o);return q}function Qe(e,n){if(!n){const a=[];for(let y in e){const d=$e.exec(y);let P=d&&d[1];if(P&&(!n||P===n)){const v=e[y];if(v)for(let m=0;m<v.length;m++)a.push(v[m])}}return a}let i=te[n];i||(Je(n),i=te[n]);const o=e[i[ae]],c=e[i[ce]];return o?c?o.concat(c):o.slice():c?c.slice():[]}function _t(e,n){const i=e.Event;i&&i.prototype&&n.patchMethod(i.prototype,"stopImmediatePropagation",o=>function(c,a){c[Ke]=!0,o&&o.apply(c,a)})}function Et(e,n,i,o,c){const a=Zone.__symbol__(o);if(n[a])return;const y=n[a]=n[o];n[o]=function(d,P,v){return P&&P.prototype&&c.forEach(function(m){const L=`${i}.${o}::`+m,Z=P.prototype;try{if(Z.hasOwnProperty(m)){const N=e.ObjectGetOwnPropertyDescriptor(Z,m);N&&N.value?(N.value=e.wrapWithCurrentZone(N.value,L),e._redefineProperty(P.prototype,m,N)):Z[m]&&(Z[m]=e.wrapWithCurrentZone(Z[m],L))}else Z[m]&&(Z[m]=e.wrapWithCurrentZone(Z[m],L))}catch{}}),y.call(n,d,P,v)},e.attachOriginToPatched(n[o],y)}function et(e,n,i){if(!i||0===i.length)return n;const o=i.filter(a=>a.target===e);if(!o||0===o.length)return n;const c=o[0].ignoreProperties;return n.filter(a=>-1===c.indexOf(a))}function tt(e,n,i,o){e&&Xe(e,et(e,n,i),o)}function He(e){return Object.getOwnPropertyNames(e).filter(n=>n.startsWith("on")&&n.length>2).map(n=>n.substring(2))}Zone.__load_patch("util",(e,n,i)=>{const o=He(e);i.patchOnProperties=Xe,i.patchMethod=le,i.bindArguments=Le,i.patchMacroTask=lt;const c=n.__symbol__("BLACK_LISTED_EVENTS"),a=n.__symbol__("UNPATCHED_EVENTS");e[a]&&(e[c]=e[a]),e[c]&&(n[c]=n[a]=e[c]),i.patchEventPrototype=_t,i.patchEventTarget=dt,i.isIEOrEdge=ft,i.ObjectDefineProperty=Ee,i.ObjectGetOwnPropertyDescriptor=ie,i.ObjectCreate=ge,i.ArraySlice=Ve,i.patchClass=ve,i.wrapWithCurrentZone=Ie,i.filterProperties=et,i.attachOriginToPatched=ue,i._redefineProperty=Object.defineProperty,i.patchCallbacks=Et,i.getGlobalObjects=()=>({globalSources:Ye,zoneSymbolEventNames:te,eventNames:o,isBrowser:Ae,isMix:Ue,isNode:we,TRUE_STR:ce,FALSE_STR:ae,ZONE_SYMBOL_PREFIX:ke,ADD_EVENT_LISTENER_STR:Oe,REMOVE_EVENT_LISTENER_STR:Se})});const Ce=j("zoneTask");function pe(e,n,i,o){let c=null,a=null;i+=o;const y={};function d(v){const m=v.data;return m.args[0]=function(){return v.invoke.apply(this,arguments)},m.handleId=c.apply(e,m.args),v}function P(v){return a.call(e,v.data.handleId)}c=le(e,n+=o,v=>function(m,L){if("function"==typeof L[0]){const Z={isPeriodic:"Interval"===o,delay:"Timeout"===o||"Interval"===o?L[1]||0:void 0,args:L},N=L[0];L[0]=function(){try{return N.apply(this,arguments)}finally{Z.isPeriodic||("number"==typeof Z.handleId?delete y[Z.handleId]:Z.handleId&&(Z.handleId[Ce]=null))}};const B=Me(n,L[0],Z,d,P);if(!B)return B;const H=B.data.handleId;return"number"==typeof H?y[H]=B:H&&(H[Ce]=B),H&&H.ref&&H.unref&&"function"==typeof H.ref&&"function"==typeof H.unref&&(B.ref=H.ref.bind(H),B.unref=H.unref.bind(H)),"number"==typeof H||H?H:B}return v.apply(e,L)}),a=le(e,i,v=>function(m,L){const Z=L[0];let N;"number"==typeof Z?N=y[Z]:(N=Z&&Z[Ce],N||(N=Z)),N&&"string"==typeof N.type?"notScheduled"!==N.state&&(N.cancelFn&&N.data.isPeriodic||0===N.runCount)&&("number"==typeof Z?delete y[Z]:Z&&(Z[Ce]=null),N.zone.cancelTask(N)):v.apply(e,L)})}Zone.__load_patch("legacy",e=>{const n=e[Zone.__symbol__("legacyPatch")];n&&n()}),Zone.__load_patch("queueMicrotask",(e,n,i)=>{i.patchMethod(e,"queueMicrotask",o=>function(c,a){n.current.scheduleMicroTask("queueMicrotask",a[0])})}),Zone.__load_patch("timers",e=>{const n="set",i="clear";pe(e,n,i,"Timeout"),pe(e,n,i,"Interval"),pe(e,n,i,"Immediate")}),Zone.__load_patch("requestAnimationFrame",e=>{pe(e,"request","cancel","AnimationFrame"),pe(e,"mozRequest","mozCancel","AnimationFrame"),pe(e,"webkitRequest","webkitCancel","AnimationFrame")}),Zone.__load_patch("blocking",(e,n)=>{const i=["alert","prompt","confirm"];for(let o=0;o<i.length;o++)le(e,i[o],(a,y,d)=>function(P,v){return n.current.run(a,e,v,d)})}),Zone.__load_patch("EventTarget",(e,n,i)=>{(function mt(e,n){n.patchEventPrototype(e,n)})(e,i),function pt(e,n){if(Zone[n.symbol("patchEventTarget")])return;const{eventNames:i,zoneSymbolEventNames:o,TRUE_STR:c,FALSE_STR:a,ZONE_SYMBOL_PREFIX:y}=n.getGlobalObjects();for(let P=0;P<i.length;P++){const v=i[P],Z=y+(v+a),N=y+(v+c);o[v]={},o[v][a]=Z,o[v][c]=N}const d=e.EventTarget;d&&d.prototype&&n.patchEventTarget(e,n,[d&&d.prototype])}(e,i);const o=e.XMLHttpRequestEventTarget;o&&o.prototype&&i.patchEventTarget(e,i,[o.prototype])}),Zone.__load_patch("MutationObserver",(e,n,i)=>{ve("MutationObserver"),ve("WebKitMutationObserver")}),Zone.__load_patch("IntersectionObserver",(e,n,i)=>{ve("IntersectionObserver")}),Zone.__load_patch("FileReader",(e,n,i)=>{ve("FileReader")}),Zone.__load_patch("on_property",(e,n,i)=>{!function Tt(e,n){if(we&&!Ue||Zone[e.symbol("patchEvents")])return;const i=n.__Zone_ignore_on_properties;let o=[];if(Ae){const c=window;o=o.concat(["Document","SVGElement","Element","HTMLElement","HTMLBodyElement","HTMLMediaElement","HTMLFrameSetElement","HTMLFrameElement","HTMLIFrameElement","HTMLMarqueeElement","Worker"]);const a=function ut(){try{const e=Te.navigator.userAgent;if(-1!==e.indexOf("MSIE ")||-1!==e.indexOf("Trident/"))return!0}catch{}return!1}()?[{target:c,ignoreProperties:["error"]}]:[];tt(c,He(c),i&&i.concat(a),de(c))}o=o.concat(["XMLHttpRequest","XMLHttpRequestEventTarget","IDBIndex","IDBRequest","IDBOpenDBRequest","IDBDatabase","IDBTransaction","IDBCursor","WebSocket"]);for(let c=0;c<o.length;c++){const a=n[o[c]];a&&a.prototype&&tt(a.prototype,He(a.prototype),i)}}(i,e)}),Zone.__load_patch("customElements",(e,n,i)=>{!function yt(e,n){const{isBrowser:i,isMix:o}=n.getGlobalObjects();(i||o)&&e.customElements&&"customElements"in e&&n.patchCallbacks(n,e.customElements,"customElements","define",["connectedCallback","disconnectedCallback","adoptedCallback","attributeChangedCallback"])}(e,i)}),Zone.__load_patch("XHR",(e,n)=>{!function P(v){const m=v.XMLHttpRequest;if(!m)return;const L=m.prototype;let N=L[Ze],B=L[Ne];if(!N){const h=v.XMLHttpRequestEventTarget;if(h){const I=h.prototype;N=I[Ze],B=I[Ne]}}const H="readystatechange",J="scheduled";function q(h){const I=h.data,w=I.target;w[a]=!1,w[d]=!1;const Q=w[c];N||(N=w[Ze],B=w[Ne]),Q&&B.call(w,H,Q);const oe=w[c]=()=>{if(w.readyState===w.DONE)if(!I.aborted&&w[a]&&h.state===J){const U=w[n.__symbol__("loadfalse")];if(0!==w.status&&U&&U.length>0){const re=h.invoke;h.invoke=function(){const ee=w[n.__symbol__("loadfalse")];for(let W=0;W<ee.length;W++)ee[W]===h&&ee.splice(W,1);!I.aborted&&h.state===J&&re.call(h)},U.push(h)}else h.invoke()}else!I.aborted&&!1===w[a]&&(w[d]=!0)};return N.call(w,H,oe),w[i]||(w[i]=h),p.apply(w,I.args),w[a]=!0,h}function R(){}function _(h){const I=h.data;return I.aborted=!0,G.apply(I.target,I.args)}const K=le(L,"open",()=>function(h,I){return h[o]=0==I[2],h[y]=I[1],K.apply(h,I)}),X=j("fetchTaskAborting"),A=j("fetchTaskScheduling"),p=le(L,"send",()=>function(h,I){if(!0===n.current[A]||h[o])return p.apply(h,I);{const w={target:h,url:h[y],isPeriodic:!1,args:I,aborted:!1},Q=Me("XMLHttpRequest.send",R,w,q,_);h&&!0===h[d]&&!w.aborted&&Q.state===J&&Q.invoke()}}),G=le(L,"abort",()=>function(h,I){const w=function Z(h){return h[i]}(h);if(w&&"string"==typeof w.type){if(null==w.cancelFn||w.data&&w.data.aborted)return;w.zone.cancelTask(w)}else if(!0===n.current[X])return G.apply(h,I)})}(e);const i=j("xhrTask"),o=j("xhrSync"),c=j("xhrListener"),a=j("xhrScheduled"),y=j("xhrURL"),d=j("xhrErrorBeforeScheduled")}),Zone.__load_patch("geolocation",e=>{e.navigator&&e.navigator.geolocation&&function at(e,n){const i=e.constructor.name;for(let o=0;o<n.length;o++){const c=n[o],a=e[c];if(a){if(!Fe(ie(e,c)))continue;e[c]=(d=>{const P=function(){return d.apply(this,Le(arguments,i+"."+c))};return ue(P,d),P})(a)}}}(e.navigator.geolocation,["getCurrentPosition","watchPosition"])}),Zone.__load_patch("PromiseRejectionEvent",(e,n)=>{function i(o){return function(c){Qe(e,o).forEach(y=>{const d=e.PromiseRejectionEvent;if(d){const P=new d(o,{promise:c.promise,reason:c.rejection});y.invoke(P)}})}}e.PromiseRejectionEvent&&(n[j("unhandledPromiseRejectionHandler")]=i("unhandledrejection"),n[j("rejectionHandledHandler")]=i("rejectionhandled"))})}},ie=>{ie(ie.s=435)}]);"use strict";(self.webpackChunkremoteApps=self.webpackChunkremoteApps||[]).push([[179],{186:()=>{function te(n){return"function"==typeof n}function bd(n){const t=n(l=>{Error.call(l),l.stack=(new Error).stack});return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}const eU=bd(n=>function(t){n(this),this.message=t?`${t.length} errors occurred during unsubscription:\n${t.map((l,V)=>`${V+1}) ${l.toString()}`).join("\n  ")}`:"",this.name="UnsubscriptionError",this.errors=t});function MV(n,e){if(n){const t=n.indexOf(e);0<=t&&n.splice(t,1)}}class Fe{constructor(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}unsubscribe(){let e;if(!this.closed){this.closed=!0;const{_parentage:t}=this;if(t)if(this._parentage=null,Array.isArray(t))for(const d of t)d.remove(this);else t.remove(this);const{initialTeardown:l}=this;if(te(l))try{l()}catch(d){e=d instanceof eU?d.errors:[d]}const{_finalizers:V}=this;if(V){this._finalizers=null;for(const d of V)try{$o(d)}catch(a){e=e??[],a instanceof eU?e=[...e,...a.errors]:e.push(a)}}if(e)throw new eU(e)}}add(e){var t;if(e&&e!==this)if(this.closed)$o(e);else{if(e instanceof Fe){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(e)}}_hasParent(e){const{_parentage:t}=this;return t===e||Array.isArray(t)&&t.includes(e)}_addParent(e){const{_parentage:t}=this;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e}_removeParent(e){const{_parentage:t}=this;t===e?this._parentage=null:Array.isArray(t)&&MV(t,e)}remove(e){const{_finalizers:t}=this;t&&MV(t,e),e instanceof Fe&&e._removeParent(this)}}Fe.EMPTY=(()=>{const n=new Fe;return n.closed=!0,n})();const qo=Fe.EMPTY;function Ao(n){return n instanceof Fe||n&&"closed"in n&&te(n.remove)&&te(n.add)&&te(n.unsubscribe)}function $o(n){te(n)?n():n.unsubscribe()}const Gl={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},tU={setTimeout(n,e,...t){const{delegate:l}=tU;return l?.setTimeout?l.setTimeout(n,e,...t):setTimeout(n,e,...t)},clearTimeout(n){const{delegate:e}=tU;return(e?.clearTimeout||clearTimeout)(n)},delegate:void 0};function es(n){tU.setTimeout(()=>{const{onUnhandledError:e}=Gl;if(!e)throw n;e(n)})}function LR(){}const eE=CR("C",void 0,void 0);function CR(n,e,t){return{kind:n,value:e,error:t}}let Dl=null;function nU(n){if(Gl.useDeprecatedSynchronousErrorHandling){const e=!Dl;if(e&&(Dl={errorThrown:!1,error:null}),n(),e){const{errorThrown:t,error:l}=Dl;if(Dl=null,t)throw l}}else n()}class KR extends Fe{constructor(e){super(),this.isStopped=!1,e?(this.destination=e,Ao(e)&&e.add(this)):this.destination=UE}static create(e,t,l){return new ud(e,t,l)}next(e){this.isStopped?_R(function nE(n){return CR("N",n,void 0)}(e),this):this._next(e)}error(e){this.isStopped?_R(function tE(n){return CR("E",void 0,n)}(e),this):(this.isStopped=!0,this._error(e))}complete(){this.isStopped?_R(eE,this):(this.isStopped=!0,this._complete())}unsubscribe(){this.closed||(this.isStopped=!0,super.unsubscribe(),this.destination=null)}_next(e){this.destination.next(e)}_error(e){try{this.destination.error(e)}finally{this.unsubscribe()}}_complete(){try{this.destination.complete()}finally{this.unsubscribe()}}}const VE=Function.prototype.bind;function PR(n,e){return VE.call(n,e)}class dE{constructor(e){this.partialObserver=e}next(e){const{partialObserver:t}=this;if(t.next)try{t.next(e)}catch(l){lU(l)}}error(e){const{partialObserver:t}=this;if(t.error)try{t.error(e)}catch(l){lU(l)}else lU(e)}complete(){const{partialObserver:e}=this;if(e.complete)try{e.complete()}catch(t){lU(t)}}}class ud extends KR{constructor(e,t,l){let V;if(super(),te(e)||!e)V={next:e??void 0,error:t??void 0,complete:l??void 0};else{let d;this&&Gl.useDeprecatedNextContext?(d=Object.create(e),d.unsubscribe=()=>this.unsubscribe(),V={next:e.next&&PR(e.next,d),error:e.error&&PR(e.error,d),complete:e.complete&&PR(e.complete,d)}):V=e}this.destination=new dE(V)}}function lU(n){Gl.useDeprecatedSynchronousErrorHandling?function lE(n){Gl.useDeprecatedSynchronousErrorHandling&&Dl&&(Dl.errorThrown=!0,Dl.error=n)}(n):es(n)}function _R(n,e){const{onStoppedNotification:t}=Gl;t&&tU.setTimeout(()=>t(n,e))}const UE={closed:!0,next:LR,error:function aE(n){throw n},complete:LR},qR="function"==typeof Symbol&&Symbol.observable||"@@observable";function Nl(n){return n}function ts(n){return 0===n.length?Nl:1===n.length?n[0]:function(t){return n.reduce((l,V)=>V(l),t)}}let ie=(()=>{class n{constructor(t){t&&(this._subscribe=t)}lift(t){const l=new n;return l.source=this,l.operator=t,l}subscribe(t,l,V){const d=function ZE(n){return n&&n instanceof KR||function RE(n){return n&&te(n.next)&&te(n.error)&&te(n.complete)}(n)&&Ao(n)}(t)?t:new ud(t,l,V);return nU(()=>{const{operator:a,source:U}=this;d.add(a?a.call(d,U):U?this._subscribe(d):this._trySubscribe(d))}),d}_trySubscribe(t){try{return this._subscribe(t)}catch(l){t.error(l)}}forEach(t,l){return new(l=ns(l))((V,d)=>{const a=new ud({next:U=>{try{t(U)}catch(N){d(N),a.unsubscribe()}},error:d,complete:V});this.subscribe(a)})}_subscribe(t){var l;return null===(l=this.source)||void 0===l?void 0:l.subscribe(t)}[qR](){return this}pipe(...t){return ts(t)(this)}toPromise(t){return new(t=ns(t))((l,V)=>{let d;this.subscribe(a=>d=a,a=>V(a),()=>l(d))})}}return n.create=e=>new n(e),n})();function ns(n){var e;return null!==(e=n??Gl.Promise)&&void 0!==e?e:Promise}const rE=bd(n=>function(){n(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"});let u=(()=>{class n extends ie{constructor(){super(),this.closed=!1,this.currentObservers=null,this.observers=[],this.isStopped=!1,this.hasError=!1,this.thrownError=null}lift(t){const l=new ls(this,this);return l.operator=t,l}_throwIfClosed(){if(this.closed)throw new rE}next(t){nU(()=>{if(this._throwIfClosed(),!this.isStopped){this.currentObservers||(this.currentObservers=Array.from(this.observers));for(const l of this.currentObservers)l.next(t)}})}error(t){nU(()=>{if(this._throwIfClosed(),!this.isStopped){this.hasError=this.isStopped=!0,this.thrownError=t;const{observers:l}=this;for(;l.length;)l.shift().error(t)}})}complete(){nU(()=>{if(this._throwIfClosed(),!this.isStopped){this.isStopped=!0;const{observers:t}=this;for(;t.length;)t.shift().complete()}})}unsubscribe(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null}get observed(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0}_trySubscribe(t){return this._throwIfClosed(),super._trySubscribe(t)}_subscribe(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)}_innerSubscribe(t){const{hasError:l,isStopped:V,observers:d}=this;return l||V?qo:(this.currentObservers=null,d.push(t),new Fe(()=>{this.currentObservers=null,MV(d,t)}))}_checkFinalizedStatuses(t){const{hasError:l,thrownError:V,isStopped:d}=this;l?t.error(V):d&&t.complete()}asObservable(){const t=new ie;return t.source=this,t}}return n.create=(e,t)=>new ls(e,t),n})();class ls extends u{constructor(e,t){super(),this.destination=e,this.source=t}next(e){var t,l;null===(l=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===l||l.call(t,e)}error(e){var t,l;null===(l=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===l||l.call(t,e)}complete(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)}_subscribe(e){var t,l;return null!==(l=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==l?l:qo}}function Vs(n){return te(n?.lift)}function ze(n){return e=>{if(Vs(e))return e.lift(function(t){try{return n(t,this)}catch(l){this.error(l)}});throw new TypeError("Unable to lift unknown Observable type")}}function pe(n,e,t,l,V){return new cE(n,e,t,l,V)}class cE extends KR{constructor(e,t,l,V,d,a){super(e),this.onFinalize=d,this.shouldUnsubscribe=a,this._next=t?function(U){try{t(U)}catch(N){e.error(N)}}:super._next,this._error=V?function(U){try{V(U)}catch(N){e.error(N)}finally{this.unsubscribe()}}:super._error,this._complete=l?function(){try{l()}catch(U){e.error(U)}finally{this.unsubscribe()}}:super._complete}unsubscribe(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){const{closed:t}=this;super.unsubscribe(),!t&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}}}function D(n,e){return ze((t,l)=>{let V=0;t.subscribe(pe(l,d=>{l.next(n.call(e,d,V++))}))})}function oE(n,e){return function(t,l){e(t,l,n)}}function sE(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)}function xl(n){return this instanceof xl?(this.v=n,this):new xl(n)}function WE(n,e,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var V,l=t.apply(n,e||[]),d=[];return V={},a("next"),a("throw"),a("return"),V[Symbol.asyncIterator]=function(){return this},V;function a(c){l[c]&&(V[c]=function(i){return new Promise(function(o,s){d.push([c,i,o,s])>1||U(c,i)})})}function U(c,i){try{!function N(c){c.value instanceof xl?Promise.resolve(c.value.v).then(R,Z):r(d[0][2],c)}(l[c](i))}catch(o){r(d[0][3],o)}}function R(c){U("next",c)}function Z(c){U("throw",c)}function r(c,i){c(i),d.shift(),d.length&&U(d[0][0],d[0][1])}}function FE(n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,e=n[Symbol.asyncIterator];return e?e.call(n):(n=function Us(n){var e="function"==typeof Symbol&&Symbol.iterator,t=e&&n[e],l=0;if(t)return t.call(n);if(n&&"number"==typeof n.length)return{next:function(){return n&&l>=n.length&&(n=void 0),{value:n&&n[l++],done:!n}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}(n),t={},l("next"),l("throw"),l("return"),t[Symbol.asyncIterator]=function(){return this},t);function l(d){t[d]=n[d]&&function(a){return new Promise(function(U,N){!function V(d,a,U,N){Promise.resolve(N).then(function(R){d({value:R,done:U})},a)}(U,N,(a=n[d](a)).done,a.value)})}}}const $R=n=>n&&"number"==typeof n.length&&"function"!=typeof n;function Ns(n){return te(n?.then)}function Rs(n){return te(n[qR])}function Zs(n){return Symbol.asyncIterator&&te(n?.[Symbol.asyncIterator])}function rs(n){return new TypeError(`You provided ${null!==n&&"object"==typeof n?"an invalid object":`'${n}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`)}const cs=function mE(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}();function is(n){return te(n?.[cs])}function os(n){return WE(this,arguments,function*(){const t=n.getReader();try{for(;;){const{value:l,done:V}=yield xl(t.read());if(V)return yield xl(void 0);yield yield xl(l)}}finally{t.releaseLock()}})}function ss(n){return te(n?.getReader)}function ot(n){if(n instanceof ie)return n;if(null!=n){if(Rs(n))return function pE(n){return new ie(e=>{const t=n[qR]();if(te(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")})}(n);if($R(n))return function kE(n){return new ie(e=>{for(let t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()})}(n);if(Ns(n))return function EE(n){return new ie(e=>{n.then(t=>{e.closed||(e.next(t),e.complete())},t=>e.error(t)).then(null,es)})}(n);if(Zs(n))return Ts(n);if(is(n))return function SE(n){return new ie(e=>{for(const t of n)if(e.next(t),e.closed)return;e.complete()})}(n);if(ss(n))return function YE(n){return Ts(os(n))}(n)}throw rs(n)}function Ts(n){return new ie(e=>{(function JE(n,e){var t,l,V,d;return function TE(n,e,t,l){return new(t||(t=Promise))(function(d,a){function U(Z){try{R(l.next(Z))}catch(r){a(r)}}function N(Z){try{R(l.throw(Z))}catch(r){a(r)}}function R(Z){Z.done?d(Z.value):function V(d){return d instanceof t?d:new t(function(a){a(d)})}(Z.value).then(U,N)}R((l=l.apply(n,e||[])).next())})}(this,void 0,void 0,function*(){try{for(t=FE(n);!(l=yield t.next()).done;)if(e.next(l.value),e.closed)return}catch(a){V={error:a}}finally{try{l&&!l.done&&(d=t.return)&&(yield d.call(t))}finally{if(V)throw V.error}}e.complete()})})(n,e).catch(t=>e.error(t))})}function jn(n,e,t,l=0,V=!1){const d=e.schedule(function(){t(),V?n.add(this.schedule(null,l)):this.unsubscribe()},l);if(n.add(d),!V)return d}function Ce(n,e,t=1/0){return te(e)?Ce((l,V)=>D((d,a)=>e(l,d,V,a))(ot(n(l,V))),t):("number"==typeof e&&(t=e),ze((l,V)=>function QE(n,e,t,l,V,d,a,U){const N=[];let R=0,Z=0,r=!1;const c=()=>{r&&!N.length&&!R&&e.complete()},i=s=>R<l?o(s):N.push(s),o=s=>{d&&e.next(s),R++;let T=!1;ot(t(s,Z++)).subscribe(pe(e,W=>{V?.(W),d?i(W):e.next(W)},()=>{T=!0},void 0,()=>{if(T)try{for(R--;N.length&&R<l;){const W=N.shift();a?jn(e,a,()=>o(W)):o(W)}c()}catch(W){e.error(W)}}))};return n.subscribe(pe(e,i,()=>{r=!0,c()})),()=>{U?.()}}(l,V,n,t)))}function mV(n=1/0){return Ce(Nl,n)}const pn=new ie(n=>n.complete());function hs(n){return n&&te(n.schedule)}function eZ(n){return n[n.length-1]}function Gd(n){return hs(eZ(n))?n.pop():void 0}function Fs(n,e=0){return ze((t,l)=>{t.subscribe(pe(l,V=>jn(l,n,()=>l.next(V),e),()=>jn(l,n,()=>l.complete(),e),V=>jn(l,n,()=>l.error(V),e)))})}function Ms(n,e=0){return ze((t,l)=>{l.add(n.schedule(()=>t.subscribe(l),e))})}function ms(n,e){if(!n)throw new Error("Iterable cannot be null");return new ie(t=>{jn(t,e,()=>{const l=n[Symbol.asyncIterator]();jn(t,e,()=>{l.next().then(V=>{V.done?t.complete():t.next(V.value)})},0,!0)})})}function Be(n,e){return e?function yE(n,e){if(null!=n){if(Rs(n))return function uE(n,e){return ot(n).pipe(Ms(e),Fs(e))}(n,e);if($R(n))return function DE(n,e){return new ie(t=>{let l=0;return e.schedule(function(){l===n.length?t.complete():(t.next(n[l++]),t.closed||this.schedule())})})}(n,e);if(Ns(n))return function GE(n,e){return ot(n).pipe(Ms(e),Fs(e))}(n,e);if(Zs(n))return ms(n,e);if(is(n))return function xE(n,e){return new ie(t=>{let l;return jn(t,e,()=>{l=n[cs](),jn(t,e,()=>{let V,d;try{({value:V,done:d}=l.next())}catch(a){return void t.error(a)}d?t.complete():t.next(V)},0,!0)}),()=>te(l?.return)&&l.return()})}(n,e);if(ss(n))return function XE(n,e){return ms(os(n),e)}(n,e)}throw rs(n)}(n,e):ot(n)}function pV(...n){const e=Gd(n),t=function bE(n,e){return"number"==typeof eZ(n)?n.pop():e}(n,1/0),l=n;return l.length?1===l.length?ot(l[0]):mV(t)(Be(l,e)):pn}function tZ(n,e,...t){if(!0===e)return void n();if(!1===e)return;const l=new ud({next:()=>{l.unsubscribe(),n()}});return e(...t).subscribe(l)}function oe(n){for(let e in n)if(n[e]===oe)return e;throw Error("Could not find renamed property on target object.")}function nZ(n,e){for(const t in e)e.hasOwnProperty(t)&&!n.hasOwnProperty(t)&&(n[t]=e[t])}function se(n){if("string"==typeof n)return n;if(Array.isArray(n))return"["+n.map(se).join(", ")+"]";if(null==n)return""+n;if(n.overriddenName)return`${n.overriddenName}`;if(n.name)return`${n.name}`;const e=n.toString();if(null==e)return""+e;const t=e.indexOf("\n");return-1===t?e:e.substring(0,t)}function lZ(n,e){return null==n||""===n?null===e?"":e:null==e||""===e?n:n+" "+e}const jE=oe({__forward_ref__:oe});function VZ(n){return n.__forward_ref__=VZ,n.toString=function(){return se(this())},n}function H(n){return dZ(n)?n():n}function dZ(n){return"function"==typeof n&&n.hasOwnProperty(jE)&&n.__forward_ref__===VZ}class k extends Error{constructor(e,t){super(function VU(n,e){return`NG0${Math.abs(n)}${e?": "+e.trim():""}`}(e,t)),this.code=e}}function O(n){return"string"==typeof n?n:null==n?"":String(n)}function dU(n,e){throw new k(-201,!1)}function kt(n,e){null==n&&function Ne(n,e,t,l){throw new Error(`ASSERTION ERROR: ${n}`+(null==l?"":` [Expected=> ${t} ${l} ${e} <=Actual]`))}(e,n,null,"!=")}function S(n){return{token:n.token,providedIn:n.providedIn||null,factory:n.factory,value:void 0}}function le(n){return{providers:n.providers||[],imports:n.imports||[]}}function aU(n){return ks(n,UU)||ks(n,Ss)}function ks(n,e){return n.hasOwnProperty(e)?n[e]:null}function Es(n){return n&&(n.hasOwnProperty(aZ)||n.hasOwnProperty(LE))?n[aZ]:null}const UU=oe({\u0275prov:oe}),aZ=oe({\u0275inj:oe}),Ss=oe({ngInjectableDef:oe}),LE=oe({ngInjectorDef:oe});var X=(()=>((X=X||{})[X.Default=0]="Default",X[X.Host=1]="Host",X[X.Self=2]="Self",X[X.SkipSelf=4]="SkipSelf",X[X.Optional=8]="Optional",X))();let UZ;function gt(n){const e=UZ;return UZ=n,e}function Ys(n,e,t){const l=aU(n);return l&&"root"==l.providedIn?void 0===l.value?l.value=l.factory():l.value:t&X.Optional?null:void 0!==e?e:void dU(se(n))}function Rl(n){return{toString:n}.toString()}var nn=(()=>((nn=nn||{})[nn.OnPush=0]="OnPush",nn[nn.Default=1]="Default",nn))(),ln=(()=>{return(n=ln||(ln={}))[n.Emulated=0]="Emulated",n[n.None=2]="None",n[n.ShadowDom=3]="ShadowDom",ln;var n})();const Te=(()=>typeof globalThis<"u"&&globalThis||typeof global<"u"&&global||typeof window<"u"&&window||typeof self<"u"&&typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&self)(),kV={},de=[],NU=oe({\u0275cmp:oe}),NZ=oe({\u0275dir:oe}),RZ=oe({\u0275pipe:oe}),Js=oe({\u0275mod:oe}),Bn=oe({\u0275fac:oe}),Dd=oe({__NG_ELEMENT_ID__:oe});let KE=0;function Et(n){return Rl(()=>{const t=!0===n.standalone,l={},V={type:n.type,providersResolver:null,decls:n.decls,vars:n.vars,factory:null,template:n.template||null,consts:n.consts||null,ngContentSelectors:n.ngContentSelectors,hostBindings:n.hostBindings||null,hostVars:n.hostVars||0,hostAttrs:n.hostAttrs||null,contentQueries:n.contentQueries||null,declaredInputs:l,inputs:null,outputs:null,exportAs:n.exportAs||null,onPush:n.changeDetection===nn.OnPush,directiveDefs:null,pipeDefs:null,standalone:t,dependencies:t&&n.dependencies||null,getStandaloneInjector:null,selectors:n.selectors||de,viewQuery:n.viewQuery||null,features:n.features||null,data:n.data||{},encapsulation:n.encapsulation||ln.Emulated,id:"c"+KE++,styles:n.styles||de,_:null,setInput:null,schemas:n.schemas||null,tView:null},d=n.dependencies,a=n.features;return V.inputs=bs(n.inputs,l),V.outputs=bs(n.outputs),a&&a.forEach(U=>U(V)),V.directiveDefs=d?()=>("function"==typeof d?d():d).map(Qs).filter(zs):null,V.pipeDefs=d?()=>("function"==typeof d?d():d).map(dt).filter(zs):null,V})}function Qs(n){return Re(n)||Vt(n)}function zs(n){return null!==n}function ae(n){return Rl(()=>({type:n.type,bootstrap:n.bootstrap||de,declarations:n.declarations||de,imports:n.imports||de,exports:n.exports||de,transitiveCompileScopes:null,schemas:n.schemas||null,id:n.id||null}))}function bs(n,e){if(null==n)return kV;const t={};for(const l in n)if(n.hasOwnProperty(l)){let V=n[l],d=V;Array.isArray(V)&&(d=V[1],V=V[0]),t[V]=l,e&&(e[V]=d)}return t}const Me=Et;function st(n){return{type:n.type,name:n.name,factory:null,pure:!1!==n.pure,standalone:!0===n.standalone,onDestroy:n.type.prototype.ngOnDestroy||null}}function Re(n){return n[NU]||null}function Vt(n){return n[NZ]||null}function dt(n){return n[RZ]||null}function St(n,e){const t=n[Js]||null;if(!t&&!0===e)throw new Error(`Type ${se(n)} does not have '\u0275mod' property.`);return t}const I=11;function Tt(n){return Array.isArray(n)&&"object"==typeof n[1]}function dn(n){return Array.isArray(n)&&!0===n[1]}function cZ(n){return 0!=(8&n.flags)}function cU(n){return 2==(2&n.flags)}function iU(n){return 1==(1&n.flags)}function an(n){return null!==n.template}function eS(n){return 0!=(256&n[2])}function Bl(n,e){return n.hasOwnProperty(Bn)?n[Bn]:null}class Ds{constructor(e,t,l){this.previousValue=e,this.currentValue=t,this.firstChange=l}isFirstChange(){return this.firstChange}}function kn(){return xs}function xs(n){return n.type.prototype.ngOnChanges&&(n.setInput=VS),lS}function lS(){const n=ys(this),e=n?.current;if(e){const t=n.previous;if(t===kV)n.previous=e;else for(let l in e)t[l]=e[l];n.current=null,this.ngOnChanges(e)}}function VS(n,e,t,l){const V=ys(n)||function dS(n,e){return n[Xs]=e}(n,{previous:kV,current:null}),d=V.current||(V.current={}),a=V.previous,U=this.declaredInputs[t],N=a[U];d[U]=new Ds(N&&N.currentValue,e,a===kV),n[l]=e}kn.ngInherit=!0;const Xs="__ngSimpleChanges__";function ys(n){return n[Xs]||null}function xe(n){for(;Array.isArray(n);)n=n[0];return n}function oU(n,e){return xe(e[n])}function Jt(n,e){return xe(e[n.index])}function hZ(n,e){return n.data[e]}function Qt(n,e){const t=e[n];return Tt(t)?t:t[0]}function sU(n){return 64==(64&n[2])}function Zl(n,e){return null==e?null:n[e]}function js(n){n[18]=0}function WZ(n,e){n[5]+=e;let t=n,l=n[3];for(;null!==l&&(1===e&&1===t[5]||-1===e&&0===t[5]);)l[5]+=e,t=l,l=l[3]}const B={lFrame:Cs(null),bindingsEnabled:!0};function Bs(){return B.bindingsEnabled}function m(){return B.lFrame.lView}function ee(){return B.lFrame.tView}function Ol(n){return B.lFrame.contextLView=n,n[8]}function vl(n){return B.lFrame.contextLView=null,n}function Oe(){let n=Os();for(;null!==n&&64===n.type;)n=n.parent;return n}function Os(){return B.lFrame.currentTNode}function En(n,e){const t=B.lFrame;t.currentTNode=n,t.isParent=e}function FZ(){return B.lFrame.isParent}function MZ(){B.lFrame.isParent=!1}function at(){const n=B.lFrame;let e=n.bindingRootIndex;return-1===e&&(e=n.bindingRootIndex=n.tView.bindingStartIndex),e}function zV(){return B.lFrame.bindingIndex++}function MS(n,e){const t=B.lFrame;t.bindingIndex=t.bindingRootIndex=n,mZ(e)}function mZ(n){B.lFrame.currentDirectiveIndex=n}function pZ(n){const e=B.lFrame.currentDirectiveIndex;return-1===e?null:n[e]}function Is(){return B.lFrame.currentQueryIndex}function kZ(n){B.lFrame.currentQueryIndex=n}function pS(n){const e=n[1];return 2===e.type?e.declTNode:1===e.type?n[6]:null}function fs(n,e,t){if(t&X.SkipSelf){let V=e,d=n;for(;!(V=V.parent,null!==V||t&X.Host||(V=pS(d),null===V||(d=d[15],10&V.type))););if(null===V)return!1;e=V,n=d}const l=B.lFrame=Ls();return l.currentTNode=e,l.lView=n,!0}function EZ(n){const e=Ls(),t=n[1];B.lFrame=e,e.currentTNode=t.firstChild,e.lView=n,e.tView=t,e.contextLView=n,e.bindingIndex=t.bindingStartIndex,e.inI18n=!1}function Ls(){const n=B.lFrame,e=null===n?null:n.child;return null===e?Cs(n):e}function Cs(n){const e={currentTNode:null,isParent:!0,lView:null,tView:null,selectedIndex:-1,contextLView:null,elementDepthCount:0,currentNamespace:null,currentDirectiveIndex:-1,bindingRootIndex:-1,bindingIndex:-1,currentQueryIndex:0,parent:n,child:null,inI18n:!1};return null!==n&&(n.child=e),e}function Ks(){const n=B.lFrame;return B.lFrame=n.parent,n.currentTNode=null,n.lView=null,n}const Ps=Ks;function SZ(){const n=Ks();n.isParent=!0,n.tView=null,n.selectedIndex=-1,n.contextLView=null,n.elementDepthCount=0,n.currentDirectiveIndex=-1,n.currentNamespace=null,n.bindingRootIndex=-1,n.bindingIndex=-1,n.currentQueryIndex=0}function Ut(){return B.lFrame.selectedIndex}function rl(n){B.lFrame.selectedIndex=n}function Ee(){const n=B.lFrame;return hZ(n.tView,n.selectedIndex)}function TU(n,e){for(let t=e.directiveStart,l=e.directiveEnd;t<l;t++){const d=n.data[t].type.prototype,{ngAfterContentInit:a,ngAfterContentChecked:U,ngAfterViewInit:N,ngAfterViewChecked:R,ngOnDestroy:Z}=d;a&&(n.contentHooks||(n.contentHooks=[])).push(-t,a),U&&((n.contentHooks||(n.contentHooks=[])).push(t,U),(n.contentCheckHooks||(n.contentCheckHooks=[])).push(t,U)),N&&(n.viewHooks||(n.viewHooks=[])).push(-t,N),R&&((n.viewHooks||(n.viewHooks=[])).push(t,R),(n.viewCheckHooks||(n.viewCheckHooks=[])).push(t,R)),null!=Z&&(n.destroyHooks||(n.destroyHooks=[])).push(t,Z)}}function hU(n,e,t){As(n,e,3,t)}function WU(n,e,t,l){(3&n[2])===t&&As(n,e,t,l)}function YZ(n,e){let t=n[2];(3&t)===e&&(t&=2047,t+=1,n[2]=t)}function As(n,e,t,l){const d=l??-1,a=e.length-1;let U=0;for(let N=void 0!==l?65535&n[18]:0;N<a;N++)if("number"==typeof e[N+1]){if(U=e[N],null!=l&&U>=l)break}else e[N]<0&&(n[18]+=65536),(U<d||-1==d)&&(zS(n,t,e,N),n[18]=(4294901760&n[18])+N+2),N++}function zS(n,e,t,l){const V=t[l]<0,d=t[l+1],U=n[V?-t[l]:t[l]];if(V){if(n[2]>>11<n[18]>>16&&(3&n[2])===e){n[2]+=2048;try{d.call(U)}finally{}}}else try{d.call(U)}finally{}}class Bd{constructor(e,t,l){this.factory=e,this.resolving=!1,this.canSeeViewProviders=t,this.injectImpl=l}}function FU(n,e,t){let l=0;for(;l<t.length;){const V=t[l];if("number"==typeof V){if(0!==V)break;l++;const d=t[l++],a=t[l++],U=t[l++];n.setAttribute(e,a,U,d)}else{const d=V,a=t[++l];eT(d)?n.setProperty(e,d,a):n.setAttribute(e,d,a),l++}}return l}function $s(n){return 3===n||4===n||6===n}function eT(n){return 64===n.charCodeAt(0)}function MU(n,e){if(null!==e&&0!==e.length)if(null===n||0===n.length)n=e.slice();else{let t=-1;for(let l=0;l<e.length;l++){const V=e[l];"number"==typeof V?t=V:0===t||tT(n,t,V,null,-1===t||2===t?e[++l]:null)}}return n}function tT(n,e,t,l,V){let d=0,a=n.length;if(-1===e)a=-1;else for(;d<n.length;){const U=n[d++];if("number"==typeof U){if(U===e){a=-1;break}if(U>e){a=d-1;break}}}for(;d<n.length;){const U=n[d];if("number"==typeof U)break;if(U===t){if(null===l)return void(null!==V&&(n[d+1]=V));if(l===n[d+1])return void(n[d+2]=V)}d++,null!==l&&d++,null!==V&&d++}-1!==a&&(n.splice(a,0,e),d=a+1),n.splice(d++,0,t),null!==l&&n.splice(d++,0,l),null!==V&&n.splice(d++,0,V)}function nT(n){return-1!==n}function bV(n){return 32767&n}function uV(n,e){let t=function xS(n){return n>>16}(n),l=e;for(;t>0;)l=l[15],t--;return l}let QZ=!0;function mU(n){const e=QZ;return QZ=n,e}let XS=0;const Sn={};function vd(n,e){const t=bZ(n,e);if(-1!==t)return t;const l=e[1];l.firstCreatePass&&(n.injectorIndex=e.length,zZ(l.data,n),zZ(e,null),zZ(l.blueprint,null));const V=pU(n,e),d=n.injectorIndex;if(nT(V)){const a=bV(V),U=uV(V,e),N=U[1].data;for(let R=0;R<8;R++)e[d+R]=U[a+R]|N[a+R]}return e[d+8]=V,d}function zZ(n,e){n.push(0,0,0,0,0,0,0,0,e)}function bZ(n,e){return-1===n.injectorIndex||n.parent&&n.parent.injectorIndex===n.injectorIndex||null===e[n.injectorIndex+8]?-1:n.injectorIndex}function pU(n,e){if(n.parent&&-1!==n.parent.injectorIndex)return n.parent.injectorIndex;let t=0,l=null,V=e;for(;null!==V;){if(l=cT(V),null===l)return-1;if(t++,V=V[15],-1!==l.injectorIndex)return l.injectorIndex|t<<16}return-1}function kU(n,e,t){!function yS(n,e,t){let l;"string"==typeof t?l=t.charCodeAt(0)||0:t.hasOwnProperty(Dd)&&(l=t[Dd]),null==l&&(l=t[Dd]=XS++);const V=255&l;e.data[n+(V>>5)]|=1<<V}(n,e,t)}function dT(n,e,t){if(t&X.Optional||void 0!==n)return n;dU()}function aT(n,e,t,l){if(t&X.Optional&&void 0===l&&(l=null),0==(t&(X.Self|X.Host))){const V=n[9],d=gt(void 0);try{return V?V.get(e,l,t&X.Optional):Ys(e,l,t&X.Optional)}finally{gt(d)}}return dT(l,0,t)}function UT(n,e,t,l=X.Default,V){if(null!==n){if(1024&e[2]){const a=function vS(n,e,t,l,V){let d=n,a=e;for(;null!==d&&null!==a&&1024&a[2]&&!(256&a[2]);){const U=NT(d,a,t,l|X.Self,Sn);if(U!==Sn)return U;let N=d.parent;if(!N){const R=a[21];if(R){const Z=R.get(t,Sn,l);if(Z!==Sn)return Z}N=cT(a),a=a[15]}d=N}return V}(n,e,t,l,Sn);if(a!==Sn)return a}const d=NT(n,e,t,l,Sn);if(d!==Sn)return d}return aT(e,t,l,V)}function NT(n,e,t,l,V){const d=function BS(n){if("string"==typeof n)return n.charCodeAt(0)||0;const e=n.hasOwnProperty(Dd)?n[Dd]:void 0;return"number"==typeof e?e>=0?255&e:OS:e}(t);if("function"==typeof d){if(!fs(e,n,l))return l&X.Host?dT(V,0,l):aT(e,t,l,V);try{const a=d(l);if(null!=a||l&X.Optional)return a;dU()}finally{Ps()}}else if("number"==typeof d){let a=null,U=bZ(n,e),N=-1,R=l&X.Host?e[16][6]:null;for((-1===U||l&X.SkipSelf)&&(N=-1===U?pU(n,e):e[U+8],-1!==N&&ZT(l,!1)?(a=e[1],U=bV(N),e=uV(N,e)):U=-1);-1!==U;){const Z=e[1];if(RT(d,U,Z.data)){const r=HS(U,e,t,a,l,R);if(r!==Sn)return r}N=e[U+8],-1!==N&&ZT(l,e[1].data[U+8]===R)&&RT(d,U,e)?(a=Z,U=bV(N),e=uV(N,e)):U=-1}}return V}function HS(n,e,t,l,V,d){const a=e[1],U=a.data[n+8],Z=EU(U,a,t,null==l?cU(U)&&QZ:l!=a&&0!=(3&U.type),V&X.Host&&d===U);return null!==Z?wd(e,a,Z,U):Sn}function EU(n,e,t,l,V){const d=n.providerIndexes,a=e.data,U=1048575&d,N=n.directiveStart,Z=d>>20,c=V?U+Z:n.directiveEnd;for(let i=l?U:U+Z;i<c;i++){const o=a[i];if(i<N&&t===o||i>=N&&o.type===t)return i}if(V){const i=a[N];if(i&&an(i)&&i.type===t)return N}return null}function wd(n,e,t,l){let V=n[t];const d=e.data;if(function bS(n){return n instanceof Bd}(V)){const a=V;a.resolving&&function HE(n,e){const t=e?`. Dependency path: ${e.join(" > ")} > ${n}`:"";throw new k(-200,`Circular dependency in DI detected for ${n}${t}`)}(function Ve(n){return"function"==typeof n?n.name||n.toString():"object"==typeof n&&null!=n&&"function"==typeof n.type?n.type.name||n.type.toString():O(n)}(d[t]));const U=mU(a.canSeeViewProviders);a.resolving=!0;const N=a.injectImpl?gt(a.injectImpl):null;fs(n,l,X.Default);try{V=n[t]=a.factory(void 0,d,n,l),e.firstCreatePass&&t>=l.directiveStart&&function QS(n,e,t){const{ngOnChanges:l,ngOnInit:V,ngDoCheck:d}=e.type.prototype;if(l){const a=xs(e);(t.preOrderHooks||(t.preOrderHooks=[])).push(n,a),(t.preOrderCheckHooks||(t.preOrderCheckHooks=[])).push(n,a)}V&&(t.preOrderHooks||(t.preOrderHooks=[])).push(0-n,V),d&&((t.preOrderHooks||(t.preOrderHooks=[])).push(n,d),(t.preOrderCheckHooks||(t.preOrderCheckHooks=[])).push(n,d))}(t,d[t],e)}finally{null!==N&&gt(N),mU(U),a.resolving=!1,Ps()}}return V}function RT(n,e,t){return!!(t[e+(n>>5)]&1<<n)}function ZT(n,e){return!(n&X.Self||n&X.Host&&e)}class GV{constructor(e,t){this._tNode=e,this._lView=t}get(e,t,l){return UT(this._tNode,this._lView,e,l,t)}}function OS(){return new GV(Oe(),m())}function uZ(n){return dZ(n)?()=>{const e=uZ(H(n));return e&&e()}:Bl(n)}function cT(n){const e=n[1],t=e.type;return 2===t?e.declTNode:1===t?n[6]:null}function DV(n){return function jS(n,e){if("class"===e)return n.classes;if("style"===e)return n.styles;const t=n.attrs;if(t){const l=t.length;let V=0;for(;V<l;){const d=t[V];if($s(d))break;if(0===d)V+=2;else if("number"==typeof d)for(V++;V<l&&"string"==typeof t[V];)V++;else{if(d===e)return t[V+1];V+=2}}}return null}(Oe(),n)}const XV="__parameters__";function jV(n,e,t){return Rl(()=>{const l=function GZ(n){return function(...t){if(n){const l=n(...t);for(const V in l)this[V]=l[V]}}}(e);function V(...d){if(this instanceof V)return l.apply(this,d),this;const a=new V(...d);return U.annotation=a,U;function U(N,R,Z){const r=N.hasOwnProperty(XV)?N[XV]:Object.defineProperty(N,XV,{value:[]})[XV];for(;r.length<=Z;)r.push(null);return(r[Z]=r[Z]||[]).push(a),N}}return t&&(V.prototype=Object.create(t.prototype)),V.prototype.ngMetadataName=n,V.annotationCls=V,V})}class E{constructor(e,t){this._desc=e,this.ngMetadataName="InjectionToken",this.\u0275prov=void 0,"number"==typeof t?this.__NG_ELEMENT_ID__=t:void 0!==t&&(this.\u0275prov=S({token:this,providedIn:t.providedIn||"root",factory:t.factory}))}get multi(){return this}toString(){return`InjectionToken ${this._desc}`}}function zt(n,e){void 0===e&&(e=n);for(let t=0;t<n.length;t++){let l=n[t];Array.isArray(l)?(e===n&&(e=n.slice(0,t)),zt(l,e)):e!==n&&e.push(l)}return e}function wn(n,e){n.forEach(t=>Array.isArray(t)?wn(t,e):e(t))}function oT(n,e,t){e>=n.length?n.push(t):n.splice(e,0,t)}function SU(n,e){return e>=n.length-1?n.pop():n.splice(e,1)[0]}function fd(n,e){const t=[];for(let l=0;l<n;l++)t.push(e);return t}function bt(n,e,t){let l=HV(n,e);return l>=0?n[1|l]=t:(l=~l,function fS(n,e,t,l){let V=n.length;if(V==e)n.push(t,l);else if(1===V)n.push(l,n[0]),n[0]=t;else{for(V--,n.push(n[V-1],n[V]);V>e;)n[V]=n[V-2],V--;n[e]=t,n[e+1]=l}}(n,l,e,t)),l}function xZ(n,e){const t=HV(n,e);if(t>=0)return n[1|t]}function HV(n,e){return function hT(n,e,t){let l=0,V=n.length>>t;for(;V!==l;){const d=l+(V-l>>1),a=n[d<<t];if(e===a)return d<<t;a>e?V=d:l=d+1}return~(V<<t)}(n,e,1)}const Ld={},yZ="__NG_DI_FLAG__",JU="ngTempTokenPath",$S=/\n/gm,WT="__source";let Cd;function BV(n){const e=Cd;return Cd=n,e}function t2(n,e=X.Default){if(void 0===Cd)throw new k(-203,!1);return null===Cd?Ys(n,void 0,e):Cd.get(n,e&X.Optional?null:void 0,e)}function h(n,e=X.Default){return(function CE(){return UZ}()||t2)(H(n),e)}function me(n,e=X.Default){return"number"!=typeof e&&(e=0|(e.optional&&8)|(e.host&&1)|(e.self&&2)|(e.skipSelf&&4)),h(n,e)}function jZ(n){const e=[];for(let t=0;t<n.length;t++){const l=H(n[t]);if(Array.isArray(l)){if(0===l.length)throw new k(900,!1);let V,d=X.Default;for(let a=0;a<l.length;a++){const U=l[a],N=n2(U);"number"==typeof N?-1===N?V=U.token:d|=N:V=U}e.push(h(V,d))}else e.push(h(l))}return e}function Kd(n,e){return n[yZ]=e,n.prototype[yZ]=e,n}function n2(n){return n[yZ]}const gn=Kd(jV("Optional"),8),OV=Kd(jV("SkipSelf"),4);var ht=(()=>((ht=ht||{})[ht.Important=1]="Important",ht[ht.DashCase=2]="DashCase",ht))();const wZ=new Map;let m2=0;const IZ="__ngContext__";function tt(n,e){Tt(e)?(n[IZ]=e[20],function k2(n){wZ.set(n[20],n)}(e)):n[IZ]=e}function LZ(n,e){return undefined(n,e)}function Ad(n){const e=n[3];return dn(e)?e[3]:e}function CZ(n){return BT(n[13])}function KZ(n){return BT(n[4])}function BT(n){for(;null!==n&&!dn(n);)n=n[4];return n}function wV(n,e,t,l,V){if(null!=l){let d,a=!1;dn(l)?d=l:Tt(l)&&(a=!0,l=l[0]);const U=xe(l);0===n&&null!==t?null==V?fT(e,t,U):wl(e,t,U,V||null,!0):1===n&&null!==t?wl(e,t,U,V||null,!0):2===n?function tr(n,e,t){const l=bU(n,e);l&&function f2(n,e,t,l){n.removeChild(e,t,l)}(n,l,e,t)}(e,U,a):3===n&&e.destroyNode(U),null!=d&&function K2(n,e,t,l,V){const d=t[7];d!==xe(t)&&wV(e,n,l,d,V);for(let U=10;U<t.length;U++){const N=t[U];$d(N[1],N,n,e,l,d)}}(e,n,d,t,V)}}function _Z(n,e,t){return n.createElement(e,t)}function vT(n,e){const t=n[9],l=t.indexOf(e),V=e[3];512&e[2]&&(e[2]&=-513,WZ(V,-1)),t.splice(l,1)}function qZ(n,e){if(n.length<=10)return;const t=10+e,l=n[t];if(l){const V=l[17];null!==V&&V!==n&&vT(V,l),e>0&&(n[t-1][4]=l[4]);const d=SU(n,10+e);!function j2(n,e){$d(n,e,e[I],2,null,null),e[0]=null,e[6]=null}(l[1],l);const a=d[19];null!==a&&a.detachView(d[1]),l[3]=null,l[4]=null,l[2]&=-65}return l}function wT(n,e){if(!(128&e[2])){const t=e[I];t.destroyNode&&$d(n,e,t,3,null,null),function O2(n){let e=n[13];if(!e)return AZ(n[1],n);for(;e;){let t=null;if(Tt(e))t=e[13];else{const l=e[10];l&&(t=l)}if(!t){for(;e&&!e[4]&&e!==n;)Tt(e)&&AZ(e[1],e),e=e[3];null===e&&(e=n),Tt(e)&&AZ(e[1],e),t=e&&e[4]}e=t}}(e)}}function AZ(n,e){if(!(128&e[2])){e[2]&=-65,e[2]|=128,function I2(n,e){let t;if(null!=n&&null!=(t=n.destroyHooks))for(let l=0;l<t.length;l+=2){const V=e[t[l]];if(!(V instanceof Bd)){const d=t[l+1];if(Array.isArray(d))for(let a=0;a<d.length;a+=2){const U=V[d[a]],N=d[a+1];try{N.call(U)}finally{}}else try{d.call(V)}finally{}}}}(n,e),function g2(n,e){const t=n.cleanup,l=e[7];let V=-1;if(null!==t)for(let d=0;d<t.length-1;d+=2)if("string"==typeof t[d]){const a=t[d+1],U="function"==typeof a?a(e):xe(e[a]),N=l[V=t[d+2]],R=t[d+3];"boolean"==typeof R?U.removeEventListener(t[d],N,R):R>=0?l[V=R]():l[V=-R].unsubscribe(),d+=2}else{const a=l[V=t[d+1]];t[d].call(a)}if(null!==l){for(let d=V+1;d<l.length;d++)(0,l[d])();e[7]=null}}(n,e),1===e[1].type&&e[I].destroy();const t=e[17];if(null!==t&&dn(e[3])){t!==e[3]&&vT(t,e);const l=e[19];null!==l&&l.detachView(n)}!function E2(n){wZ.delete(n[20])}(e)}}function gT(n,e,t){return function IT(n,e,t){let l=e;for(;null!==l&&40&l.type;)l=(e=l).parent;if(null===l)return t[0];if(2&l.flags){const V=n.data[l.directiveStart].encapsulation;if(V===ln.None||V===ln.Emulated)return null}return Jt(l,t)}(n,e.parent,t)}function wl(n,e,t,l,V){n.insertBefore(e,t,l,V)}function fT(n,e,t){n.appendChild(e,t)}function LT(n,e,t,l,V){null!==l?wl(n,e,t,l,V):fT(n,e,t)}function bU(n,e){return n.parentNode(e)}function CT(n,e,t){return PT(n,e,t)}let dr,PT=function KT(n,e,t){return 40&n.type?Jt(n,t):null};function uU(n,e,t,l){const V=gT(n,l,e),d=e[I],U=CT(l.parent||e[6],l,e);if(null!=V)if(Array.isArray(t))for(let N=0;N<t.length;N++)LT(d,V,t[N],U,!1);else LT(d,V,t,U,!1)}function GU(n,e){if(null!==e){const t=e.type;if(3&t)return Jt(e,n);if(4&t)return er(-1,n[e.index]);if(8&t){const l=e.child;if(null!==l)return GU(n,l);{const V=n[e.index];return dn(V)?er(-1,V):xe(V)}}if(32&t)return LZ(e,n)()||xe(n[e.index]);{const l=qT(n,e);return null!==l?Array.isArray(l)?l[0]:GU(Ad(n[16]),l):GU(n,e.next)}}return null}function qT(n,e){return null!==e?n[16][6].projection[e.projection]:null}function er(n,e){const t=10+n+1;if(t<e.length){const l=e[t],V=l[1].firstChild;if(null!==V)return GU(l,V)}return e[7]}function nr(n,e,t,l,V,d,a){for(;null!=t;){const U=l[t.index],N=t.type;if(a&&0===e&&(U&&tt(xe(U),l),t.flags|=4),64!=(64&t.flags))if(8&N)nr(n,e,t.child,l,V,d,!1),wV(e,n,V,U,d);else if(32&N){const R=LZ(t,l);let Z;for(;Z=R();)wV(e,n,V,Z,d);wV(e,n,V,U,d)}else 16&N?AT(n,e,l,t,V,d):wV(e,n,V,U,d);t=a?t.projectionNext:t.next}}function $d(n,e,t,l,V,d){nr(t,l,n.firstChild,e,V,d,!1)}function AT(n,e,t,l,V,d){const a=t[16],N=a[6].projection[l.projection];if(Array.isArray(N))for(let R=0;R<N.length;R++)wV(e,n,V,N[R],d);else nr(n,e,N,a[3],V,d,!0)}function $T(n,e,t){n.setAttribute(e,"style",t)}function lr(n,e,t){""===t?n.removeAttribute(e,"class"):n.setAttribute(e,"class",t)}class Il{constructor(e){this.changingThisBreaksApplicationSecurity=e}toString(){return`SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see https://g.co/ng/security#xss)`}}function ut(n){return n instanceof Il?n.changingThisBreaksApplicationSecurity:n}const oY=/^(?:(?:https?|mailto|data|ftp|tel|file|sms):|[^&:/?#]*(?:[/?#]|$))/gi;var Ue=(()=>((Ue=Ue||{})[Ue.NONE=0]="NONE",Ue[Ue.HTML=1]="HTML",Ue[Ue.STYLE=2]="STYLE",Ue[Ue.SCRIPT=3]="SCRIPT",Ue[Ue.URL=4]="URL",Ue[Ue.RESOURCE_URL=5]="RESOURCE_URL",Ue))();function ta(n){const e=function na(){const n=m();return n&&n[12]}();return e?e.sanitize(Ue.URL,n)||"":function Yn(n,e){const t=function dY(n){return n instanceof Il&&n.getTypeName()||null}(n);if(null!=t&&t!==e){if("ResourceURL"===t&&"URL"===e)return!0;throw new Error(`Required a safe ${e}, got a ${t} (see https://g.co/ng/security#xss)`)}return t===e}(n,"URL")?ut(n):function XU(n){return(n=String(n)).match(oY)?n:"unsafe:"+n}(O(n))}const Zr=new E("ENVIRONMENT_INITIALIZER"),ch=new E("INJECTOR",-1),ih=new E("INJECTOR_DEF_TYPES");class oh{get(e,t=Ld){if(t===Ld){const l=new Error(`NullInjectorError: No provider for ${se(e)}!`);throw l.name="NullInjectorError",l}return t}}function JY(...n){return{\u0275providers:sh(0,n)}}function sh(n,...e){const t=[],l=new Set;let V;return wn(e,d=>{const a=d;rr(a,t,[],l)&&(V||(V=[]),V.push(a))}),void 0!==V&&Th(V,t),t}function Th(n,e){for(let t=0;t<n.length;t++){const{providers:V}=n[t];wn(V,d=>{e.push(d)})}}function rr(n,e,t,l){if(!(n=H(n)))return!1;let V=null,d=Es(n);const a=!d&&Re(n);if(d||a){if(a&&!a.standalone)return!1;V=n}else{const N=n.ngModule;if(d=Es(N),!d)return!1;V=N}const U=l.has(V);if(a){if(U)return!1;if(l.add(V),a.dependencies){const N="function"==typeof a.dependencies?a.dependencies():a.dependencies;for(const R of N)rr(R,e,t,l)}}else{if(!d)return!1;{if(null!=d.imports&&!U){let R;l.add(V);try{wn(d.imports,Z=>{rr(Z,e,t,l)&&(R||(R=[]),R.push(Z))})}finally{}void 0!==R&&Th(R,e)}if(!U){const R=Bl(V)||(()=>new V);e.push({provide:V,useFactory:R,deps:de},{provide:ih,useValue:V,multi:!0},{provide:Zr,useValue:()=>h(V),multi:!0})}const N=d.providers;null==N||U||wn(N,Z=>{e.push(Z)})}}return V!==n&&void 0!==n.providers}const QY=oe({provide:String,useValue:oe});function cr(n){return null!==n&&"object"==typeof n&&QY in n}function fl(n){return"function"==typeof n}const ir=new E("Set Injector scope."),jU={},bY={};let or;function HU(){return void 0===or&&(or=new oh),or}class il{}class Fh extends il{constructor(e,t,l,V){super(),this.parent=t,this.source=l,this.scopes=V,this.records=new Map,this._ngOnDestroyHooks=new Set,this._onDestroyHooks=[],this._destroyed=!1,Tr(e,a=>this.processProvider(a)),this.records.set(ch,gV(void 0,this)),V.has("environment")&&this.records.set(il,gV(void 0,this));const d=this.records.get(ir);null!=d&&"string"==typeof d.value&&this.scopes.add(d.value),this.injectorDefTypes=new Set(this.get(ih.multi,de,X.Self))}get destroyed(){return this._destroyed}destroy(){this.assertNotDestroyed(),this._destroyed=!0;try{for(const e of this._ngOnDestroyHooks)e.ngOnDestroy();for(const e of this._onDestroyHooks)e()}finally{this.records.clear(),this._ngOnDestroyHooks.clear(),this.injectorDefTypes.clear(),this._onDestroyHooks.length=0}}onDestroy(e){this._onDestroyHooks.push(e)}runInContext(e){this.assertNotDestroyed();const t=BV(this),l=gt(void 0);try{return e()}finally{BV(t),gt(l)}}get(e,t=Ld,l=X.Default){this.assertNotDestroyed();const V=BV(this),d=gt(void 0);try{if(!(l&X.SkipSelf)){let U=this.records.get(e);if(void 0===U){const N=function XY(n){return"function"==typeof n||"object"==typeof n&&n instanceof E}(e)&&aU(e);U=N&&this.injectableDefInScope(N)?gV(sr(e),jU):null,this.records.set(e,U)}if(null!=U)return this.hydrate(e,U)}return(l&X.Self?HU():this.parent).get(e,t=l&X.Optional&&t===Ld?null:t)}catch(a){if("NullInjectorError"===a.name){if((a[JU]=a[JU]||[]).unshift(se(e)),V)throw a;return function l2(n,e,t,l){const V=n[JU];throw e[WT]&&V.unshift(e[WT]),n.message=function V2(n,e,t,l=null){n=n&&"\n"===n.charAt(0)&&"\u0275"==n.charAt(1)?n.slice(2):n;let V=se(e);if(Array.isArray(e))V=e.map(se).join(" -> ");else if("object"==typeof e){let d=[];for(let a in e)if(e.hasOwnProperty(a)){let U=e[a];d.push(a+":"+("string"==typeof U?JSON.stringify(U):se(U)))}V=`{${d.join(", ")}}`}return`${t}${l?"("+l+")":""}[${V}]: ${n.replace($S,"\n  ")}`}("\n"+n.message,V,t,l),n.ngTokenPath=V,n[JU]=null,n}(a,e,"R3InjectorError",this.source)}throw a}finally{gt(d),BV(V)}}resolveInjectorInitializers(){const e=BV(this),t=gt(void 0);try{const l=this.get(Zr.multi,de,X.Self);for(const V of l)V()}finally{BV(e),gt(t)}}toString(){const e=[],t=this.records;for(const l of t.keys())e.push(se(l));return`R3Injector[${e.join(", ")}]`}assertNotDestroyed(){if(this._destroyed)throw new k(205,!1)}processProvider(e){let t=fl(e=H(e))?e:H(e&&e.provide);const l=function GY(n){return cr(n)?gV(void 0,n.useValue):gV(Mh(n),jU)}(e);if(fl(e)||!0!==e.multi)this.records.get(t);else{let V=this.records.get(t);V||(V=gV(void 0,jU,!0),V.factory=()=>jZ(V.multi),this.records.set(t,V)),t=e,V.multi.push(e)}this.records.set(t,l)}hydrate(e,t){return t.value===jU&&(t.value=bY,t.value=t.factory()),"object"==typeof t.value&&t.value&&function xY(n){return null!==n&&"object"==typeof n&&"function"==typeof n.ngOnDestroy}(t.value)&&this._ngOnDestroyHooks.add(t.value),t.value}injectableDefInScope(e){if(!e.providedIn)return!1;const t=H(e.providedIn);return"string"==typeof t?"any"===t||this.scopes.has(t):this.injectorDefTypes.has(t)}}function sr(n){const e=aU(n),t=null!==e?e.factory:Bl(n);if(null!==t)return t;if(n instanceof E)throw new k(204,!1);if(n instanceof Function)return function uY(n){const e=n.length;if(e>0)throw fd(e,"?"),new k(204,!1);const t=function IE(n){const e=n&&(n[UU]||n[Ss]);if(e){const t=function fE(n){if(n.hasOwnProperty("name"))return n.name;const e=(""+n).match(/^function\s*([^\s(]+)/);return null===e?"":e[1]}(n);return console.warn(`DEPRECATED: DI is instantiating a token "${t}" that inherits its @Injectable decorator but does not provide one itself.\nThis will become an error in a future version of Angular. Please add @Injectable() to the "${t}" class.`),e}return null}(n);return null!==t?()=>t.factory(n):()=>new n}(n);throw new k(204,!1)}function Mh(n,e,t){let l;if(fl(n)){const V=H(n);return Bl(V)||sr(V)}if(cr(n))l=()=>H(n.useValue);else if(function Wh(n){return!(!n||!n.useFactory)}(n))l=()=>n.useFactory(...jZ(n.deps||[]));else if(function hh(n){return!(!n||!n.useExisting)}(n))l=()=>h(H(n.useExisting));else{const V=H(n&&(n.useClass||n.provide));if(!function DY(n){return!!n.deps}(n))return Bl(V)||sr(V);l=()=>new V(...jZ(n.deps))}return l}function gV(n,e,t=!1){return{factory:n,value:e,multi:t?[]:void 0}}function yY(n){return!!n.\u0275providers}function Tr(n,e){for(const t of n)Array.isArray(t)?Tr(t,e):yY(t)?Tr(t.\u0275providers,e):e(t)}class mh{}class BY{resolveComponentFactory(e){throw function HY(n){const e=Error(`No component factory found for ${se(n)}. Did you add it to @NgModule.entryComponents?`);return e.ngComponent=n,e}(e)}}let fn=(()=>{class n{}return n.NULL=new BY,n})();function OY(){return IV(Oe(),m())}function IV(n,e){return new we(Jt(n,e))}let we=(()=>{class n{constructor(t){this.nativeElement=t}}return n.__NG_ELEMENT_ID__=OY,n})();function vY(n){return n instanceof we?n.nativeElement:n}class la{}let BU=(()=>{class n{}return n.__NG_ELEMENT_ID__=()=>function wY(){const n=m(),t=Qt(Oe().index,n);return(Tt(t)?t:n)[I]}(),n})(),gY=(()=>{class n{}return n.\u0275prov=S({token:n,providedIn:"root",factory:()=>null}),n})();class ol{constructor(e){this.full=e,this.major=e.split(".")[0],this.minor=e.split(".")[1],this.patch=e.split(".").slice(2).join(".")}}const IY=new ol("14.3.0"),hr={};function Fr(n){return n.ngOriginalError}class sl{constructor(){this._console=console}handleError(e){const t=this._findOriginalError(e);this._console.error("ERROR",e),t&&this._console.error("ORIGINAL ERROR",t)}_findOriginalError(e){let t=e&&Fr(e);for(;t&&Fr(t);)t=Fr(t);return t||null}}function Ln(n){return n instanceof Function?n():n}function Eh(n,e,t){let l=n.length;for(;;){const V=n.indexOf(e,t);if(-1===V)return V;if(0===V||n.charCodeAt(V-1)<=32){const d=e.length;if(V+d===l||n.charCodeAt(V+d)<=32)return V}t=V+1}}const Sh="ng-template";function tJ(n,e,t){let l=0;for(;l<n.length;){let V=n[l++];if(t&&"class"===V){if(V=n[l],-1!==Eh(V.toLowerCase(),e,0))return!0}else if(1===V){for(;l<n.length&&"string"==typeof(V=n[l++]);)if(V.toLowerCase()===e)return!0;return!1}}return!1}function Yh(n){return 4===n.type&&n.value!==Sh}function nJ(n,e,t){return e===(4!==n.type||t?n.value:Sh)}function lJ(n,e,t){let l=4;const V=n.attrs||[],d=function aJ(n){for(let e=0;e<n.length;e++)if($s(n[e]))return e;return n.length}(V);let a=!1;for(let U=0;U<e.length;U++){const N=e[U];if("number"!=typeof N){if(!a)if(4&l){if(l=2|1&l,""!==N&&!nJ(n,N,t)||""===N&&1===e.length){if(Un(l))return!1;a=!0}}else{const R=8&l?N:e[++U];if(8&l&&null!==n.attrs){if(!tJ(n.attrs,R,t)){if(Un(l))return!1;a=!0}continue}const r=VJ(8&l?"class":N,V,Yh(n),t);if(-1===r){if(Un(l))return!1;a=!0;continue}if(""!==R){let c;c=r>d?"":V[r+1].toLowerCase();const i=8&l?c:null;if(i&&-1!==Eh(i,R,0)||2&l&&R!==c){if(Un(l))return!1;a=!0}}}}else{if(!a&&!Un(l)&&!Un(N))return!1;if(a&&Un(N))continue;a=!1,l=N|1&l}}return Un(l)||a}function Un(n){return 0==(1&n)}function VJ(n,e,t,l){if(null===e)return-1;let V=0;if(l||!t){let d=!1;for(;V<e.length;){const a=e[V];if(a===n)return V;if(3===a||6===a)d=!0;else{if(1===a||2===a){let U=e[++V];for(;"string"==typeof U;)U=e[++V];continue}if(4===a)break;if(0===a){V+=4;continue}}V+=d?1:2}return-1}return function UJ(n,e){let t=n.indexOf(4);if(t>-1)for(t++;t<n.length;){const l=n[t];if("number"==typeof l)return-1;if(l===e)return t;t++}return-1}(e,n)}function Jh(n,e,t=!1){for(let l=0;l<e.length;l++)if(lJ(n,e[l],t))return!0;return!1}function NJ(n,e){e:for(let t=0;t<e.length;t++){const l=e[t];if(n.length===l.length){for(let V=0;V<n.length;V++)if(n[V]!==l[V])continue e;return!0}}return!1}function Qh(n,e){return n?":not("+e.trim()+")":e}function RJ(n){let e=n[0],t=1,l=2,V="",d=!1;for(;t<n.length;){let a=n[t];if("string"==typeof a)if(2&l){const U=n[++t];V+="["+a+(U.length>0?'="'+U+'"':"")+"]"}else 8&l?V+="."+a:4&l&&(V+=" "+a);else""!==V&&!Un(a)&&(e+=Qh(d,V),V=""),l=a,d=d||!Un(l);t++}return""!==V&&(e+=Qh(d,V)),e}const v={};function q(n){zh(ee(),m(),Ut()+n,!1)}function zh(n,e,t,l){if(!l)if(3==(3&e[2])){const d=n.preOrderCheckHooks;null!==d&&hU(e,d,t)}else{const d=n.preOrderHooks;null!==d&&WU(e,d,0,t)}rl(t)}function Dh(n,e=null,t=null,l){const V=xh(n,e,t,l);return V.resolveInjectorInitializers(),V}function xh(n,e=null,t=null,l,V=new Set){const d=[t||de,JY(n)];return l=l||("object"==typeof n?void 0:se(n)),new Fh(d,e||HU(),l||null,V)}let ge=(()=>{class n{static create(t,l){if(Array.isArray(t))return Dh({name:""},l,t,"");{const V=t.name??"";return Dh({name:V},t.parent,t.providers,V)}}}return n.THROW_IF_NOT_FOUND=Ld,n.NULL=new oh,n.\u0275prov=S({token:n,providedIn:"any",factory:()=>h(ch)}),n.__NG_ELEMENT_ID__=-1,n})();function M(n,e=X.Default){const t=m();return null===t?h(n,e):UT(Oe(),t,H(n),e)}function Er(){throw new Error("invalid")}function vU(n,e){return n<<17|e<<2}function Nn(n){return n>>17&32767}function Sr(n){return 2|n}function Cn(n){return(131068&n)>>2}function Yr(n,e){return-131069&n|e<<2}function Jr(n){return 1|n}function qh(n,e){const t=n.contentQueries;if(null!==t)for(let l=0;l<t.length;l+=2){const V=t[l],d=t[l+1];if(-1!==d){const a=n.data[d];kZ(V),a.contentQueries(2,e[d],d)}}}function IU(n,e,t,l,V,d,a,U,N,R,Z){const r=e.blueprint.slice();return r[0]=V,r[2]=76|l,(null!==Z||n&&1024&n[2])&&(r[2]|=1024),js(r),r[3]=r[15]=n,r[8]=t,r[10]=a||n&&n[10],r[I]=U||n&&n[I],r[12]=N||n&&n[12]||null,r[9]=R||n&&n[9]||null,r[6]=d,r[20]=function p2(){return m2++}(),r[21]=Z,r[16]=2==e.type?n[16]:r,r}function CV(n,e,t,l,V){let d=n.data[e];if(null===d)d=function Xr(n,e,t,l,V){const d=Os(),a=FZ(),N=n.data[e]=function fJ(n,e,t,l,V,d){return{type:t,index:l,insertBeforeIndex:null,injectorIndex:e?e.injectorIndex:-1,directiveStart:-1,directiveEnd:-1,directiveStylingLast:-1,propertyBindings:null,flags:0,providerIndexes:0,value:V,attrs:d,mergedAttrs:null,localNames:null,initialInputs:void 0,inputs:null,outputs:null,tViews:null,next:null,projectionNext:null,child:null,parent:e,projection:null,styles:null,stylesWithoutHost:null,residualStyles:void 0,classes:null,classesWithoutHost:null,residualClasses:void 0,classBindings:0,styleBindings:0}}(0,a?d:d&&d.parent,t,e,l,V);return null===n.firstChild&&(n.firstChild=N),null!==d&&(a?null==d.child&&null!==N.parent&&(d.child=N):null===d.next&&(d.next=N)),N}(n,e,t,l,V),function FS(){return B.lFrame.inI18n}()&&(d.flags|=64);else if(64&d.type){d.type=t,d.value=l,d.attrs=V;const a=function Hd(){const n=B.lFrame,e=n.currentTNode;return n.isParent?e:e.parent}();d.injectorIndex=null===a?-1:a.injectorIndex}return En(d,!0),d}function KV(n,e,t,l){if(0===t)return-1;const V=e.length;for(let d=0;d<t;d++)e.push(l),n.blueprint.push(l),n.data.push(null);return V}function yr(n,e,t){EZ(e);try{const l=n.viewQuery;null!==l&&Ir(1,l,t);const V=n.template;null!==V&&Ah(n,e,V,1,t),n.firstCreatePass&&(n.firstCreatePass=!1),n.staticContentQueries&&qh(n,e),n.staticViewQueries&&Ir(2,n.viewQuery,t);const d=n.components;null!==d&&function wJ(n,e){for(let t=0;t<e.length;t++)U3(n,e[t])}(e,d)}catch(l){throw n.firstCreatePass&&(n.incompleteFirstPass=!0,n.firstCreatePass=!1),l}finally{e[2]&=-5,SZ()}}function fU(n,e,t,l){const V=e[2];if(128!=(128&V)){EZ(e);try{js(e),function ws(n){return B.lFrame.bindingIndex=n}(n.bindingStartIndex),null!==t&&Ah(n,e,t,2,l);const a=3==(3&V);if(a){const R=n.preOrderCheckHooks;null!==R&&hU(e,R,null)}else{const R=n.preOrderHooks;null!==R&&WU(e,R,0,null),YZ(e,0)}if(function d3(n){for(let e=CZ(n);null!==e;e=KZ(e)){if(!e[2])continue;const t=e[9];for(let l=0;l<t.length;l++){const V=t[l],d=V[3];0==(512&V[2])&&WZ(d,1),V[2]|=512}}}(e),function V3(n){for(let e=CZ(n);null!==e;e=KZ(e))for(let t=10;t<e.length;t++){const l=e[t],V=l[1];sU(l)&&fU(V,l,V.template,l[8])}}(e),null!==n.contentQueries&&qh(n,e),a){const R=n.contentCheckHooks;null!==R&&hU(e,R)}else{const R=n.contentHooks;null!==R&&WU(e,R,1),YZ(e,1)}!function OJ(n,e){const t=n.hostBindingOpCodes;if(null!==t)try{for(let l=0;l<t.length;l++){const V=t[l];if(V<0)rl(~V);else{const d=V,a=t[++l],U=t[++l];MS(a,d),U(2,e[d])}}}finally{rl(-1)}}(n,e);const U=n.components;null!==U&&function vJ(n,e){for(let t=0;t<e.length;t++)a3(n,e[t])}(e,U);const N=n.viewQuery;if(null!==N&&Ir(2,N,l),a){const R=n.viewCheckHooks;null!==R&&hU(e,R)}else{const R=n.viewHooks;null!==R&&WU(e,R,2),YZ(e,2)}!0===n.firstUpdatePass&&(n.firstUpdatePass=!1),e[2]&=-41,512&e[2]&&(e[2]&=-513,WZ(e[3],-1))}finally{SZ()}}}function Ah(n,e,t,l,V){const d=Ut(),a=2&l;try{rl(-1),a&&e.length>22&&zh(n,e,22,!1),t(l,V)}finally{rl(d)}}function $h(n,e,t){if(cZ(e)){const V=e.directiveEnd;for(let d=e.directiveStart;d<V;d++){const a=n.data[d];a.contentQueries&&a.contentQueries(1,t[d],d)}}}function jr(n,e,t){!Bs()||(function _J(n,e,t,l){const V=t.directiveStart,d=t.directiveEnd;n.firstCreatePass||vd(t,e),tt(l,e);const a=t.initialInputs;for(let U=V;U<d;U++){const N=n.data[U],R=an(N);R&&t3(e,t,N);const Z=wd(e,n,U,t);tt(Z,e),null!==a&&n3(0,U-V,Z,N,0,a),R&&(Qt(t.index,e)[8]=Z)}}(n,e,t,Jt(t,e)),128==(128&t.flags)&&function qJ(n,e,t){const l=t.directiveStart,V=t.directiveEnd,d=t.index,a=function mS(){return B.lFrame.currentDirectiveIndex}();try{rl(d);for(let U=l;U<V;U++){const N=n.data[U],R=e[U];mZ(U),(null!==N.hostBindings||0!==N.hostVars||null!==N.hostAttrs)&&aW(N,R)}}finally{rl(-1),mZ(a)}}(n,e,t))}function Hr(n,e,t=Jt){const l=e.localNames;if(null!==l){let V=e.index+1;for(let d=0;d<l.length;d+=2){const a=l[d+1],U=-1===a?t(e,n):n[a];n[V++]=U}}}function eW(n){const e=n.tView;return null===e||e.incompleteFirstPass?n.tView=Br(1,null,n.template,n.decls,n.vars,n.directiveDefs,n.pipeDefs,n.viewQuery,n.schemas,n.consts):e}function Br(n,e,t,l,V,d,a,U,N,R){const Z=22+l,r=Z+V,c=function gJ(n,e){const t=[];for(let l=0;l<e;l++)t.push(l<n?null:v);return t}(Z,r),i="function"==typeof R?R():R;return c[1]={type:n,blueprint:c,template:t,queries:null,viewQuery:U,declTNode:e,data:c.slice().fill(null,Z),bindingStartIndex:Z,expandoStartIndex:r,hostBindingOpCodes:null,firstCreatePass:!0,firstUpdatePass:!0,staticViewQueries:!1,staticContentQueries:!1,preOrderHooks:null,preOrderCheckHooks:null,contentHooks:null,contentCheckHooks:null,viewHooks:null,viewCheckHooks:null,destroyHooks:null,cleanup:null,contentQueries:null,components:null,directiveRegistry:"function"==typeof d?d():d,pipeRegistry:"function"==typeof a?a():a,firstChild:null,schemas:N,consts:i,incompleteFirstPass:!1}}function tW(n,e,t,l){const V=rW(e);null===t?V.push(l):(V.push(t),n.firstCreatePass&&cW(n).push(l,V.length-1))}function nW(n,e,t){for(let l in n)if(n.hasOwnProperty(l)){const V=n[l];(t=null===t?{}:t).hasOwnProperty(l)?t[l].push(e,V):t[l]=[e,V]}return t}function lW(n,e){const l=e.directiveEnd,V=n.data,d=e.attrs,a=[];let U=null,N=null;for(let R=e.directiveStart;R<l;R++){const Z=V[R],r=Z.inputs,c=null===d||Yh(e)?null:l3(r,d);a.push(c),U=nW(r,R,U),N=nW(Z.outputs,R,N)}null!==U&&(U.hasOwnProperty("class")&&(e.flags|=16),U.hasOwnProperty("style")&&(e.flags|=32)),e.initialInputs=a,e.inputs=U,e.outputs=N}function Gt(n,e,t,l,V,d,a,U){const N=Jt(e,t);let Z,R=e.inputs;!U&&null!=R&&(Z=R[l])?(fr(n,t,Z,l,V),cU(e)&&VW(t,e.index)):3&e.type&&(l=function LJ(n){return"class"===n?"className":"for"===n?"htmlFor":"formaction"===n?"formAction":"innerHtml"===n?"innerHTML":"readonly"===n?"readOnly":"tabindex"===n?"tabIndex":n}(l),V=null!=a?a(V,e.value||"",l):V,d.setProperty(N,l,V))}function VW(n,e){const t=Qt(e,n);16&t[2]||(t[2]|=32)}function Or(n,e,t,l){let V=!1;if(Bs()){const d=function AJ(n,e,t){const l=n.directiveRegistry;let V=null;if(l)for(let d=0;d<l.length;d++){const a=l[d];Jh(t,a.selectors,!1)&&(V||(V=[]),kU(vd(t,e),n,a.type),an(a)?(UW(n,t),V.unshift(a)):V.push(a))}return V}(n,e,t),a=null===l?null:{"":-1};if(null!==d){V=!0,NW(t,n.data.length,d.length);for(let Z=0;Z<d.length;Z++){const r=d[Z];r.providersResolver&&r.providersResolver(r)}let U=!1,N=!1,R=KV(n,e,d.length,null);for(let Z=0;Z<d.length;Z++){const r=d[Z];t.mergedAttrs=MU(t.mergedAttrs,r.hostAttrs),RW(n,t,e,R,r),e3(R,r,a),null!==r.contentQueries&&(t.flags|=8),(null!==r.hostBindings||null!==r.hostAttrs||0!==r.hostVars)&&(t.flags|=128);const c=r.type.prototype;!U&&(c.ngOnChanges||c.ngOnInit||c.ngDoCheck)&&((n.preOrderHooks||(n.preOrderHooks=[])).push(t.index),U=!0),!N&&(c.ngOnChanges||c.ngDoCheck)&&((n.preOrderCheckHooks||(n.preOrderCheckHooks=[])).push(t.index),N=!0),R++}lW(n,t)}a&&function $J(n,e,t){if(e){const l=n.localNames=[];for(let V=0;V<e.length;V+=2){const d=t[e[V+1]];if(null==d)throw new k(-301,!1);l.push(e[V],d)}}}(t,l,a)}return t.mergedAttrs=MU(t.mergedAttrs,t.attrs),V}function dW(n,e,t,l,V,d){const a=d.hostBindings;if(a){let U=n.hostBindingOpCodes;null===U&&(U=n.hostBindingOpCodes=[]);const N=~e.index;(function PJ(n){let e=n.length;for(;e>0;){const t=n[--e];if("number"==typeof t&&t<0)return t}return 0})(U)!=N&&U.push(N),U.push(l,V,a)}}function aW(n,e){null!==n.hostBindings&&n.hostBindings(1,e)}function UW(n,e){e.flags|=2,(n.components||(n.components=[])).push(e.index)}function e3(n,e,t){if(t){if(e.exportAs)for(let l=0;l<e.exportAs.length;l++)t[e.exportAs[l]]=n;an(e)&&(t[""]=n)}}function NW(n,e,t){n.flags|=1,n.directiveStart=e,n.directiveEnd=e+t,n.providerIndexes=e}function RW(n,e,t,l,V){n.data[l]=V;const d=V.factory||(V.factory=Bl(V.type)),a=new Bd(d,an(V),M);n.blueprint[l]=a,t[l]=a,dW(n,e,0,l,KV(n,t,V.hostVars,v),V)}function t3(n,e,t){const l=Jt(e,n),V=eW(t),d=n[10],a=LU(n,IU(n,V,null,t.onPush?32:16,l,e,d,d.createRenderer(l,t),null,null,null));n[e.index]=a}function Jn(n,e,t,l,V,d){const a=Jt(n,e);!function vr(n,e,t,l,V,d,a){if(null==d)n.removeAttribute(e,V,t);else{const U=null==a?O(d):a(d,l||"",V);n.setAttribute(e,V,U,t)}}(e[I],a,d,n.value,t,l,V)}function n3(n,e,t,l,V,d){const a=d[e];if(null!==a){const U=l.setInput;for(let N=0;N<a.length;){const R=a[N++],Z=a[N++],r=a[N++];null!==U?l.setInput(t,r,R,Z):t[Z]=r}}}function l3(n,e){let t=null,l=0;for(;l<e.length;){const V=e[l];if(0!==V)if(5!==V){if("number"==typeof V)break;n.hasOwnProperty(V)&&(null===t&&(t=[]),t.push(V,n[V],e[l+1])),l+=2}else l+=2;else l+=4}return t}function ZW(n,e,t,l){return new Array(n,!0,!1,e,null,0,l,t,null,null)}function a3(n,e){const t=Qt(e,n);if(sU(t)){const l=t[1];48&t[2]?fU(l,t,l.template,t[8]):t[5]>0&&wr(t)}}function wr(n){for(let l=CZ(n);null!==l;l=KZ(l))for(let V=10;V<l.length;V++){const d=l[V];if(sU(d))if(512&d[2]){const a=d[1];fU(a,d,a.template,d[8])}else d[5]>0&&wr(d)}const t=n[1].components;if(null!==t)for(let l=0;l<t.length;l++){const V=Qt(t[l],n);sU(V)&&V[5]>0&&wr(V)}}function U3(n,e){const t=Qt(e,n),l=t[1];(function N3(n,e){for(let t=e.length;t<n.blueprint.length;t++)e.push(n.blueprint[t])})(l,t),yr(l,t,t[8])}function LU(n,e){return n[13]?n[14][4]=e:n[13]=e,n[14]=e,e}function gr(n){for(;n;){n[2]|=32;const e=Ad(n);if(eS(n)&&!e)return n;n=e}return null}function CU(n,e,t,l=!0){const V=e[10];V.begin&&V.begin();try{fU(n,e,n.template,t)}catch(a){throw l&&oW(e,a),a}finally{V.end&&V.end()}}function Ir(n,e,t){kZ(0),e(n,t)}function rW(n){return n[7]||(n[7]=[])}function cW(n){return n.cleanup||(n.cleanup=[])}function iW(n,e,t){return(null===n||an(n))&&(t=function RS(n){for(;Array.isArray(n);){if("object"==typeof n[1])return n;n=n[0]}return null}(t[e.index])),t[I]}function oW(n,e){const t=n[9],l=t?t.get(sl,null):null;l&&l.handleError(e)}function fr(n,e,t,l,V){for(let d=0;d<t.length;){const a=t[d++],U=t[d++],N=e[a],R=n.data[a];null!==R.setInput?R.setInput(N,V,l,U):N[U]=V}}function KU(n,e,t){let l=t?n.styles:null,V=t?n.classes:null,d=0;if(null!==e)for(let a=0;a<e.length;a++){const U=e[a];"number"==typeof U?d=U:1==d?V=lZ(V,U):2==d&&(l=lZ(l,U+": "+e[++a]+";"))}t?n.styles=l:n.stylesWithoutHost=l,t?n.classes=V:n.classesWithoutHost=V}function PU(n,e,t,l,V=!1){for(;null!==t;){const d=e[t.index];if(null!==d&&l.push(xe(d)),dn(d))for(let U=10;U<d.length;U++){const N=d[U],R=N[1].firstChild;null!==R&&PU(N[1],N,R,l)}const a=t.type;if(8&a)PU(n,e,t.child,l);else if(32&a){const U=LZ(t,e);let N;for(;N=U();)l.push(N)}else if(16&a){const U=qT(e,t);if(Array.isArray(U))l.push(...U);else{const N=Ad(e[16]);PU(N[1],N,U,l,!0)}}t=V?t.projectionNext:t.next}return l}class Va{constructor(e,t){this._lView=e,this._cdRefInjectingView=t,this._appRef=null,this._attachedToViewContainer=!1}get rootNodes(){const e=this._lView,t=e[1];return PU(t,e,t.firstChild,[])}get context(){return this._lView[8]}set context(e){this._lView[8]=e}get destroyed(){return 128==(128&this._lView[2])}destroy(){if(this._appRef)this._appRef.detachView(this);else if(this._attachedToViewContainer){const e=this._lView[3];if(dn(e)){const t=e[8],l=t?t.indexOf(this):-1;l>-1&&(qZ(e,l),SU(t,l))}this._attachedToViewContainer=!1}wT(this._lView[1],this._lView)}onDestroy(e){tW(this._lView[1],this._lView,null,e)}markForCheck(){gr(this._cdRefInjectingView||this._lView)}detach(){this._lView[2]&=-65}reattach(){this._lView[2]|=64}detectChanges(){CU(this._lView[1],this._lView,this.context)}checkNoChanges(){}attachToViewContainerRef(){if(this._appRef)throw new k(902,!1);this._attachedToViewContainer=!0}detachFromAppRef(){this._appRef=null,function B2(n,e){$d(n,e,e[I],2,null,null)}(this._lView[1],this._lView)}attachToAppRef(e){if(this._attachedToViewContainer)throw new k(902,!1);this._appRef=e}}class R3 extends Va{constructor(e){super(e),this._view=e}detectChanges(){const e=this._view;CU(e[1],e,e[8],!1)}checkNoChanges(){}get context(){return null}}class Lr extends fn{constructor(e){super(),this.ngModule=e}resolveComponentFactory(e){const t=Re(e);return new da(t,this.ngModule)}}function sW(n){const e=[];for(let t in n)n.hasOwnProperty(t)&&e.push({propName:n[t],templateName:t});return e}class r3{constructor(e,t){this.injector=e,this.parentInjector=t}get(e,t,l){const V=this.injector.get(e,hr,l);return V!==hr||t===hr?V:this.parentInjector.get(e,t,l)}}class da extends mh{constructor(e,t){super(),this.componentDef=e,this.ngModule=t,this.componentType=e.type,this.selector=function ZJ(n){return n.map(RJ).join(",")}(e.selectors),this.ngContentSelectors=e.ngContentSelectors?e.ngContentSelectors:[],this.isBoundToModule=!!t}get inputs(){return sW(this.componentDef.inputs)}get outputs(){return sW(this.componentDef.outputs)}create(e,t,l,V){let d=(V=V||this.ngModule)instanceof il?V:V?.injector;d&&null!==this.componentDef.getStandaloneInjector&&(d=this.componentDef.getStandaloneInjector(d)||d);const a=d?new r3(e,d):e,U=a.get(la,null);if(null===U)throw new k(407,!1);const N=a.get(gY,null),R=U.createRenderer(null,this.componentDef),Z=this.componentDef.selectors[0][0]||"div",r=l?function IJ(n,e,t){return n.selectRootElement(e,t===ln.ShadowDom)}(R,l,this.componentDef.encapsulation):_Z(R,Z,function Z3(n){const e=n.toLowerCase();return"svg"===e?"svg":"math"===e?"math":null}(Z)),c=this.componentDef.onPush?288:272,i=Br(0,null,null,1,0,null,null,null,null,null),o=IU(null,i,null,c,null,null,U,R,N,a,null);let s,T;EZ(o);try{const W=function s3(n,e,t,l,V,d){const a=t[1];t[22]=n;const N=CV(a,22,2,"#host",null),R=N.mergedAttrs=e.hostAttrs;null!==R&&(KU(N,R,!0),null!==n&&(FU(V,n,R),null!==N.classes&&lr(V,n,N.classes),null!==N.styles&&$T(V,n,N.styles)));const Z=l.createRenderer(n,e),r=IU(t,eW(e),null,e.onPush?32:16,t[22],N,l,Z,d||null,null,null);return a.firstCreatePass&&(kU(vd(N,t),a,e.type),UW(a,N),NW(N,t.length,1)),LU(t,r),t[22]=r}(r,this.componentDef,o,U,R);if(r)if(l)FU(R,r,["ng-version",IY.full]);else{const{attrs:p,classes:F}=function rJ(n){const e=[],t=[];let l=1,V=2;for(;l<n.length;){let d=n[l];if("string"==typeof d)2===V?""!==d&&e.push(d,n[++l]):8===V&&t.push(d);else{if(!Un(V))break;V=d}l++}return{attrs:e,classes:t}}(this.componentDef.selectors[0]);p&&FU(R,r,p),F&&F.length>0&&lr(R,r,F.join(" "))}if(T=hZ(i,22),void 0!==t){const p=T.projection=[];for(let F=0;F<this.ngContentSelectors.length;F++){const Y=t[F];p.push(null!=Y?Array.from(Y):null)}}s=function T3(n,e,t,l){const V=t[1],d=function KJ(n,e,t){const l=Oe();n.firstCreatePass&&(t.providersResolver&&t.providersResolver(t),RW(n,l,e,KV(n,e,1,null),t),lW(n,l));const V=wd(e,n,l.directiveStart,l);tt(V,e);const d=Jt(l,e);return d&&tt(d,e),V}(V,t,e);if(n[8]=t[8]=d,null!==l)for(const U of l)U(d,e);if(e.contentQueries){const U=Oe();e.contentQueries(1,d,U.directiveStart)}const a=Oe();return!V.firstCreatePass||null===e.hostBindings&&null===e.hostAttrs||(rl(a.index),dW(t[1],a,0,a.directiveStart,a.directiveEnd,e),aW(e,d)),d}(W,this.componentDef,o,[h3]),yr(i,o,null)}finally{SZ()}return new o3(this.componentType,s,IV(T,o),o,T)}}class o3 extends class jY{}{constructor(e,t,l,V,d){super(),this.location=l,this._rootLView=V,this._tNode=d,this.instance=t,this.hostView=this.changeDetectorRef=new R3(V),this.componentType=e}setInput(e,t){const l=this._tNode.inputs;let V;if(null!==l&&(V=l[e])){const d=this._rootLView;fr(d[1],d,V,e,t),VW(d,this._tNode.index)}}get injector(){return new GV(this._tNode,this._rootLView)}destroy(){this.hostView.destroy()}onDestroy(e){this.hostView.onDestroy(e)}}function h3(){const n=Oe();TU(m()[1],n)}function Pn(n){let e=function TW(n){return Object.getPrototypeOf(n.prototype).constructor}(n.type),t=!0;const l=[n];for(;e;){let V;if(an(n))V=e.\u0275cmp||e.\u0275dir;else{if(e.\u0275cmp)throw new k(903,!1);V=e.\u0275dir}if(V){if(t){l.push(V);const a=n;a.inputs=Cr(n.inputs),a.declaredInputs=Cr(n.declaredInputs),a.outputs=Cr(n.outputs);const U=V.hostBindings;U&&m3(n,U);const N=V.viewQuery,R=V.contentQueries;if(N&&F3(n,N),R&&M3(n,R),nZ(n.inputs,V.inputs),nZ(n.declaredInputs,V.declaredInputs),nZ(n.outputs,V.outputs),an(V)&&V.data.animation){const Z=n.data;Z.animation=(Z.animation||[]).concat(V.data.animation)}}const d=V.features;if(d)for(let a=0;a<d.length;a++){const U=d[a];U&&U.ngInherit&&U(n),U===Pn&&(t=!1)}}e=Object.getPrototypeOf(e)}!function W3(n){let e=0,t=null;for(let l=n.length-1;l>=0;l--){const V=n[l];V.hostVars=e+=V.hostVars,V.hostAttrs=MU(V.hostAttrs,t=MU(t,V.hostAttrs))}}(l)}function Cr(n){return n===kV?{}:n===de?[]:n}function F3(n,e){const t=n.viewQuery;n.viewQuery=t?(l,V)=>{e(l,V),t(l,V)}:e}function M3(n,e){const t=n.contentQueries;n.contentQueries=t?(l,V,d)=>{e(l,V,d),t(l,V,d)}:e}function m3(n,e){const t=n.hostBindings;n.hostBindings=t?(l,V)=>{e(l,V),t(l,V)}:e}let _U=null;function Ll(){if(!_U){const n=Te.Symbol;if(n&&n.iterator)_U=n.iterator;else{const e=Object.getOwnPropertyNames(Map.prototype);for(let t=0;t<e.length;++t){const l=e[t];"entries"!==l&&"size"!==l&&Map.prototype[l]===Map.prototype.entries&&(_U=l)}}}return _U}function aa(n){return!!Kr(n)&&(Array.isArray(n)||!(n instanceof Map)&&Ll()in n)}function Kr(n){return null!==n&&("function"==typeof n||"object"==typeof n)}function Qn(n,e,t){return n[e]=t}function nt(n,e,t){return!Object.is(n[e],t)&&(n[e]=t,!0)}function Ct(n,e,t,l){const V=m();return nt(V,zV(),e)&&(ee(),Jn(Ee(),V,n,e,t,l)),Ct}function Rt(n,e,t,l,V,d,a,U){const N=m(),R=ee(),Z=n+22,r=R.firstCreatePass?function z3(n,e,t,l,V,d,a,U,N){const R=e.consts,Z=CV(e,n,4,a||null,Zl(R,U));Or(e,t,Z,Zl(R,N)),TU(e,Z);const r=Z.tViews=Br(2,Z,l,V,d,e.directiveRegistry,e.pipeRegistry,null,e.schemas,R);return null!==e.queries&&(e.queries.template(e,Z),r.queries=e.queries.embeddedTView(Z)),Z}(Z,R,N,e,t,l,V,d,a):R.data[Z];En(r,!1);const c=N[I].createComment("");uU(R,N,c,r),tt(c,N),LU(N,N[Z]=ZW(c,N,c,r)),iU(r)&&jr(R,N,r),null!=a&&Hr(N,r,U)}function Ze(n,e,t){const l=m();return nt(l,zV(),e)&&Gt(ee(),Ee(),l,n,e,l[I],t,!1),Ze}function Pr(n,e,t,l,V){const a=V?"class":"style";fr(n,t,e.inputs[a],a,l)}function re(n,e,t,l){const V=m(),d=ee(),a=22+n,U=V[I],N=V[a]=_Z(U,e,function JS(){return B.lFrame.currentNamespace}()),R=d.firstCreatePass?function G3(n,e,t,l,V,d,a){const U=e.consts,R=CV(e,n,2,V,Zl(U,d));return Or(e,t,R,Zl(U,a)),null!==R.attrs&&KU(R,R.attrs,!1),null!==R.mergedAttrs&&KU(R,R.mergedAttrs,!0),null!==e.queries&&e.queries.elementStart(e,R),R}(a,d,V,0,e,t,l):d.data[a];En(R,!0);const Z=R.mergedAttrs;null!==Z&&FU(U,N,Z);const r=R.classes;null!==r&&lr(U,N,r);const c=R.styles;return null!==c&&$T(U,N,c),64!=(64&R.flags)&&uU(d,V,N,R),0===function iS(){return B.lFrame.elementDepthCount}()&&tt(N,V),function oS(){B.lFrame.elementDepthCount++}(),iU(R)&&(jr(d,V,R),$h(d,R,V)),null!==l&&Hr(V,R),re}function ce(){let n=Oe();FZ()?MZ():(n=n.parent,En(n,!1));const e=n;!function sS(){B.lFrame.elementDepthCount--}();const t=ee();return t.firstCreatePass&&(TU(t,n),cZ(n)&&t.queries.elementEnd(n)),null!=e.classesWithoutHost&&function GS(n){return 0!=(16&n.flags)}(e)&&Pr(t,e,m(),e.classesWithoutHost,!0),null!=e.stylesWithoutHost&&function DS(n){return 0!=(32&n.flags)}(e)&&Pr(t,e,m(),e.stylesWithoutHost,!1),ce}function Wt(n,e,t,l){return re(n,e,t,l),ce(),Wt}function Kl(n,e,t){const l=m(),V=ee(),d=n+22,a=V.firstCreatePass?function D3(n,e,t,l,V){const d=e.consts,a=Zl(d,l),U=CV(e,n,8,"ng-container",a);return null!==a&&KU(U,a,!0),Or(e,t,U,Zl(d,V)),null!==e.queries&&e.queries.elementStart(e,U),U}(d,V,l,e,t):V.data[d];En(a,!0);const U=l[d]=l[I].createComment("");return uU(V,l,U,a),tt(U,l),iU(a)&&(jr(V,l,a),$h(V,a,l)),null!=t&&Hr(l,a),Kl}function Pl(){let n=Oe();const e=ee();return FZ()?MZ():(n=n.parent,En(n,!1)),e.firstCreatePass&&(TU(e,n),cZ(n)&&e.queries.elementEnd(n)),Pl}function Vd(){return m()}function AU(n){return!!n&&"function"==typeof n.then}function JW(n){return!!n&&"function"==typeof n.subscribe}const QW=JW;function Rn(n,e,t,l){const V=m(),d=ee(),a=Oe();return zW(d,V,V[I],a,n,e,0,l),Rn}function _r(n,e){const t=Oe(),l=m(),V=ee();return zW(V,l,iW(pZ(V.data),t,l),t,n,e),_r}function zW(n,e,t,l,V,d,a,U){const N=iU(l),Z=n.firstCreatePass&&cW(n),r=e[8],c=rW(e);let i=!0;if(3&l.type||U){const T=Jt(l,e),W=U?U(T):T,p=c.length,F=U?L=>U(xe(L[l.index])):l.index;let Y=null;if(!U&&N&&(Y=function x3(n,e,t,l){const V=n.cleanup;if(null!=V)for(let d=0;d<V.length-1;d+=2){const a=V[d];if(a===t&&V[d+1]===l){const U=e[7],N=V[d+2];return U.length>N?U[N]:null}"string"==typeof a&&(d+=2)}return null}(n,e,V,l.index)),null!==Y)(Y.__ngLastListenerFn__||Y).__ngNextListenerFn__=d,Y.__ngLastListenerFn__=d,i=!1;else{d=uW(l,e,r,d,!1);const L=t.listen(W,V,d);c.push(d,L),Z&&Z.push(V,F,p,p+1)}}else d=uW(l,e,r,d,!1);const o=l.outputs;let s;if(i&&null!==o&&(s=o[V])){const T=s.length;if(T)for(let W=0;W<T;W+=2){const $=e[s[W]][s[W+1]].subscribe(d),Je=c.length;c.push(d,$),Z&&Z.push(V,l.index,Je,-(Je+1))}}}function bW(n,e,t,l){try{return!1!==t(l)}catch(V){return oW(n,V),!1}}function uW(n,e,t,l,V){return function d(a){if(a===Function)return l;gr(2&n.flags?Qt(n.index,e):e);let N=bW(e,0,l,a),R=d.__ngNextListenerFn__;for(;R;)N=bW(e,0,R,a)&&N,R=R.__ngNextListenerFn__;return V&&!1===N&&(a.preventDefault(),a.returnValue=!1),N}}function Ft(n=1){return function kS(n){return(B.lFrame.contextLView=function ES(n,e){for(;n>0;)e=e[15],n--;return e}(n,B.lFrame.contextLView))[8]}(n)}function X3(n,e){let t=null;const l=function dJ(n){const e=n.attrs;if(null!=e){const t=e.indexOf(5);if(0==(1&t))return e[t+1]}return null}(n);for(let V=0;V<e.length;V++){const d=e[V];if("*"!==d){if(null===l?Jh(n,d,!0):NJ(l,d))return V}else t=V}return t}function $U(n){const e=m()[16][6];if(!e.projection){const l=e.projection=fd(n?n.length:1,null),V=l.slice();let d=e.child;for(;null!==d;){const a=n?X3(d,n):0;null!==a&&(V[a]?V[a].projectionNext=d:l[a]=d,V[a]=d),d=d.next}}}function Wl(n,e=0,t){const l=m(),V=ee(),d=CV(V,22+n,16,null,t||null);null===d.projection&&(d.projection=e),MZ(),64!=(64&d.flags)&&function C2(n,e,t){AT(e[I],0,e,t,gT(n,t,e),CT(t.parent||e[6],t,e))}(V,l,d)}function vW(n,e,t,l,V){const d=n[t+1],a=null===e;let U=l?Nn(d):Cn(d),N=!1;for(;0!==U&&(!1===N||a);){const Z=n[U+1];H3(n[U],e)&&(N=!0,n[U+1]=l?Jr(Z):Sr(Z)),U=l?Nn(Z):Cn(Z)}N&&(n[t+1]=l?Sr(d):Jr(d))}function H3(n,e){return null===n||null==e||(Array.isArray(n)?n[1]:n)===e||!(!Array.isArray(n)||"string"!=typeof e)&&HV(n,e)>=0}function Ar(n,e,t){return rn(n,e,t,!1),Ar}function Zn(n,e){return rn(n,e,null,!0),Zn}function rn(n,e,t,l){const V=m(),d=ee(),a=function vn(n){const e=B.lFrame,t=e.bindingIndex;return e.bindingIndex=e.bindingIndex+n,t}(2);d.firstUpdatePass&&function PW(n,e,t,l){const V=n.data;if(null===V[t+1]){const d=V[Ut()],a=function KW(n,e){return e>=n.expandoStartIndex}(n,t);(function $W(n,e){return 0!=(n.flags&(e?16:32))})(d,l)&&null===e&&!a&&(e=!1),e=function C3(n,e,t,l){const V=pZ(n);let d=l?e.residualClasses:e.residualStyles;if(null===V)0===(l?e.classBindings:e.styleBindings)&&(t=Na(t=$r(null,n,e,t,l),e.attrs,l),d=null);else{const a=e.directiveStylingLast;if(-1===a||n[a]!==V)if(t=$r(V,n,e,t,l),null===d){let N=function K3(n,e,t){const l=t?e.classBindings:e.styleBindings;if(0!==Cn(l))return n[Nn(l)]}(n,e,l);void 0!==N&&Array.isArray(N)&&(N=$r(null,n,e,N[1],l),N=Na(N,e.attrs,l),function P3(n,e,t,l){n[Nn(t?e.classBindings:e.styleBindings)]=l}(n,e,l,N))}else d=function _3(n,e,t){let l;const V=e.directiveEnd;for(let d=1+e.directiveStylingLast;d<V;d++)l=Na(l,n[d].hostAttrs,t);return Na(l,e.attrs,t)}(n,e,l)}return void 0!==d&&(l?e.residualClasses=d:e.residualStyles=d),t}(V,d,e,l),function y3(n,e,t,l,V,d){let a=d?e.classBindings:e.styleBindings,U=Nn(a),N=Cn(a);n[l]=t;let Z,R=!1;if(Array.isArray(t)){const r=t;Z=r[1],(null===Z||HV(r,Z)>0)&&(R=!0)}else Z=t;if(V)if(0!==N){const c=Nn(n[U+1]);n[l+1]=vU(c,U),0!==c&&(n[c+1]=Yr(n[c+1],l)),n[U+1]=function bJ(n,e){return 131071&n|e<<17}(n[U+1],l)}else n[l+1]=vU(U,0),0!==U&&(n[U+1]=Yr(n[U+1],l)),U=l;else n[l+1]=vU(N,0),0===U?U=l:n[N+1]=Yr(n[N+1],l),N=l;R&&(n[l+1]=Sr(n[l+1])),vW(n,Z,l,!0),vW(n,Z,l,!1),function j3(n,e,t,l,V){const d=V?n.residualClasses:n.residualStyles;null!=d&&"string"==typeof e&&HV(d,e)>=0&&(t[l+1]=Jr(t[l+1]))}(e,Z,n,l,d),a=vU(U,N),d?e.classBindings=a:e.styleBindings=a}(V,d,e,t,a,l)}}(d,n,a,l),e!==v&&nt(V,a,e)&&function qW(n,e,t,l,V,d,a,U){if(!(3&e.type))return;const N=n.data,R=N[U+1];eN(function gh(n){return 1==(1&n)}(R)?AW(N,e,t,V,Cn(R),a):void 0)||(eN(d)||function wh(n){return 2==(2&n)}(R)&&(d=AW(N,null,t,V,U,a)),function P2(n,e,t,l,V){if(e)V?n.addClass(t,l):n.removeClass(t,l);else{let d=-1===l.indexOf("-")?void 0:ht.DashCase;null==V?n.removeStyle(t,l,d):("string"==typeof V&&V.endsWith("!important")&&(V=V.slice(0,-10),d|=ht.Important),n.setStyle(t,l,V,d))}}(l,a,oU(Ut(),t),V,d))}(d,d.data[Ut()],V,V[I],n,V[a+1]=function $3(n,e){return null==n||("string"==typeof e?n+=e:"object"==typeof n&&(n=se(ut(n)))),n}(e,t),l,a)}function $r(n,e,t,l,V){let d=null;const a=t.directiveEnd;let U=t.directiveStylingLast;for(-1===U?U=t.directiveStart:U++;U<a&&(d=e[U],l=Na(l,d.hostAttrs,V),d!==n);)U++;return null!==n&&(t.directiveStylingLast=U),l}function Na(n,e,t){const l=t?1:2;let V=-1;if(null!==e)for(let d=0;d<e.length;d++){const a=e[d];"number"==typeof a?V=a:V===l&&(Array.isArray(n)||(n=void 0===n?[]:["",n]),bt(n,a,!!t||e[++d]))}return void 0===n?null:n}function AW(n,e,t,l,V,d){const a=null===e;let U;for(;V>0;){const N=n[V],R=Array.isArray(N),Z=R?N[1]:N,r=null===Z;let c=t[V+1];c===v&&(c=r?de:void 0);let i=r?xZ(c,l):Z===l?c:void 0;if(R&&!eN(i)&&(i=xZ(N,l)),eN(i)&&(U=i,a))return U;const o=n[V+1];V=a?Nn(o):Cn(o)}if(null!==e){let N=d?e.residualClasses:e.residualStyles;null!=N&&(U=xZ(N,l))}return U}function eN(n){return void 0!==n}function un(n,e=""){const t=m(),l=ee(),V=n+22,d=l.firstCreatePass?CV(l,V,1,e,null):l.data[V],a=t[V]=function PZ(n,e){return n.createText(e)}(t[I],e);uU(l,t,a,d),En(d,!1)}function Fl(n){return tN("",n,""),Fl}function tN(n,e,t){const l=m(),V=function _V(n,e,t,l){return nt(n,zV(),t)?e+O(t)+l:v}(l,n,e,t);return V!==v&&function Kn(n,e,t){const l=oU(e,n);!function OT(n,e,t){n.setValue(e,t)}(n[I],l,t)}(l,Ut(),V),tN}function ec(n,e,t){const l=m();if(nt(l,zV(),e)){const d=ee(),a=Ee();Gt(d,a,l,n,e,iW(pZ(d.data),a,l),t,!0)}return ec}const Ud="en-US";let MF=Ud;function lc(n,e,t,l,V){if(n=H(n),Array.isArray(n))for(let d=0;d<n.length;d++)lc(n[d],e,t,l,V);else{const d=ee(),a=m();let U=fl(n)?n:H(n.provide),N=Mh(n);const R=Oe(),Z=1048575&R.providerIndexes,r=R.directiveStart,c=R.providerIndexes>>20;if(fl(n)||!n.multi){const i=new Bd(N,V,M),o=dc(U,e,V?Z:Z+c,r);-1===o?(kU(vd(R,a),d,U),Vc(d,n,e.length),e.push(U),R.directiveStart++,R.directiveEnd++,V&&(R.providerIndexes+=1048576),t.push(i),a.push(i)):(t[o]=i,a[o]=i)}else{const i=dc(U,e,Z+c,r),o=dc(U,e,Z,Z+c),s=i>=0&&t[i],T=o>=0&&t[o];if(V&&!T||!V&&!s){kU(vd(R,a),d,U);const W=function hz(n,e,t,l,V){const d=new Bd(n,t,M);return d.multi=[],d.index=e,d.componentProviders=0,fF(d,V,l&&!t),d}(V?Tz:sz,t.length,V,l,N);!V&&T&&(t[o].providerFactory=W),Vc(d,n,e.length,0),e.push(U),R.directiveStart++,R.directiveEnd++,V&&(R.providerIndexes+=1048576),t.push(W),a.push(W)}else Vc(d,n,i>-1?i:o,fF(t[V?o:i],N,!V&&l));!V&&l&&T&&t[o].componentProviders++}}}function Vc(n,e,t,l){const V=fl(e),d=function zY(n){return!!n.useClass}(e);if(V||d){const N=(d?H(e.useClass):e).prototype.ngOnDestroy;if(N){const R=n.destroyHooks||(n.destroyHooks=[]);if(!V&&e.multi){const Z=R.indexOf(t);-1===Z?R.push(t,[l,N]):R[Z+1].push(l,N)}else R.push(t,N)}}}function fF(n,e,t){return t&&n.componentProviders++,n.multi.push(e)-1}function dc(n,e,t,l){for(let V=t;V<l;V++)if(e[V]===n)return V;return-1}function sz(n,e,t,l){return ac(this.multi,[])}function Tz(n,e,t,l){const V=this.multi;let d;if(this.providerFactory){const a=this.providerFactory.componentProviders,U=wd(t,t[1],this.providerFactory.index,l);d=U.slice(0,a),ac(V,d);for(let N=a;N<U.length;N++)d.push(U[N])}else d=[],ac(V,d);return d}function ac(n,e){for(let t=0;t<n.length;t++)e.push((0,n[t])());return e}function ql(n,e=[]){return t=>{t.providersResolver=(l,V)=>function oz(n,e,t){const l=ee();if(l.firstCreatePass){const V=an(n);lc(t,l.data,l.blueprint,V,!0),lc(e,l.data,l.blueprint,V,!1)}}(l,V?V(n):n,e)}}class Al{}class LF{}class CF extends Al{constructor(e,t){super(),this._parent=t,this._bootstrapComponents=[],this.destroyCbs=[],this.componentFactoryResolver=new Lr(this);const l=St(e);this._bootstrapComponents=Ln(l.bootstrap),this._r3Injector=xh(e,t,[{provide:Al,useValue:this},{provide:fn,useValue:this.componentFactoryResolver}],se(e),new Set(["environment"])),this._r3Injector.resolveInjectorInitializers(),this.instance=this._r3Injector.get(e)}get injector(){return this._r3Injector}destroy(){const e=this._r3Injector;!e.destroyed&&e.destroy(),this.destroyCbs.forEach(t=>t()),this.destroyCbs=null}onDestroy(e){this.destroyCbs.push(e)}}class Uc extends LF{constructor(e){super(),this.moduleType=e}create(e){return new CF(this.moduleType,e)}}class Fz extends Al{constructor(e,t,l){super(),this.componentFactoryResolver=new Lr(this),this.instance=null;const V=new Fh([...e,{provide:Al,useValue:this},{provide:fn,useValue:this.componentFactoryResolver}],t||HU(),l,new Set(["environment"]));this.injector=V,V.resolveInjectorInitializers()}destroy(){this.injector.destroy()}onDestroy(e){this.injector.onDestroy(e)}}function aN(n,e,t=null){return new Fz(n,e,t).injector}let Mz=(()=>{class n{constructor(t){this._injector=t,this.cachedInjectors=new Map}getOrCreateStandaloneInjector(t){if(!t.standalone)return null;if(!this.cachedInjectors.has(t.id)){const l=sh(0,t.type),V=l.length>0?aN([l],this._injector,`Standalone[${t.type.name}]`):null;this.cachedInjectors.set(t.id,V)}return this.cachedInjectors.get(t.id)}ngOnDestroy(){try{for(const t of this.cachedInjectors.values())null!==t&&t.destroy()}finally{this.cachedInjectors.clear()}}}return n.\u0275prov=S({token:n,providedIn:"environment",factory:()=>new n(h(il))}),n})();function KF(n){n.getStandaloneInjector=e=>e.get(Mz).getOrCreateStandaloneInjector(n)}function UN(n,e,t,l){return nM(m(),at(),n,e,t,l)}function tM(n,e,t,l,V){return function lM(n,e,t,l,V,d,a){const U=e+t;return function Cl(n,e,t,l){const V=nt(n,e,t);return nt(n,e+1,l)||V}(n,U,V,d)?Qn(n,U+2,a?l.call(a,V,d):l(V,d)):oa(n,U+2)}(m(),at(),n,e,t,l,V)}function oa(n,e){const t=n[e];return t===v?void 0:t}function nM(n,e,t,l,V,d){const a=e+t;return nt(n,a,V)?Qn(n,a+1,d?l.call(d,V):l(V)):oa(n,a+1)}function Rc(n){return e=>{setTimeout(n,void 0,e)}}const A=class wz extends u{constructor(e=!1){super(),this.__isAsync=e}emit(e){super.next(e)}subscribe(e,t,l){let V=e,d=t||(()=>null),a=l;if(e&&"object"==typeof e){const N=e;V=N.next?.bind(N),d=N.error?.bind(N),a=N.complete?.bind(N)}this.__isAsync&&(d=Rc(d),V&&(V=Rc(V)),a&&(a=Rc(a)));const U=super.subscribe({next:V,error:d,complete:a});return e instanceof Fe&&e.add(U),U}};function gz(){return this._results[Ll()]()}class $l{constructor(e=!1){this._emitDistinctChangesOnly=e,this.dirty=!0,this._results=[],this._changesDetected=!1,this._changes=null,this.length=0,this.first=void 0,this.last=void 0;const t=Ll(),l=$l.prototype;l[t]||(l[t]=gz)}get changes(){return this._changes||(this._changes=new A)}get(e){return this._results[e]}map(e){return this._results.map(e)}filter(e){return this._results.filter(e)}find(e){return this._results.find(e)}reduce(e,t){return this._results.reduce(e,t)}forEach(e){this._results.forEach(e)}some(e){return this._results.some(e)}toArray(){return this._results.slice()}toString(){return this._results.toString()}reset(e,t){const l=this;l.dirty=!1;const V=zt(e);(this._changesDetected=!function gS(n,e,t){if(n.length!==e.length)return!1;for(let l=0;l<n.length;l++){let V=n[l],d=e[l];if(t&&(V=t(V),d=t(d)),d!==V)return!1}return!0}(l._results,V,t))&&(l._results=V,l.length=V.length,l.last=V[this.length-1],l.first=V[0])}notifyOnChanges(){this._changes&&(this._changesDetected||!this._emitDistinctChangesOnly)&&this._changes.emit(this)}setDirty(){this.dirty=!0}destroy(){this.changes.complete(),this.changes.unsubscribe()}}let on=(()=>{class n{}return n.__NG_ELEMENT_ID__=Lz,n})();const Iz=on,fz=class extends Iz{constructor(e,t,l){super(),this._declarationLView=e,this._declarationTContainer=t,this.elementRef=l}createEmbeddedView(e,t){const l=this._declarationTContainer.tViews,V=IU(this._declarationLView,l,e,16,null,l.declTNode,null,null,null,null,t||null);V[17]=this._declarationLView[this._declarationTContainer.index];const a=this._declarationLView[19];return null!==a&&(V[19]=a.createEmbeddedView(l)),yr(l,V,e),new Va(V)}};function Lz(){return NN(Oe(),m())}function NN(n,e){return 4&n.type?new fz(e,n,IV(n,e)):null}let Mt=(()=>{class n{}return n.__NG_ELEMENT_ID__=Cz,n})();function Cz(){return rM(Oe(),m())}const Kz=Mt,RM=class extends Kz{constructor(e,t,l){super(),this._lContainer=e,this._hostTNode=t,this._hostLView=l}get element(){return IV(this._hostTNode,this._hostLView)}get injector(){return new GV(this._hostTNode,this._hostLView)}get parentInjector(){const e=pU(this._hostTNode,this._hostLView);if(nT(e)){const t=uV(e,this._hostLView),l=bV(e);return new GV(t[1].data[l+8],t)}return new GV(null,this._hostLView)}clear(){for(;this.length>0;)this.remove(this.length-1)}get(e){const t=ZM(this._lContainer);return null!==t&&t[e]||null}get length(){return this._lContainer.length-10}createEmbeddedView(e,t,l){let V,d;"number"==typeof l?V=l:null!=l&&(V=l.index,d=l.injector);const a=e.createEmbeddedView(t||{},d);return this.insert(a,V),a}createComponent(e,t,l,V,d){const a=e&&!function Id(n){return"function"==typeof n}(e);let U;if(a)U=t;else{const r=t||{};U=r.index,l=r.injector,V=r.projectableNodes,d=r.environmentInjector||r.ngModuleRef}const N=a?e:new da(Re(e)),R=l||this.parentInjector;if(!d&&null==N.ngModule){const c=(a?R:this.parentInjector).get(il,null);c&&(d=c)}const Z=N.create(R,V,void 0,d);return this.insert(Z.hostView,U),Z}insert(e,t){const l=e._lView,V=l[1];if(function cS(n){return dn(n[3])}(l)){const Z=this.indexOf(e);if(-1!==Z)this.detach(Z);else{const r=l[3],c=new RM(r,r[6],r[3]);c.detach(c.indexOf(e))}}const d=this._adjustIndex(t),a=this._lContainer;!function v2(n,e,t,l){const V=10+l,d=t.length;l>0&&(t[V-1][4]=e),l<d-10?(e[4]=t[V],oT(t,10+l,e)):(t.push(e),e[4]=null),e[3]=t;const a=e[17];null!==a&&t!==a&&function w2(n,e){const t=n[9];e[16]!==e[3][3][16]&&(n[2]=!0),null===t?n[9]=[e]:t.push(e)}(a,e);const U=e[19];null!==U&&U.insertView(n),e[2]|=64}(V,l,a,d);const U=er(d,a),N=l[I],R=bU(N,a[7]);return null!==R&&function H2(n,e,t,l,V,d){l[0]=V,l[6]=e,$d(n,l,t,1,V,d)}(V,a[6],N,l,R,U),e.attachToViewContainerRef(),oT(Zc(a),d,e),e}move(e,t){return this.insert(e,t)}indexOf(e){const t=ZM(this._lContainer);return null!==t?t.indexOf(e):-1}remove(e){const t=this._adjustIndex(e,-1),l=qZ(this._lContainer,t);l&&(SU(Zc(this._lContainer),t),wT(l[1],l))}detach(e){const t=this._adjustIndex(e,-1),l=qZ(this._lContainer,t);return l&&null!=SU(Zc(this._lContainer),t)?new Va(l):null}_adjustIndex(e,t=0){return e??this.length+t}};function ZM(n){return n[8]}function Zc(n){return n[8]||(n[8]=[])}function rM(n,e){let t;const l=e[n.index];if(dn(l))t=l;else{let V;if(8&n.type)V=xe(l);else{const d=e[I];V=d.createComment("");const a=Jt(n,e);wl(d,bU(d,a),V,function L2(n,e){return n.nextSibling(e)}(d,a),!1)}e[n.index]=t=ZW(l,e,V,n),LU(e,t)}return new RM(t,n,e)}class rc{constructor(e){this.queryList=e,this.matches=null}clone(){return new rc(this.queryList)}setDirty(){this.queryList.setDirty()}}class cc{constructor(e=[]){this.queries=e}createEmbeddedView(e){const t=e.queries;if(null!==t){const l=null!==e.contentQueries?e.contentQueries[0]:t.length,V=[];for(let d=0;d<l;d++){const a=t.getByIndex(d);V.push(this.queries[a.indexInDeclarationView].clone())}return new cc(V)}return null}insertView(e){this.dirtyQueriesWithMatches(e)}detachView(e){this.dirtyQueriesWithMatches(e)}dirtyQueriesWithMatches(e){for(let t=0;t<this.queries.length;t++)null!==TM(e,t).matches&&this.queries[t].setDirty()}}class cM{constructor(e,t,l=null){this.predicate=e,this.flags=t,this.read=l}}class ic{constructor(e=[]){this.queries=e}elementStart(e,t){for(let l=0;l<this.queries.length;l++)this.queries[l].elementStart(e,t)}elementEnd(e){for(let t=0;t<this.queries.length;t++)this.queries[t].elementEnd(e)}embeddedTView(e){let t=null;for(let l=0;l<this.length;l++){const V=null!==t?t.length:0,d=this.getByIndex(l).embeddedTView(e,V);d&&(d.indexInDeclarationView=l,null!==t?t.push(d):t=[d])}return null!==t?new ic(t):null}template(e,t){for(let l=0;l<this.queries.length;l++)this.queries[l].template(e,t)}getByIndex(e){return this.queries[e]}get length(){return this.queries.length}track(e){this.queries.push(e)}}class oc{constructor(e,t=-1){this.metadata=e,this.matches=null,this.indexInDeclarationView=-1,this.crossesNgTemplate=!1,this._appliesToNextNode=!0,this._declarationNodeIndex=t}elementStart(e,t){this.isApplyingToNode(t)&&this.matchTNode(e,t)}elementEnd(e){this._declarationNodeIndex===e.index&&(this._appliesToNextNode=!1)}template(e,t){this.elementStart(e,t)}embeddedTView(e,t){return this.isApplyingToNode(e)?(this.crossesNgTemplate=!0,this.addMatch(-e.index,t),new oc(this.metadata)):null}isApplyingToNode(e){if(this._appliesToNextNode&&1!=(1&this.metadata.flags)){const t=this._declarationNodeIndex;let l=e.parent;for(;null!==l&&8&l.type&&l.index!==t;)l=l.parent;return t===(null!==l?l.index:-1)}return this._appliesToNextNode}matchTNode(e,t){const l=this.metadata.predicate;if(Array.isArray(l))for(let V=0;V<l.length;V++){const d=l[V];this.matchTNodeWithReadOption(e,t,qz(t,d)),this.matchTNodeWithReadOption(e,t,EU(t,e,d,!1,!1))}else l===on?4&t.type&&this.matchTNodeWithReadOption(e,t,-1):this.matchTNodeWithReadOption(e,t,EU(t,e,l,!1,!1))}matchTNodeWithReadOption(e,t,l){if(null!==l){const V=this.metadata.read;if(null!==V)if(V===we||V===Mt||V===on&&4&t.type)this.addMatch(t.index,-2);else{const d=EU(t,e,V,!1,!1);null!==d&&this.addMatch(t.index,d)}else this.addMatch(t.index,l)}}addMatch(e,t){null===this.matches?this.matches=[e,t]:this.matches.push(e,t)}}function qz(n,e){const t=n.localNames;if(null!==t)for(let l=0;l<t.length;l+=2)if(t[l]===e)return t[l+1];return null}function $z(n,e,t,l){return-1===t?function Az(n,e){return 11&n.type?IV(n,e):4&n.type?NN(n,e):null}(e,n):-2===t?function eb(n,e,t){return t===we?IV(e,n):t===on?NN(e,n):t===Mt?rM(e,n):void 0}(n,e,l):wd(n,n[1],t,e)}function iM(n,e,t,l){const V=e[19].queries[l];if(null===V.matches){const d=n.data,a=t.matches,U=[];for(let N=0;N<a.length;N+=2){const R=a[N];U.push(R<0?null:$z(e,d[R],a[N+1],t.metadata.read))}V.matches=U}return V.matches}function sc(n,e,t,l){const V=n.queries.getByIndex(t),d=V.matches;if(null!==d){const a=iM(n,e,V,t);for(let U=0;U<d.length;U+=2){const N=d[U];if(N>0)l.push(a[U/2]);else{const R=d[U+1],Z=e[-N];for(let r=10;r<Z.length;r++){const c=Z[r];c[17]===c[3]&&sc(c[1],c,R,l)}if(null!==Z[9]){const r=Z[9];for(let c=0;c<r.length;c++){const i=r[c];sc(i[1],i,R,l)}}}}}return l}function Dt(n){const e=m(),t=ee(),l=Is();kZ(l+1);const V=TM(t,l);if(n.dirty&&function rS(n){return 4==(4&n[2])}(e)===(2==(2&V.metadata.flags))){if(null===V.matches)n.reset([]);else{const d=V.crossesNgTemplate?sc(t,e,l,[]):iM(t,e,V,l);n.reset(d,vY),n.notifyOnChanges()}return!0}return!1}function Nd(n,e,t){const l=ee();l.firstCreatePass&&(sM(l,new cM(n,e,t),-1),2==(2&e)&&(l.staticViewQueries=!0)),oM(l,m(),e)}function Ml(n,e,t,l){const V=ee();if(V.firstCreatePass){const d=Oe();sM(V,new cM(e,t,l),d.index),function nb(n,e){const t=n.contentQueries||(n.contentQueries=[]);e!==(t.length?t[t.length-1]:-1)&&t.push(n.queries.length-1,e)}(V,n),2==(2&t)&&(V.staticContentQueries=!0)}oM(V,m(),t)}function xt(){return function tb(n,e){return n[19].queries[e].queryList}(m(),Is())}function oM(n,e,t){const l=new $l(4==(4&t));tW(n,e,l,l.destroy),null===e[19]&&(e[19]=new cc),e[19].queries.push(new rc(l))}function sM(n,e,t){null===n.queries&&(n.queries=new ic),n.queries.track(new oc(e,t))}function TM(n,e){return n.queries.getByIndex(e)}function ZN(...n){}const rN=new E("Application Initializer");let cN=(()=>{class n{constructor(t){this.appInits=t,this.resolve=ZN,this.reject=ZN,this.initialized=!1,this.done=!1,this.donePromise=new Promise((l,V)=>{this.resolve=l,this.reject=V})}runInitializers(){if(this.initialized)return;const t=[],l=()=>{this.done=!0,this.resolve()};if(this.appInits)for(let V=0;V<this.appInits.length;V++){const d=this.appInits[V]();if(AU(d))t.push(d);else if(QW(d)){const a=new Promise((U,N)=>{d.subscribe({complete:U,error:N})});t.push(a)}}Promise.all(t).then(()=>{l()}).catch(V=>{this.reject(V)}),0===t.length&&l(),this.initialized=!0}}return n.\u0275fac=function(t){return new(t||n)(h(rN,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const ha=new E("AppId",{providedIn:"root",factory:function XM(){return`${Mc()}${Mc()}${Mc()}`}});function Mc(){return String.fromCharCode(97+Math.floor(25*Math.random()))}const yM=new E("Platform Initializer"),iN=new E("Platform ID",{providedIn:"platform",factory:()=>"unknown"}),jM=new E("appBootstrapListener"),eV=new E("AnimationModuleType");let kb=(()=>{class n{log(t){console.log(t)}warn(t){console.warn(t)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"platform"}),n})();const Gn=new E("LocaleId",{providedIn:"root",factory:()=>me(Gn,X.Optional|X.SkipSelf)||function Eb(){return typeof $localize<"u"&&$localize.locale||Ud}()});class Yb{constructor(e,t){this.ngModuleFactory=e,this.componentFactories=t}}let mc=(()=>{class n{compileModuleSync(t){return new Uc(t)}compileModuleAsync(t){return Promise.resolve(this.compileModuleSync(t))}compileModuleAndAllComponentsSync(t){const l=this.compileModuleSync(t),d=Ln(St(t).declarations).reduce((a,U)=>{const N=Re(U);return N&&a.push(new da(N)),a},[]);return new Yb(l,d)}compileModuleAndAllComponentsAsync(t){return Promise.resolve(this.compileModuleAndAllComponentsSync(t))}clearCache(){}clearCacheFor(t){}getModuleId(t){}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const zb=(()=>Promise.resolve(0))();function pc(n){typeof Zone>"u"?zb.then(()=>{n&&n.apply(null,null)}):Zone.current.scheduleMicroTask("scheduleMicrotask",n)}class _{constructor({enableLongStackTrace:e=!1,shouldCoalesceEventChangeDetection:t=!1,shouldCoalesceRunChangeDetection:l=!1}){if(this.hasPendingMacrotasks=!1,this.hasPendingMicrotasks=!1,this.isStable=!0,this.onUnstable=new A(!1),this.onMicrotaskEmpty=new A(!1),this.onStable=new A(!1),this.onError=new A(!1),typeof Zone>"u")throw new k(908,!1);Zone.assertZonePatched();const V=this;if(V._nesting=0,V._outer=V._inner=Zone.current,Zone.AsyncStackTaggingZoneSpec){const d=Zone.AsyncStackTaggingZoneSpec;V._inner=V._inner.fork(new d("Angular"))}Zone.TaskTrackingZoneSpec&&(V._inner=V._inner.fork(new Zone.TaskTrackingZoneSpec)),e&&Zone.longStackTraceZoneSpec&&(V._inner=V._inner.fork(Zone.longStackTraceZoneSpec)),V.shouldCoalesceEventChangeDetection=!l&&t,V.shouldCoalesceRunChangeDetection=l,V.lastRequestAnimationFrameId=-1,V.nativeRequestAnimationFrame=function bb(){let n=Te.requestAnimationFrame,e=Te.cancelAnimationFrame;if(typeof Zone<"u"&&n&&e){const t=n[Zone.__symbol__("OriginalDelegate")];t&&(n=t);const l=e[Zone.__symbol__("OriginalDelegate")];l&&(e=l)}return{nativeRequestAnimationFrame:n,nativeCancelAnimationFrame:e}}().nativeRequestAnimationFrame,function Db(n){const e=()=>{!function Gb(n){n.isCheckStableRunning||-1!==n.lastRequestAnimationFrameId||(n.lastRequestAnimationFrameId=n.nativeRequestAnimationFrame.call(Te,()=>{n.fakeTopEventTask||(n.fakeTopEventTask=Zone.root.scheduleEventTask("fakeTopEventTask",()=>{n.lastRequestAnimationFrameId=-1,Ec(n),n.isCheckStableRunning=!0,kc(n),n.isCheckStableRunning=!1},void 0,()=>{},()=>{})),n.fakeTopEventTask.invoke()}),Ec(n))}(n)};n._inner=n._inner.fork({name:"angular",properties:{isAngularZone:!0},onInvokeTask:(t,l,V,d,a,U)=>{try{return OM(n),t.invokeTask(V,d,a,U)}finally{(n.shouldCoalesceEventChangeDetection&&"eventTask"===d.type||n.shouldCoalesceRunChangeDetection)&&e(),vM(n)}},onInvoke:(t,l,V,d,a,U,N)=>{try{return OM(n),t.invoke(V,d,a,U,N)}finally{n.shouldCoalesceRunChangeDetection&&e(),vM(n)}},onHasTask:(t,l,V,d)=>{t.hasTask(V,d),l===V&&("microTask"==d.change?(n._hasPendingMicrotasks=d.microTask,Ec(n),kc(n)):"macroTask"==d.change&&(n.hasPendingMacrotasks=d.macroTask))},onHandleError:(t,l,V,d)=>(t.handleError(V,d),n.runOutsideAngular(()=>n.onError.emit(d)),!1)})}(V)}static isInAngularZone(){return typeof Zone<"u"&&!0===Zone.current.get("isAngularZone")}static assertInAngularZone(){if(!_.isInAngularZone())throw new k(909,!1)}static assertNotInAngularZone(){if(_.isInAngularZone())throw new k(909,!1)}run(e,t,l){return this._inner.run(e,t,l)}runTask(e,t,l,V){const d=this._inner,a=d.scheduleEventTask("NgZoneEvent: "+V,e,ub,ZN,ZN);try{return d.runTask(a,t,l)}finally{d.cancelTask(a)}}runGuarded(e,t,l){return this._inner.runGuarded(e,t,l)}runOutsideAngular(e){return this._outer.run(e)}}const ub={};function kc(n){if(0==n._nesting&&!n.hasPendingMicrotasks&&!n.isStable)try{n._nesting++,n.onMicrotaskEmpty.emit(null)}finally{if(n._nesting--,!n.hasPendingMicrotasks)try{n.runOutsideAngular(()=>n.onStable.emit(null))}finally{n.isStable=!0}}}function Ec(n){n.hasPendingMicrotasks=!!(n._hasPendingMicrotasks||(n.shouldCoalesceEventChangeDetection||n.shouldCoalesceRunChangeDetection)&&-1!==n.lastRequestAnimationFrameId)}function OM(n){n._nesting++,n.isStable&&(n.isStable=!1,n.onUnstable.emit(null))}function vM(n){n._nesting--,kc(n)}class xb{constructor(){this.hasPendingMicrotasks=!1,this.hasPendingMacrotasks=!1,this.isStable=!0,this.onUnstable=new A,this.onMicrotaskEmpty=new A,this.onStable=new A,this.onError=new A}run(e,t,l){return e.apply(t,l)}runGuarded(e,t,l){return e.apply(t,l)}runOutsideAngular(e){return e()}runTask(e,t,l,V){return e.apply(t,l)}}const wM=new E(""),oN=new E("");let Jc,Sc=(()=>{class n{constructor(t,l,V){this._ngZone=t,this.registry=l,this._pendingCount=0,this._isZoneStable=!0,this._didWork=!1,this._callbacks=[],this.taskTrackingZone=null,Jc||(function Xb(n){Jc=n}(V),V.addToWindow(l)),this._watchAngularEvents(),t.run(()=>{this.taskTrackingZone=typeof Zone>"u"?null:Zone.current.get("TaskTrackingZone")})}_watchAngularEvents(){this._ngZone.onUnstable.subscribe({next:()=>{this._didWork=!0,this._isZoneStable=!1}}),this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.subscribe({next:()=>{_.assertNotInAngularZone(),pc(()=>{this._isZoneStable=!0,this._runCallbacksIfReady()})}})})}increasePendingRequestCount(){return this._pendingCount+=1,this._didWork=!0,this._pendingCount}decreasePendingRequestCount(){if(this._pendingCount-=1,this._pendingCount<0)throw new Error("pending async requests below zero");return this._runCallbacksIfReady(),this._pendingCount}isStable(){return this._isZoneStable&&0===this._pendingCount&&!this._ngZone.hasPendingMacrotasks}_runCallbacksIfReady(){if(this.isStable())pc(()=>{for(;0!==this._callbacks.length;){let t=this._callbacks.pop();clearTimeout(t.timeoutId),t.doneCb(this._didWork)}this._didWork=!1});else{let t=this.getPendingTasks();this._callbacks=this._callbacks.filter(l=>!l.updateCb||!l.updateCb(t)||(clearTimeout(l.timeoutId),!1)),this._didWork=!0}}getPendingTasks(){return this.taskTrackingZone?this.taskTrackingZone.macroTasks.map(t=>({source:t.source,creationLocation:t.creationLocation,data:t.data})):[]}addCallback(t,l,V){let d=-1;l&&l>0&&(d=setTimeout(()=>{this._callbacks=this._callbacks.filter(a=>a.timeoutId!==d),t(this._didWork,this.getPendingTasks())},l)),this._callbacks.push({doneCb:t,timeoutId:d,updateCb:V})}whenStable(t,l,V){if(V&&!this.taskTrackingZone)throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');this.addCallback(t,l,V),this._runCallbacksIfReady()}getPendingRequestCount(){return this._pendingCount}registerApplication(t){this.registry.registerApplication(t,this)}unregisterApplication(t){this.registry.unregisterApplication(t)}findProviders(t,l,V){return[]}}return n.\u0275fac=function(t){return new(t||n)(h(_),h(Yc),h(oN))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),Yc=(()=>{class n{constructor(){this._applications=new Map}registerApplication(t,l){this._applications.set(t,l)}unregisterApplication(t){this._applications.delete(t)}unregisterAllApplications(){this._applications.clear()}getTestability(t){return this._applications.get(t)||null}getAllTestabilities(){return Array.from(this._applications.values())}getAllRootElements(){return Array.from(this._applications.keys())}findTestabilityInTree(t,l=!0){return Jc?.findTestabilityInTree(this,t,l)??null}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"platform"}),n})(),ml=null;const gM=new E("AllowMultipleToken"),Qc=new E("PlatformDestroyListeners");class IM{constructor(e,t){this.name=e,this.token=t}}function LM(n,e,t=[]){const l=`Platform: ${e}`,V=new E(l);return(d=[])=>{let a=zc();if(!a||a.injector.get(gM,!1)){const U=[...t,...d,{provide:V,useValue:!0}];n?n(U):function Hb(n){if(ml&&!ml.get(gM,!1))throw new k(400,!1);ml=n;const e=n.get(KM);(function fM(n){const e=n.get(yM,null);e&&e.forEach(t=>t())})(n)}(function CM(n=[],e){return ge.create({name:e,providers:[{provide:ir,useValue:"platform"},{provide:Qc,useValue:new Set([()=>ml=null])},...n]})}(U,l))}return function Ob(n){const e=zc();if(!e)throw new k(401,!1);return e}()}}function zc(){return ml?.get(KM)??null}let KM=(()=>{class n{constructor(t){this._injector=t,this._modules=[],this._destroyListeners=[],this._destroyed=!1}bootstrapModuleFactory(t,l){const V=function _M(n,e){let t;return t="noop"===n?new xb:("zone.js"===n?void 0:n)||new _(e),t}(l?.ngZone,function PM(n){return{enableLongStackTrace:!1,shouldCoalesceEventChangeDetection:!(!n||!n.ngZoneEventCoalescing)||!1,shouldCoalesceRunChangeDetection:!(!n||!n.ngZoneRunCoalescing)||!1}}(l)),d=[{provide:_,useValue:V}];return V.run(()=>{const a=ge.create({providers:d,parent:this.injector,name:t.moduleType.name}),U=t.create(a),N=U.injector.get(sl,null);if(!N)throw new k(402,!1);return V.runOutsideAngular(()=>{const R=V.onError.subscribe({next:Z=>{N.handleError(Z)}});U.onDestroy(()=>{sN(this._modules,U),R.unsubscribe()})}),function qM(n,e,t){try{const l=t();return AU(l)?l.catch(V=>{throw e.runOutsideAngular(()=>n.handleError(V)),V}):l}catch(l){throw e.runOutsideAngular(()=>n.handleError(l)),l}}(N,V,()=>{const R=U.injector.get(cN);return R.runInitializers(),R.donePromise.then(()=>(function mF(n){kt(n,"Expected localeId to be defined"),"string"==typeof n&&(MF=n.toLowerCase().replace(/_/g,"-"))}(U.injector.get(Gn,Ud)||Ud),this._moduleDoBootstrap(U),U))})})}bootstrapModule(t,l=[]){const V=AM({},l);return function yb(n,e,t){const l=new Uc(t);return Promise.resolve(l)}(0,0,t).then(d=>this.bootstrapModuleFactory(d,V))}_moduleDoBootstrap(t){const l=t.injector.get(tV);if(t._bootstrapComponents.length>0)t._bootstrapComponents.forEach(V=>l.bootstrap(V));else{if(!t.instance.ngDoBootstrap)throw new k(403,!1);t.instance.ngDoBootstrap(l)}this._modules.push(t)}onDestroy(t){this._destroyListeners.push(t)}get injector(){return this._injector}destroy(){if(this._destroyed)throw new k(404,!1);this._modules.slice().forEach(l=>l.destroy()),this._destroyListeners.forEach(l=>l());const t=this._injector.get(Qc,null);t&&(t.forEach(l=>l()),t.clear()),this._destroyed=!0}get destroyed(){return this._destroyed}}return n.\u0275fac=function(t){return new(t||n)(h(ge))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"platform"}),n})();function AM(n,e){return Array.isArray(e)?e.reduce(AM,n):{...n,...e}}let tV=(()=>{class n{constructor(t,l,V){this._zone=t,this._injector=l,this._exceptionHandler=V,this._bootstrapListeners=[],this._views=[],this._runningTick=!1,this._stable=!0,this._destroyed=!1,this._destroyListeners=[],this.componentTypes=[],this.components=[],this._onMicrotaskEmptySubscription=this._zone.onMicrotaskEmpty.subscribe({next:()=>{this._zone.run(()=>{this.tick()})}});const d=new ie(U=>{this._stable=this._zone.isStable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks,this._zone.runOutsideAngular(()=>{U.next(this._stable),U.complete()})}),a=new ie(U=>{let N;this._zone.runOutsideAngular(()=>{N=this._zone.onStable.subscribe(()=>{_.assertNotInAngularZone(),pc(()=>{!this._stable&&!this._zone.hasPendingMacrotasks&&!this._zone.hasPendingMicrotasks&&(this._stable=!0,U.next(!0))})})});const R=this._zone.onUnstable.subscribe(()=>{_.assertInAngularZone(),this._stable&&(this._stable=!1,this._zone.runOutsideAngular(()=>{U.next(!1)}))});return()=>{N.unsubscribe(),R.unsubscribe()}});this.isStable=pV(d,a.pipe(function ps(n={}){const{connector:e=(()=>new u),resetOnError:t=!0,resetOnComplete:l=!0,resetOnRefCountZero:V=!0}=n;return d=>{let a,U,N,R=0,Z=!1,r=!1;const c=()=>{U?.unsubscribe(),U=void 0},i=()=>{c(),a=N=void 0,Z=r=!1},o=()=>{const s=a;i(),s?.unsubscribe()};return ze((s,T)=>{R++,!r&&!Z&&c();const W=N=N??e();T.add(()=>{R--,0===R&&!r&&!Z&&(U=tZ(o,V))}),W.subscribe(T),!a&&R>0&&(a=new ud({next:p=>W.next(p),error:p=>{r=!0,c(),U=tZ(i,t,p),W.error(p)},complete:()=>{Z=!0,c(),U=tZ(i,l),W.complete()}}),ot(s).subscribe(a))})(d)}}()))}get destroyed(){return this._destroyed}get injector(){return this._injector}bootstrap(t,l){const V=t instanceof mh;if(!this._injector.get(cN).done)throw!V&&function EV(n){const e=Re(n)||Vt(n)||dt(n);return null!==e&&e.standalone}(t),new k(405,false);let a;a=V?t:this._injector.get(fn).resolveComponentFactory(t),this.componentTypes.push(a.componentType);const U=function jb(n){return n.isBoundToModule}(a)?void 0:this._injector.get(Al),R=a.create(ge.NULL,[],l||a.selector,U),Z=R.location.nativeElement,r=R.injector.get(wM,null);return r?.registerApplication(Z),R.onDestroy(()=>{this.detachView(R.hostView),sN(this.components,R),r?.unregisterApplication(Z)}),this._loadComponent(R),R}tick(){if(this._runningTick)throw new k(101,!1);try{this._runningTick=!0;for(let t of this._views)t.detectChanges()}catch(t){this._zone.runOutsideAngular(()=>this._exceptionHandler.handleError(t))}finally{this._runningTick=!1}}attachView(t){const l=t;this._views.push(l),l.attachToAppRef(this)}detachView(t){const l=t;sN(this._views,l),l.detachFromAppRef()}_loadComponent(t){this.attachView(t.hostView),this.tick(),this.components.push(t),this._injector.get(jM,[]).concat(this._bootstrapListeners).forEach(V=>V(t))}ngOnDestroy(){if(!this._destroyed)try{this._destroyListeners.forEach(t=>t()),this._views.slice().forEach(t=>t.destroy()),this._onMicrotaskEmptySubscription.unsubscribe()}finally{this._destroyed=!0,this._views=[],this._bootstrapListeners=[],this._destroyListeners=[]}}onDestroy(t){return this._destroyListeners.push(t),()=>sN(this._destroyListeners,t)}destroy(){if(this._destroyed)throw new k(406,!1);const t=this._injector;t.destroy&&!t.destroyed&&t.destroy()}get viewCount(){return this._views.length}warnIfDestroyed(){}}return n.\u0275fac=function(t){return new(t||n)(h(_),h(il),h(sl))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();function sN(n,e){const t=n.indexOf(e);t>-1&&n.splice(t,1)}let e1=!0,t1=!1,Dn=(()=>{class n{}return n.__NG_ELEMENT_ID__=Ib,n})();function Ib(n){return function fb(n,e,t){if(cU(n)&&!t){const l=Qt(n.index,e);return new Va(l,l)}return 47&n.type?new Va(e[16],e):null}(Oe(),m(),16==(16&n))}class d1{constructor(){}supports(e){return aa(e)}create(e){return new qb(e)}}const _b=(n,e)=>e;class qb{constructor(e){this.length=0,this._linkedRecords=null,this._unlinkedRecords=null,this._previousItHead=null,this._itHead=null,this._itTail=null,this._additionsHead=null,this._additionsTail=null,this._movesHead=null,this._movesTail=null,this._removalsHead=null,this._removalsTail=null,this._identityChangesHead=null,this._identityChangesTail=null,this._trackByFn=e||_b}forEachItem(e){let t;for(t=this._itHead;null!==t;t=t._next)e(t)}forEachOperation(e){let t=this._itHead,l=this._removalsHead,V=0,d=null;for(;t||l;){const a=!l||t&&t.currentIndex<U1(l,V,d)?t:l,U=U1(a,V,d),N=a.currentIndex;if(a===l)V--,l=l._nextRemoved;else if(t=t._next,null==a.previousIndex)V++;else{d||(d=[]);const R=U-V,Z=N-V;if(R!=Z){for(let c=0;c<R;c++){const i=c<d.length?d[c]:d[c]=0,o=i+c;Z<=o&&o<R&&(d[c]=i+1)}d[a.previousIndex]=Z-R}}U!==N&&e(a,U,N)}}forEachPreviousItem(e){let t;for(t=this._previousItHead;null!==t;t=t._nextPrevious)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachMovedItem(e){let t;for(t=this._movesHead;null!==t;t=t._nextMoved)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}forEachIdentityChange(e){let t;for(t=this._identityChangesHead;null!==t;t=t._nextIdentityChange)e(t)}diff(e){if(null==e&&(e=[]),!aa(e))throw new k(900,!1);return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let V,d,a,t=this._itHead,l=!1;if(Array.isArray(e)){this.length=e.length;for(let U=0;U<this.length;U++)d=e[U],a=this._trackByFn(U,d),null!==t&&Object.is(t.trackById,a)?(l&&(t=this._verifyReinsertion(t,d,a,U)),Object.is(t.item,d)||this._addIdentityChange(t,d)):(t=this._mismatch(t,d,a,U),l=!0),t=t._next}else V=0,function Y3(n,e){if(Array.isArray(n))for(let t=0;t<n.length;t++)e(n[t]);else{const t=n[Ll()]();let l;for(;!(l=t.next()).done;)e(l.value)}}(e,U=>{a=this._trackByFn(V,U),null!==t&&Object.is(t.trackById,a)?(l&&(t=this._verifyReinsertion(t,U,a,V)),Object.is(t.item,U)||this._addIdentityChange(t,U)):(t=this._mismatch(t,U,a,V),l=!0),t=t._next,V++}),this.length=V;return this._truncate(t),this.collection=e,this.isDirty}get isDirty(){return null!==this._additionsHead||null!==this._movesHead||null!==this._removalsHead||null!==this._identityChangesHead}_reset(){if(this.isDirty){let e;for(e=this._previousItHead=this._itHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._additionsHead;null!==e;e=e._nextAdded)e.previousIndex=e.currentIndex;for(this._additionsHead=this._additionsTail=null,e=this._movesHead;null!==e;e=e._nextMoved)e.previousIndex=e.currentIndex;this._movesHead=this._movesTail=null,this._removalsHead=this._removalsTail=null,this._identityChangesHead=this._identityChangesTail=null}}_mismatch(e,t,l,V){let d;return null===e?d=this._itTail:(d=e._prev,this._remove(e)),null!==(e=null===this._unlinkedRecords?null:this._unlinkedRecords.get(l,null))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._reinsertAfter(e,d,V)):null!==(e=null===this._linkedRecords?null:this._linkedRecords.get(l,V))?(Object.is(e.item,t)||this._addIdentityChange(e,t),this._moveAfter(e,d,V)):e=this._addAfter(new Ab(t,l),d,V),e}_verifyReinsertion(e,t,l,V){let d=null===this._unlinkedRecords?null:this._unlinkedRecords.get(l,null);return null!==d?e=this._reinsertAfter(d,e._prev,V):e.currentIndex!=V&&(e.currentIndex=V,this._addToMoves(e,V)),e}_truncate(e){for(;null!==e;){const t=e._next;this._addToRemovals(this._unlink(e)),e=t}null!==this._unlinkedRecords&&this._unlinkedRecords.clear(),null!==this._additionsTail&&(this._additionsTail._nextAdded=null),null!==this._movesTail&&(this._movesTail._nextMoved=null),null!==this._itTail&&(this._itTail._next=null),null!==this._removalsTail&&(this._removalsTail._nextRemoved=null),null!==this._identityChangesTail&&(this._identityChangesTail._nextIdentityChange=null)}_reinsertAfter(e,t,l){null!==this._unlinkedRecords&&this._unlinkedRecords.remove(e);const V=e._prevRemoved,d=e._nextRemoved;return null===V?this._removalsHead=d:V._nextRemoved=d,null===d?this._removalsTail=V:d._prevRemoved=V,this._insertAfter(e,t,l),this._addToMoves(e,l),e}_moveAfter(e,t,l){return this._unlink(e),this._insertAfter(e,t,l),this._addToMoves(e,l),e}_addAfter(e,t,l){return this._insertAfter(e,t,l),this._additionsTail=null===this._additionsTail?this._additionsHead=e:this._additionsTail._nextAdded=e,e}_insertAfter(e,t,l){const V=null===t?this._itHead:t._next;return e._next=V,e._prev=t,null===V?this._itTail=e:V._prev=e,null===t?this._itHead=e:t._next=e,null===this._linkedRecords&&(this._linkedRecords=new a1),this._linkedRecords.put(e),e.currentIndex=l,e}_remove(e){return this._addToRemovals(this._unlink(e))}_unlink(e){null!==this._linkedRecords&&this._linkedRecords.remove(e);const t=e._prev,l=e._next;return null===t?this._itHead=l:t._next=l,null===l?this._itTail=t:l._prev=t,e}_addToMoves(e,t){return e.previousIndex===t||(this._movesTail=null===this._movesTail?this._movesHead=e:this._movesTail._nextMoved=e),e}_addToRemovals(e){return null===this._unlinkedRecords&&(this._unlinkedRecords=new a1),this._unlinkedRecords.put(e),e.currentIndex=null,e._nextRemoved=null,null===this._removalsTail?(this._removalsTail=this._removalsHead=e,e._prevRemoved=null):(e._prevRemoved=this._removalsTail,this._removalsTail=this._removalsTail._nextRemoved=e),e}_addIdentityChange(e,t){return e.item=t,this._identityChangesTail=null===this._identityChangesTail?this._identityChangesHead=e:this._identityChangesTail._nextIdentityChange=e,e}}class Ab{constructor(e,t){this.item=e,this.trackById=t,this.currentIndex=null,this.previousIndex=null,this._nextPrevious=null,this._prev=null,this._next=null,this._prevDup=null,this._nextDup=null,this._prevRemoved=null,this._nextRemoved=null,this._nextAdded=null,this._nextMoved=null,this._nextIdentityChange=null}}class $b{constructor(){this._head=null,this._tail=null}add(e){null===this._head?(this._head=this._tail=e,e._nextDup=null,e._prevDup=null):(this._tail._nextDup=e,e._prevDup=this._tail,e._nextDup=null,this._tail=e)}get(e,t){let l;for(l=this._head;null!==l;l=l._nextDup)if((null===t||t<=l.currentIndex)&&Object.is(l.trackById,e))return l;return null}remove(e){const t=e._prevDup,l=e._nextDup;return null===t?this._head=l:t._nextDup=l,null===l?this._tail=t:l._prevDup=t,null===this._head}}class a1{constructor(){this.map=new Map}put(e){const t=e.trackById;let l=this.map.get(t);l||(l=new $b,this.map.set(t,l)),l.add(e)}get(e,t){const V=this.map.get(e);return V?V.get(e,t):null}remove(e){const t=e.trackById;return this.map.get(t).remove(e)&&this.map.delete(t),e}get isEmpty(){return 0===this.map.size}clear(){this.map.clear()}}function U1(n,e,t){const l=n.previousIndex;if(null===l)return l;let V=0;return t&&l<t.length&&(V=t[l]),l+e+V}class N1{constructor(){}supports(e){return e instanceof Map||Kr(e)}create(){return new eu}}class eu{constructor(){this._records=new Map,this._mapHead=null,this._appendAfter=null,this._previousMapHead=null,this._changesHead=null,this._changesTail=null,this._additionsHead=null,this._additionsTail=null,this._removalsHead=null,this._removalsTail=null}get isDirty(){return null!==this._additionsHead||null!==this._changesHead||null!==this._removalsHead}forEachItem(e){let t;for(t=this._mapHead;null!==t;t=t._next)e(t)}forEachPreviousItem(e){let t;for(t=this._previousMapHead;null!==t;t=t._nextPrevious)e(t)}forEachChangedItem(e){let t;for(t=this._changesHead;null!==t;t=t._nextChanged)e(t)}forEachAddedItem(e){let t;for(t=this._additionsHead;null!==t;t=t._nextAdded)e(t)}forEachRemovedItem(e){let t;for(t=this._removalsHead;null!==t;t=t._nextRemoved)e(t)}diff(e){if(e){if(!(e instanceof Map||Kr(e)))throw new k(900,!1)}else e=new Map;return this.check(e)?this:null}onDestroy(){}check(e){this._reset();let t=this._mapHead;if(this._appendAfter=null,this._forEach(e,(l,V)=>{if(t&&t.key===V)this._maybeAddToChanges(t,l),this._appendAfter=t,t=t._next;else{const d=this._getOrCreateRecordForKey(V,l);t=this._insertBeforeOrAppend(t,d)}}),t){t._prev&&(t._prev._next=null),this._removalsHead=t;for(let l=t;null!==l;l=l._nextRemoved)l===this._mapHead&&(this._mapHead=null),this._records.delete(l.key),l._nextRemoved=l._next,l.previousValue=l.currentValue,l.currentValue=null,l._prev=null,l._next=null}return this._changesTail&&(this._changesTail._nextChanged=null),this._additionsTail&&(this._additionsTail._nextAdded=null),this.isDirty}_insertBeforeOrAppend(e,t){if(e){const l=e._prev;return t._next=e,t._prev=l,e._prev=t,l&&(l._next=t),e===this._mapHead&&(this._mapHead=t),this._appendAfter=e,e}return this._appendAfter?(this._appendAfter._next=t,t._prev=this._appendAfter):this._mapHead=t,this._appendAfter=t,null}_getOrCreateRecordForKey(e,t){if(this._records.has(e)){const V=this._records.get(e);this._maybeAddToChanges(V,t);const d=V._prev,a=V._next;return d&&(d._next=a),a&&(a._prev=d),V._next=null,V._prev=null,V}const l=new tu(e);return this._records.set(e,l),l.currentValue=t,this._addToAdditions(l),l}_reset(){if(this.isDirty){let e;for(this._previousMapHead=this._mapHead,e=this._previousMapHead;null!==e;e=e._next)e._nextPrevious=e._next;for(e=this._changesHead;null!==e;e=e._nextChanged)e.previousValue=e.currentValue;for(e=this._additionsHead;null!=e;e=e._nextAdded)e.previousValue=e.currentValue;this._changesHead=this._changesTail=null,this._additionsHead=this._additionsTail=null,this._removalsHead=null}}_maybeAddToChanges(e,t){Object.is(t,e.currentValue)||(e.previousValue=e.currentValue,e.currentValue=t,this._addToChanges(e))}_addToAdditions(e){null===this._additionsHead?this._additionsHead=this._additionsTail=e:(this._additionsTail._nextAdded=e,this._additionsTail=e)}_addToChanges(e){null===this._changesHead?this._changesHead=this._changesTail=e:(this._changesTail._nextChanged=e,this._changesTail=e)}_forEach(e,t){e instanceof Map?e.forEach(t):Object.keys(e).forEach(l=>t(e[l],l))}}class tu{constructor(e){this.key=e,this.previousValue=null,this.currentValue=null,this._nextPrevious=null,this._next=null,this._prev=null,this._nextAdded=null,this._nextRemoved=null,this._nextChanged=null}}function R1(){return new WN([new d1])}let WN=(()=>{class n{constructor(t){this.factories=t}static create(t,l){if(null!=l){const V=l.factories.slice();t=t.concat(V)}return new n(t)}static extend(t){return{provide:n,useFactory:l=>n.create(t,l||R1()),deps:[[n,new OV,new gn]]}}find(t){const l=this.factories.find(V=>V.supports(t));if(null!=l)return l;throw new k(901,!1)}}return n.\u0275prov=S({token:n,providedIn:"root",factory:R1}),n})();function Z1(){return new Wa([new N1])}let Wa=(()=>{class n{constructor(t){this.factories=t}static create(t,l){if(l){const V=l.factories.slice();t=t.concat(V)}return new n(t)}static extend(t){return{provide:n,useFactory:l=>n.create(t,l||Z1()),deps:[[n,new OV,new gn]]}}find(t){const l=this.factories.find(V=>V.supports(t));if(l)return l;throw new k(901,!1)}}return n.\u0275prov=S({token:n,providedIn:"root",factory:Z1}),n})();const Vu=LM(null,"core",[]);let du=(()=>{class n{constructor(t){}}return n.\u0275fac=function(t){return new(t||n)(h(tV))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})(),FN=null;function pl(){return FN}const w=new E("DocumentToken");let xc=(()=>{class n{historyGo(t){throw new Error("Not implemented")}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:function(){return function Ru(){return h(r1)}()},providedIn:"platform"}),n})();const Zu=new E("Location Initialized");let r1=(()=>{class n extends xc{constructor(t){super(),this._doc=t,this._init()}_init(){this.location=window.location,this._history=window.history}getBaseHrefFromDOM(){return pl().getBaseHref(this._doc)}onPopState(t){const l=pl().getGlobalEventTarget(this._doc,"window");return l.addEventListener("popstate",t,!1),()=>l.removeEventListener("popstate",t)}onHashChange(t){const l=pl().getGlobalEventTarget(this._doc,"window");return l.addEventListener("hashchange",t,!1),()=>l.removeEventListener("hashchange",t)}get href(){return this.location.href}get protocol(){return this.location.protocol}get hostname(){return this.location.hostname}get port(){return this.location.port}get pathname(){return this.location.pathname}get search(){return this.location.search}get hash(){return this.location.hash}set pathname(t){this.location.pathname=t}pushState(t,l,V){c1()?this._history.pushState(t,l,V):this.location.hash=V}replaceState(t,l,V){c1()?this._history.replaceState(t,l,V):this.location.hash=V}forward(){this._history.forward()}back(){this._history.back()}historyGo(t=0){this._history.go(t)}getState(){return this._history.state}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:function(){return function ru(){return new r1(h(w))}()},providedIn:"platform"}),n})();function c1(){return!!window.history.pushState}function Xc(n,e){if(0==n.length)return e;if(0==e.length)return n;let t=0;return n.endsWith("/")&&t++,e.startsWith("/")&&t++,2==t?n+e.substring(1):1==t?n+e:n+"/"+e}function o1(n){const e=n.match(/#|\?|$/),t=e&&e.index||n.length;return n.slice(0,t-("/"===n[t-1]?1:0))+n.slice(t)}function qn(n){return n&&"?"!==n[0]?"?"+n:n}let lV=(()=>{class n{historyGo(t){throw new Error("Not implemented")}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:function(){return me(T1)},providedIn:"root"}),n})();const s1=new E("appBaseHref");let T1=(()=>{class n extends lV{constructor(t,l){super(),this._platformLocation=t,this._removeListenerFns=[],this._baseHref=l??this._platformLocation.getBaseHrefFromDOM()??me(w).location?.origin??""}ngOnDestroy(){for(;this._removeListenerFns.length;)this._removeListenerFns.pop()()}onPopState(t){this._removeListenerFns.push(this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t))}getBaseHref(){return this._baseHref}prepareExternalUrl(t){return Xc(this._baseHref,t)}path(t=!1){const l=this._platformLocation.pathname+qn(this._platformLocation.search),V=this._platformLocation.hash;return V&&t?`${l}${V}`:l}pushState(t,l,V,d){const a=this.prepareExternalUrl(V+qn(d));this._platformLocation.pushState(t,l,a)}replaceState(t,l,V,d){const a=this.prepareExternalUrl(V+qn(d));this._platformLocation.replaceState(t,l,a)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}getState(){return this._platformLocation.getState()}historyGo(t=0){this._platformLocation.historyGo?.(t)}}return n.\u0275fac=function(t){return new(t||n)(h(xc),h(s1,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),cu=(()=>{class n extends lV{constructor(t,l){super(),this._platformLocation=t,this._baseHref="",this._removeListenerFns=[],null!=l&&(this._baseHref=l)}ngOnDestroy(){for(;this._removeListenerFns.length;)this._removeListenerFns.pop()()}onPopState(t){this._removeListenerFns.push(this._platformLocation.onPopState(t),this._platformLocation.onHashChange(t))}getBaseHref(){return this._baseHref}path(t=!1){let l=this._platformLocation.hash;return null==l&&(l="#"),l.length>0?l.substring(1):l}prepareExternalUrl(t){const l=Xc(this._baseHref,t);return l.length>0?"#"+l:l}pushState(t,l,V,d){let a=this.prepareExternalUrl(V+qn(d));0==a.length&&(a=this._platformLocation.pathname),this._platformLocation.pushState(t,l,a)}replaceState(t,l,V,d){let a=this.prepareExternalUrl(V+qn(d));0==a.length&&(a=this._platformLocation.pathname),this._platformLocation.replaceState(t,l,a)}forward(){this._platformLocation.forward()}back(){this._platformLocation.back()}getState(){return this._platformLocation.getState()}historyGo(t=0){this._platformLocation.historyGo?.(t)}}return n.\u0275fac=function(t){return new(t||n)(h(xc),h(s1,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),MN=(()=>{class n{constructor(t){this._subject=new A,this._urlChangeListeners=[],this._urlChangeSubscription=null,this._locationStrategy=t;const l=this._locationStrategy.getBaseHref();this._baseHref=o1(h1(l)),this._locationStrategy.onPopState(V=>{this._subject.emit({url:this.path(!0),pop:!0,state:V.state,type:V.type})})}ngOnDestroy(){this._urlChangeSubscription?.unsubscribe(),this._urlChangeListeners=[]}path(t=!1){return this.normalize(this._locationStrategy.path(t))}getState(){return this._locationStrategy.getState()}isCurrentPathEqualTo(t,l=""){return this.path()==this.normalize(t+qn(l))}normalize(t){return n.stripTrailingSlash(function ou(n,e){return n&&e.startsWith(n)?e.substring(n.length):e}(this._baseHref,h1(t)))}prepareExternalUrl(t){return t&&"/"!==t[0]&&(t="/"+t),this._locationStrategy.prepareExternalUrl(t)}go(t,l="",V=null){this._locationStrategy.pushState(V,"",t,l),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+qn(l)),V)}replaceState(t,l="",V=null){this._locationStrategy.replaceState(V,"",t,l),this._notifyUrlChangeListeners(this.prepareExternalUrl(t+qn(l)),V)}forward(){this._locationStrategy.forward()}back(){this._locationStrategy.back()}historyGo(t=0){this._locationStrategy.historyGo?.(t)}onUrlChange(t){return this._urlChangeListeners.push(t),this._urlChangeSubscription||(this._urlChangeSubscription=this.subscribe(l=>{this._notifyUrlChangeListeners(l.url,l.state)})),()=>{const l=this._urlChangeListeners.indexOf(t);this._urlChangeListeners.splice(l,1),0===this._urlChangeListeners.length&&(this._urlChangeSubscription?.unsubscribe(),this._urlChangeSubscription=null)}}_notifyUrlChangeListeners(t="",l){this._urlChangeListeners.forEach(V=>V(t,l))}subscribe(t,l,V){return this._subject.subscribe({next:t,error:l,complete:V})}}return n.normalizeQueryParams=qn,n.joinWithSlash=Xc,n.stripTrailingSlash=o1,n.\u0275fac=function(t){return new(t||n)(h(lV))},n.\u0275prov=S({token:n,factory:function(){return function iu(){return new MN(h(lV))}()},providedIn:"root"}),n})();function h1(n){return n.replace(/\/index.html$/,"")}function Y1(n,e){e=encodeURIComponent(e);for(const t of n.split(";")){const l=t.indexOf("="),[V,d]=-1==l?[t,""]:[t.slice(0,l),t.slice(l+1)];if(V.trim()===e)return decodeURIComponent(d)}return null}let J1=(()=>{class n{constructor(t,l,V,d){this._iterableDiffers=t,this._keyValueDiffers=l,this._ngEl=V,this._renderer=d,this._iterableDiffer=null,this._keyValueDiffer=null,this._initialClasses=[],this._rawClass=null}set klass(t){this._removeClasses(this._initialClasses),this._initialClasses="string"==typeof t?t.split(/\s+/):[],this._applyClasses(this._initialClasses),this._applyClasses(this._rawClass)}set ngClass(t){this._removeClasses(this._rawClass),this._applyClasses(this._initialClasses),this._iterableDiffer=null,this._keyValueDiffer=null,this._rawClass="string"==typeof t?t.split(/\s+/):t,this._rawClass&&(aa(this._rawClass)?this._iterableDiffer=this._iterableDiffers.find(this._rawClass).create():this._keyValueDiffer=this._keyValueDiffers.find(this._rawClass).create())}ngDoCheck(){if(this._iterableDiffer){const t=this._iterableDiffer.diff(this._rawClass);t&&this._applyIterableChanges(t)}else if(this._keyValueDiffer){const t=this._keyValueDiffer.diff(this._rawClass);t&&this._applyKeyValueChanges(t)}}_applyKeyValueChanges(t){t.forEachAddedItem(l=>this._toggleClass(l.key,l.currentValue)),t.forEachChangedItem(l=>this._toggleClass(l.key,l.currentValue)),t.forEachRemovedItem(l=>{l.previousValue&&this._toggleClass(l.key,!1)})}_applyIterableChanges(t){t.forEachAddedItem(l=>{if("string"!=typeof l.item)throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${se(l.item)}`);this._toggleClass(l.item,!0)}),t.forEachRemovedItem(l=>this._toggleClass(l.item,!1))}_applyClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(l=>this._toggleClass(l,!0)):Object.keys(t).forEach(l=>this._toggleClass(l,!!t[l])))}_removeClasses(t){t&&(Array.isArray(t)||t instanceof Set?t.forEach(l=>this._toggleClass(l,!1)):Object.keys(t).forEach(l=>this._toggleClass(l,!1)))}_toggleClass(t,l){(t=t.trim())&&t.split(/\s+/g).forEach(V=>{l?this._renderer.addClass(this._ngEl.nativeElement,V):this._renderer.removeClass(this._ngEl.nativeElement,V)})}}return n.\u0275fac=function(t){return new(t||n)(M(WN),M(Wa),M(we),M(BU))},n.\u0275dir=Me({type:n,selectors:[["","ngClass",""]],inputs:{klass:["class","klass"],ngClass:"ngClass"},standalone:!0}),n})();class Au{constructor(e,t,l,V){this.$implicit=e,this.ngForOf=t,this.index=l,this.count=V}get first(){return 0===this.index}get last(){return this.index===this.count-1}get even(){return this.index%2==0}get odd(){return!this.even}}let b1=(()=>{class n{constructor(t,l,V){this._viewContainer=t,this._template=l,this._differs=V,this._ngForOf=null,this._ngForOfDirty=!0,this._differ=null}set ngForOf(t){this._ngForOf=t,this._ngForOfDirty=!0}set ngForTrackBy(t){this._trackByFn=t}get ngForTrackBy(){return this._trackByFn}set ngForTemplate(t){t&&(this._template=t)}ngDoCheck(){if(this._ngForOfDirty){this._ngForOfDirty=!1;const t=this._ngForOf;!this._differ&&t&&(this._differ=this._differs.find(t).create(this.ngForTrackBy))}if(this._differ){const t=this._differ.diff(this._ngForOf);t&&this._applyChanges(t)}}_applyChanges(t){const l=this._viewContainer;t.forEachOperation((V,d,a)=>{if(null==V.previousIndex)l.createEmbeddedView(this._template,new Au(V.item,this._ngForOf,-1,-1),null===a?void 0:a);else if(null==a)l.remove(null===d?void 0:d);else if(null!==d){const U=l.get(d);l.move(U,a),u1(U,V)}});for(let V=0,d=l.length;V<d;V++){const U=l.get(V).context;U.index=V,U.count=d,U.ngForOf=this._ngForOf}t.forEachIdentityChange(V=>{u1(l.get(V.currentIndex),V)})}static ngTemplateContextGuard(t,l){return!0}}return n.\u0275fac=function(t){return new(t||n)(M(Mt),M(on),M(WN))},n.\u0275dir=Me({type:n,selectors:[["","ngFor","","ngForOf",""]],inputs:{ngForOf:"ngForOf",ngForTrackBy:"ngForTrackBy",ngForTemplate:"ngForTemplate"},standalone:!0}),n})();function u1(n,e){n.context.$implicit=e.item}let ma=(()=>{class n{constructor(t,l){this._viewContainer=t,this._context=new eG,this._thenTemplateRef=null,this._elseTemplateRef=null,this._thenViewRef=null,this._elseViewRef=null,this._thenTemplateRef=l}set ngIf(t){this._context.$implicit=this._context.ngIf=t,this._updateView()}set ngIfThen(t){G1("ngIfThen",t),this._thenTemplateRef=t,this._thenViewRef=null,this._updateView()}set ngIfElse(t){G1("ngIfElse",t),this._elseTemplateRef=t,this._elseViewRef=null,this._updateView()}_updateView(){this._context.$implicit?this._thenViewRef||(this._viewContainer.clear(),this._elseViewRef=null,this._thenTemplateRef&&(this._thenViewRef=this._viewContainer.createEmbeddedView(this._thenTemplateRef,this._context))):this._elseViewRef||(this._viewContainer.clear(),this._thenViewRef=null,this._elseTemplateRef&&(this._elseViewRef=this._viewContainer.createEmbeddedView(this._elseTemplateRef,this._context)))}static ngTemplateContextGuard(t,l){return!0}}return n.\u0275fac=function(t){return new(t||n)(M(Mt),M(on))},n.\u0275dir=Me({type:n,selectors:[["","ngIf",""]],inputs:{ngIf:"ngIf",ngIfThen:"ngIfThen",ngIfElse:"ngIfElse"},standalone:!0}),n})();class eG{constructor(){this.$implicit=null,this.ngIf=null}}function G1(n,e){if(e&&!e.createEmbeddedView)throw new Error(`${n} must be a TemplateRef, but received '${se(e)}'.`)}let x1=(()=>{class n{constructor(t,l,V){this._ngEl=t,this._differs=l,this._renderer=V,this._ngStyle=null,this._differ=null}set ngStyle(t){this._ngStyle=t,!this._differ&&t&&(this._differ=this._differs.find(t).create())}ngDoCheck(){if(this._differ){const t=this._differ.diff(this._ngStyle);t&&this._applyChanges(t)}}_setStyle(t,l){const[V,d]=t.split("."),a=-1===V.indexOf("-")?void 0:ht.DashCase;null!=l?this._renderer.setStyle(this._ngEl.nativeElement,V,d?`${l}${d}`:l,a):this._renderer.removeStyle(this._ngEl.nativeElement,V,a)}_applyChanges(t){t.forEachRemovedItem(l=>this._setStyle(l.key,null)),t.forEachAddedItem(l=>this._setStyle(l.key,l.currentValue)),t.forEachChangedItem(l=>this._setStyle(l.key,l.currentValue))}}return n.\u0275fac=function(t){return new(t||n)(M(we),M(Wa),M(BU))},n.\u0275dir=Me({type:n,selectors:[["","ngStyle",""]],inputs:{ngStyle:"ngStyle"},standalone:!0}),n})();class dG{createSubscription(e,t){return e.subscribe({next:t,error:l=>{throw l}})}dispose(e){e.unsubscribe()}}class aG{createSubscription(e,t){return e.then(t,l=>{throw l})}dispose(e){}}const UG=new aG,NG=new dG;let X1=(()=>{class n{constructor(t){this._latestValue=null,this._subscription=null,this._obj=null,this._strategy=null,this._ref=t}ngOnDestroy(){this._subscription&&this._dispose(),this._ref=null}transform(t){return this._obj?t!==this._obj?(this._dispose(),this.transform(t)):this._latestValue:(t&&this._subscribe(t),this._latestValue)}_subscribe(t){this._obj=t,this._strategy=this._selectStrategy(t),this._subscription=this._strategy.createSubscription(t,l=>this._updateLatestValue(t,l))}_selectStrategy(t){if(AU(t))return UG;if(JW(t))return NG;throw function hn(n,e){return new k(2100,!1)}()}_dispose(){this._strategy.dispose(this._subscription),this._latestValue=null,this._subscription=null,this._obj=null}_updateLatestValue(t,l){t===this._obj&&(this._latestValue=l,this._ref.markForCheck())}}return n.\u0275fac=function(t){return new(t||n)(M(Dn,16))},n.\u0275pipe=st({name:"async",type:n,pure:!1,standalone:!0}),n})(),VV=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})();const j1="browser";let zG=(()=>{class n{}return n.\u0275prov=S({token:n,providedIn:"root",factory:()=>new bG(h(w),window)}),n})();class bG{constructor(e,t){this.document=e,this.window=t,this.offset=()=>[0,0]}setOffset(e){this.offset=Array.isArray(e)?()=>e:e}getScrollPosition(){return this.supportsScrolling()?[this.window.pageXOffset,this.window.pageYOffset]:[0,0]}scrollToPosition(e){this.supportsScrolling()&&this.window.scrollTo(e[0],e[1])}scrollToAnchor(e){if(!this.supportsScrolling())return;const t=function uG(n,e){const t=n.getElementById(e)||n.getElementsByName(e)[0];if(t)return t;if("function"==typeof n.createTreeWalker&&n.body&&(n.body.createShadowRoot||n.body.attachShadow)){const l=n.createTreeWalker(n.body,NodeFilter.SHOW_ELEMENT);let V=l.currentNode;for(;V;){const d=V.shadowRoot;if(d){const a=d.getElementById(e)||d.querySelector(`[name="${e}"]`);if(a)return a}V=l.nextNode()}}return null}(this.document,e);t&&(this.scrollToElement(t),t.focus())}setHistoryScrollRestoration(e){if(this.supportScrollRestoration()){const t=this.window.history;t&&t.scrollRestoration&&(t.scrollRestoration=e)}}scrollToElement(e){const t=e.getBoundingClientRect(),l=t.left+this.window.pageXOffset,V=t.top+this.window.pageYOffset,d=this.offset();this.window.scrollTo(l-d[0],V-d[1])}supportScrollRestoration(){try{if(!this.supportsScrolling())return!1;const e=H1(this.window.history)||H1(Object.getPrototypeOf(this.window.history));return!(!e||!e.writable&&!e.set)}catch{return!1}}supportsScrolling(){try{return!!this.window&&!!this.window.scrollTo&&"pageXOffset"in this.window}catch{return!1}}}function H1(n){return Object.getOwnPropertyDescriptor(n,"scrollRestoration")}class B1{}class qc extends class VD extends class Nu{}{constructor(){super(...arguments),this.supportsDOMEvents=!0}}{static makeCurrent(){!function Uu(n){FN||(FN=n)}(new qc)}onAndCancel(e,t,l){return e.addEventListener(t,l,!1),()=>{e.removeEventListener(t,l,!1)}}dispatchEvent(e,t){e.dispatchEvent(t)}remove(e){e.parentNode&&e.parentNode.removeChild(e)}createElement(e,t){return(t=t||this.getDefaultDocument()).createElement(e)}createHtmlDocument(){return document.implementation.createHTMLDocument("fakeTitle")}getDefaultDocument(){return document}isElementNode(e){return e.nodeType===Node.ELEMENT_NODE}isShadowRoot(e){return e instanceof DocumentFragment}getGlobalEventTarget(e,t){return"window"===t?window:"document"===t?e:"body"===t?e.body:null}getBaseHref(e){const t=function dD(){return ka=ka||document.querySelector("base"),ka?ka.getAttribute("href"):null}();return null==t?null:function aD(n){GN=GN||document.createElement("a"),GN.setAttribute("href",n);const e=GN.pathname;return"/"===e.charAt(0)?e:`/${e}`}(t)}resetBaseElement(){ka=null}getUserAgent(){return window.navigator.userAgent}getCookie(e){return Y1(document.cookie,e)}}let GN,ka=null;const I1=new E("TRANSITION_ID"),ND=[{provide:rN,useFactory:function UD(n,e,t){return()=>{t.get(cN).donePromise.then(()=>{const l=pl(),V=e.querySelectorAll(`style[ng-transition="${n}"]`);for(let d=0;d<V.length;d++)l.remove(V[d])})}},deps:[I1,w,ge],multi:!0}];let ZD=(()=>{class n{build(){return new XMLHttpRequest}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const DN=new E("EventManagerPlugins");let xN=(()=>{class n{constructor(t,l){this._zone=l,this._eventNameToPlugin=new Map,t.forEach(V=>V.manager=this),this._plugins=t.slice().reverse()}addEventListener(t,l,V){return this._findPluginFor(l).addEventListener(t,l,V)}addGlobalEventListener(t,l,V){return this._findPluginFor(l).addGlobalEventListener(t,l,V)}getZone(){return this._zone}_findPluginFor(t){const l=this._eventNameToPlugin.get(t);if(l)return l;const V=this._plugins;for(let d=0;d<V.length;d++){const a=V[d];if(a.supports(t))return this._eventNameToPlugin.set(t,a),a}throw new Error(`No event manager plugin found for event ${t}`)}}return n.\u0275fac=function(t){return new(t||n)(h(DN),h(_))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();class f1{constructor(e){this._doc=e}addGlobalEventListener(e,t,l){const V=pl().getGlobalEventTarget(this._doc,e);if(!V)throw new Error(`Unsupported event target ${V} for event ${t}`);return this.addEventListener(V,t,l)}}let L1=(()=>{class n{constructor(){this._stylesSet=new Set}addStyles(t){const l=new Set;t.forEach(V=>{this._stylesSet.has(V)||(this._stylesSet.add(V),l.add(V))}),this.onStylesAdded(l)}onStylesAdded(t){}getAllStyles(){return Array.from(this._stylesSet)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),Ea=(()=>{class n extends L1{constructor(t){super(),this._doc=t,this._hostNodes=new Map,this._hostNodes.set(t.head,[])}_addStylesToHost(t,l,V){t.forEach(d=>{const a=this._doc.createElement("style");a.textContent=d,V.push(l.appendChild(a))})}addHost(t){const l=[];this._addStylesToHost(this._stylesSet,t,l),this._hostNodes.set(t,l)}removeHost(t){const l=this._hostNodes.get(t);l&&l.forEach(C1),this._hostNodes.delete(t)}onStylesAdded(t){this._hostNodes.forEach((l,V)=>{this._addStylesToHost(t,V,l)})}ngOnDestroy(){this._hostNodes.forEach(t=>t.forEach(C1))}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();function C1(n){pl().remove(n)}const Ac={svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/",math:"http://www.w3.org/1998/MathML/"},$c=/%COMP%/g;function XN(n,e,t){for(let l=0;l<e.length;l++){let V=e[l];Array.isArray(V)?XN(n,V,t):(V=V.replace($c,n),t.push(V))}return t}function _1(n){return e=>{if("__ngUnwrap__"===e)return n;!1===n(e)&&(e.preventDefault(),e.returnValue=!1)}}let yN=(()=>{class n{constructor(t,l,V){this.eventManager=t,this.sharedStylesHost=l,this.appId=V,this.rendererByCompId=new Map,this.defaultRenderer=new ei(t)}createRenderer(t,l){if(!t||!l)return this.defaultRenderer;switch(l.encapsulation){case ln.Emulated:{let V=this.rendererByCompId.get(l.id);return V||(V=new TD(this.eventManager,this.sharedStylesHost,l,this.appId),this.rendererByCompId.set(l.id,V)),V.applyToHost(t),V}case 1:case ln.ShadowDom:return new hD(this.eventManager,this.sharedStylesHost,t,l);default:if(!this.rendererByCompId.has(l.id)){const V=XN(l.id,l.styles,[]);this.sharedStylesHost.addStyles(V),this.rendererByCompId.set(l.id,this.defaultRenderer)}return this.defaultRenderer}}begin(){}end(){}}return n.\u0275fac=function(t){return new(t||n)(h(xN),h(Ea),h(ha))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();class ei{constructor(e){this.eventManager=e,this.data=Object.create(null),this.destroyNode=null}destroy(){}createElement(e,t){return t?document.createElementNS(Ac[t]||t,e):document.createElement(e)}createComment(e){return document.createComment(e)}createText(e){return document.createTextNode(e)}appendChild(e,t){(A1(e)?e.content:e).appendChild(t)}insertBefore(e,t,l){e&&(A1(e)?e.content:e).insertBefore(t,l)}removeChild(e,t){e&&e.removeChild(t)}selectRootElement(e,t){let l="string"==typeof e?document.querySelector(e):e;if(!l)throw new Error(`The selector "${e}" did not match any elements`);return t||(l.textContent=""),l}parentNode(e){return e.parentNode}nextSibling(e){return e.nextSibling}setAttribute(e,t,l,V){if(V){t=V+":"+t;const d=Ac[V];d?e.setAttributeNS(d,t,l):e.setAttribute(t,l)}else e.setAttribute(t,l)}removeAttribute(e,t,l){if(l){const V=Ac[l];V?e.removeAttributeNS(V,t):e.removeAttribute(`${l}:${t}`)}else e.removeAttribute(t)}addClass(e,t){e.classList.add(t)}removeClass(e,t){e.classList.remove(t)}setStyle(e,t,l,V){V&(ht.DashCase|ht.Important)?e.style.setProperty(t,l,V&ht.Important?"important":""):e.style[t]=l}removeStyle(e,t,l){l&ht.DashCase?e.style.removeProperty(t):e.style[t]=""}setProperty(e,t,l){e[t]=l}setValue(e,t){e.nodeValue=t}listen(e,t,l){return"string"==typeof e?this.eventManager.addGlobalEventListener(e,t,_1(l)):this.eventManager.addEventListener(e,t,_1(l))}}function A1(n){return"TEMPLATE"===n.tagName&&void 0!==n.content}class TD extends ei{constructor(e,t,l,V){super(e),this.component=l;const d=XN(V+"-"+l.id,l.styles,[]);t.addStyles(d),this.contentAttr=function iD(n){return"_ngcontent-%COMP%".replace($c,n)}(V+"-"+l.id),this.hostAttr=function oD(n){return"_nghost-%COMP%".replace($c,n)}(V+"-"+l.id)}applyToHost(e){super.setAttribute(e,this.hostAttr,"")}createElement(e,t){const l=super.createElement(e,t);return super.setAttribute(l,this.contentAttr,""),l}}class hD extends ei{constructor(e,t,l,V){super(e),this.sharedStylesHost=t,this.hostEl=l,this.shadowRoot=l.attachShadow({mode:"open"}),this.sharedStylesHost.addHost(this.shadowRoot);const d=XN(V.id,V.styles,[]);for(let a=0;a<d.length;a++){const U=document.createElement("style");U.textContent=d[a],this.shadowRoot.appendChild(U)}}nodeOrShadowRoot(e){return e===this.hostEl?this.shadowRoot:e}destroy(){this.sharedStylesHost.removeHost(this.shadowRoot)}appendChild(e,t){return super.appendChild(this.nodeOrShadowRoot(e),t)}insertBefore(e,t,l){return super.insertBefore(this.nodeOrShadowRoot(e),t,l)}removeChild(e,t){return super.removeChild(this.nodeOrShadowRoot(e),t)}parentNode(e){return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(e)))}}let WD=(()=>{class n extends f1{constructor(t){super(t)}supports(t){return!0}addEventListener(t,l,V){return t.addEventListener(l,V,!1),()=>this.removeEventListener(t,l,V)}removeEventListener(t,l,V){return t.removeEventListener(l,V)}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const $1=["alt","control","meta","shift"],FD={"\b":"Backspace","\t":"Tab","\x7f":"Delete","\x1b":"Escape",Del:"Delete",Esc:"Escape",Left:"ArrowLeft",Right:"ArrowRight",Up:"ArrowUp",Down:"ArrowDown",Menu:"ContextMenu",Scroll:"ScrollLock",Win:"OS"},MD={alt:n=>n.altKey,control:n=>n.ctrlKey,meta:n=>n.metaKey,shift:n=>n.shiftKey};let mD=(()=>{class n extends f1{constructor(t){super(t)}supports(t){return null!=n.parseEventName(t)}addEventListener(t,l,V){const d=n.parseEventName(l),a=n.eventCallback(d.fullKey,V,this.manager.getZone());return this.manager.getZone().runOutsideAngular(()=>pl().onAndCancel(t,d.domEventName,a))}static parseEventName(t){const l=t.toLowerCase().split("."),V=l.shift();if(0===l.length||"keydown"!==V&&"keyup"!==V)return null;const d=n._normalizeKey(l.pop());let a="",U=l.indexOf("code");if(U>-1&&(l.splice(U,1),a="code."),$1.forEach(R=>{const Z=l.indexOf(R);Z>-1&&(l.splice(Z,1),a+=R+".")}),a+=d,0!=l.length||0===d.length)return null;const N={};return N.domEventName=V,N.fullKey=a,N}static matchEventFullKeyCode(t,l){let V=FD[t.key]||t.key,d="";return l.indexOf("code.")>-1&&(V=t.code,d="code."),!(null==V||!V)&&(V=V.toLowerCase()," "===V?V="space":"."===V&&(V="dot"),$1.forEach(a=>{a!==V&&(0,MD[a])(t)&&(d+=a+".")}),d+=V,d===l)}static eventCallback(t,l,V){return d=>{n.matchEventFullKeyCode(d,t)&&V.runGuarded(()=>l(d))}}static _normalizeKey(t){return"esc"===t?"escape":t}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const SD=LM(Vu,"browser",[{provide:iN,useValue:j1},{provide:yM,useValue:function pD(){qc.makeCurrent()},multi:!0},{provide:w,useFactory:function ED(){return function $2(n){dr=n}(document),document},deps:[]}]),n0=new E(""),l0=[{provide:oN,useClass:class RD{addToWindow(e){Te.getAngularTestability=(l,V=!0)=>{const d=e.findTestabilityInTree(l,V);if(null==d)throw new Error("Could not find testability for element.");return d},Te.getAllAngularTestabilities=()=>e.getAllTestabilities(),Te.getAllAngularRootElements=()=>e.getAllRootElements(),Te.frameworkStabilizers||(Te.frameworkStabilizers=[]),Te.frameworkStabilizers.push(l=>{const V=Te.getAllAngularTestabilities();let d=V.length,a=!1;const U=function(N){a=a||N,d--,0==d&&l(a)};V.forEach(function(N){N.whenStable(U)})})}findTestabilityInTree(e,t,l){return null==t?null:e.getTestability(t)??(l?pl().isShadowRoot(t)?this.findTestabilityInTree(e,t.host,!0):this.findTestabilityInTree(e,t.parentElement,!0):null)}},deps:[]},{provide:wM,useClass:Sc,deps:[_,Yc,oN]},{provide:Sc,useClass:Sc,deps:[_,Yc,oN]}],V0=[{provide:ir,useValue:"root"},{provide:sl,useFactory:function kD(){return new sl},deps:[]},{provide:DN,useClass:WD,multi:!0,deps:[w,_,iN]},{provide:DN,useClass:mD,multi:!0,deps:[w]},{provide:yN,useClass:yN,deps:[xN,Ea,ha]},{provide:la,useExisting:yN},{provide:L1,useExisting:Ea},{provide:Ea,useClass:Ea,deps:[w]},{provide:xN,useClass:xN,deps:[DN,_]},{provide:B1,useClass:ZD,deps:[]},[]];let d0=(()=>{class n{constructor(t){}static withServerTransition(t){return{ngModule:n,providers:[{provide:ha,useValue:t.appId},{provide:I1,useExisting:ha},ND]}}}return n.\u0275fac=function(t){return new(t||n)(h(n0,12))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[...V0,...l0],imports:[VV,du]}),n})(),a0=(()=>{class n{constructor(t){this._doc=t}getTitle(){return this._doc.title}setTitle(t){this._doc.title=t||""}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:function(t){let l=null;return l=t?new t:function JD(){return new a0(h(w))}(),l},providedIn:"root"}),n})();typeof window<"u"&&window;const Vi={now:()=>(Vi.delegate||Date).now(),delegate:void 0};class XD extends u{constructor(e=1/0,t=1/0,l=Vi){super(),this._bufferSize=e,this._windowTime=t,this._timestampProvider=l,this._buffer=[],this._infiniteTimeWindow=!0,this._infiniteTimeWindow=t===1/0,this._bufferSize=Math.max(1,e),this._windowTime=Math.max(1,t)}next(e){const{isStopped:t,_buffer:l,_infiniteTimeWindow:V,_timestampProvider:d,_windowTime:a}=this;t||(l.push(e),!V&&l.push(d.now()+a)),this._trimBuffer(),super.next(e)}_subscribe(e){this._throwIfClosed(),this._trimBuffer();const t=this._innerSubscribe(e),{_infiniteTimeWindow:l,_buffer:V}=this,d=V.slice();for(let a=0;a<d.length&&!e.closed;a+=l?1:2)e.next(d[a]);return this._checkFinalizedStatuses(e),t}_trimBuffer(){const{_bufferSize:e,_timestampProvider:t,_buffer:l,_infiniteTimeWindow:V}=this,d=(V?1:2)*e;if(e<1/0&&d<l.length&&l.splice(0,l.length-d),!V){const a=t.now();let U=0;for(let N=1;N<l.length&&l[N]<=a;N+=2)U=N;U&&l.splice(0,U+1)}}}function Xt(n,e){return ze((t,l)=>{let V=null,d=0,a=!1;const U=()=>a&&!V&&l.complete();t.subscribe(pe(l,N=>{V?.unsubscribe();let R=0;const Z=d++;ot(n(N,Z)).subscribe(V=pe(l,r=>l.next(e?e(N,r,Z,R++):r),()=>{V=null,U()}))},()=>{a=!0,U()}))})}const jN={schedule(n,e){const t=setTimeout(n,e);return()=>clearTimeout(t)},scheduleBeforeRender(n){if(typeof window>"u")return jN.schedule(n,0);if(typeof window.requestAnimationFrame>"u")return jN.schedule(n,16);const e=window.requestAnimationFrame(n);return()=>window.cancelAnimationFrame(e)}};let di;function ID(n,e,t){let l=t;return function jD(n){return!!n&&n.nodeType===Node.ELEMENT_NODE}(n)&&e.some((V,d)=>!("*"===V||!function BD(n,e){if(!di){const t=Element.prototype;di=t.matches||t.matchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector}return n.nodeType===Node.ELEMENT_NODE&&di.call(n,e)}(n,V)||(l=d,0))),l}class LD{constructor(e,t){this.componentFactory=t.get(fn).resolveComponentFactory(e)}create(e){return new CD(this.componentFactory,e)}}class CD{constructor(e,t){this.componentFactory=e,this.injector=t,this.eventEmitters=new XD(1),this.events=this.eventEmitters.pipe(Xt(l=>pV(...l))),this.componentRef=null,this.viewChangeDetectorRef=null,this.inputChanges=null,this.hasInputChanges=!1,this.implementsOnChanges=!1,this.scheduledChangeDetectionFn=null,this.scheduledDestroyFn=null,this.initialInputValues=new Map,this.unchangedInputs=new Set(this.componentFactory.inputs.map(({propName:l})=>l)),this.ngZone=this.injector.get(_),this.elementZone=typeof Zone>"u"?null:this.ngZone.run(()=>Zone.current)}connect(e){this.runInZone(()=>{if(null!==this.scheduledDestroyFn)return this.scheduledDestroyFn(),void(this.scheduledDestroyFn=null);null===this.componentRef&&this.initializeComponent(e)})}disconnect(){this.runInZone(()=>{null===this.componentRef||null!==this.scheduledDestroyFn||(this.scheduledDestroyFn=jN.schedule(()=>{null!==this.componentRef&&(this.componentRef.destroy(),this.componentRef=null,this.viewChangeDetectorRef=null)},10))})}getInputValue(e){return this.runInZone(()=>null===this.componentRef?this.initialInputValues.get(e):this.componentRef.instance[e])}setInputValue(e,t){this.runInZone(()=>{null!==this.componentRef?function OD(n,e){return n===e||n!=n&&e!=e}(t,this.getInputValue(e))&&(void 0!==t||!this.unchangedInputs.has(e))||(this.recordInputChange(e,t),this.unchangedInputs.delete(e),this.hasInputChanges=!0,this.componentRef.instance[e]=t,this.scheduleDetectChanges()):this.initialInputValues.set(e,t)})}initializeComponent(e){const t=ge.create({providers:[],parent:this.injector}),l=function gD(n,e){const t=n.childNodes,l=e.map(()=>[]);let V=-1;e.some((d,a)=>"*"===d&&(V=a,!0));for(let d=0,a=t.length;d<a;++d){const U=t[d],N=ID(U,e,V);-1!==N&&l[N].push(U)}return l}(e,this.componentFactory.ngContentSelectors);this.componentRef=this.componentFactory.create(t,l,e),this.viewChangeDetectorRef=this.componentRef.injector.get(Dn),this.implementsOnChanges=function HD(n){return"function"==typeof n}(this.componentRef.instance.ngOnChanges),this.initializeInputs(),this.initializeOutputs(this.componentRef),this.detectChanges(),this.injector.get(tV).attachView(this.componentRef.hostView)}initializeInputs(){this.componentFactory.inputs.forEach(({propName:e})=>{this.initialInputValues.has(e)&&this.setInputValue(e,this.initialInputValues.get(e))}),this.initialInputValues.clear()}initializeOutputs(e){const t=this.componentFactory.outputs.map(({propName:l,templateName:V})=>e.instance[l].pipe(D(a=>({name:V,value:a}))));this.eventEmitters.next(t)}callNgOnChanges(e){if(!this.implementsOnChanges||null===this.inputChanges)return;const t=this.inputChanges;this.inputChanges=null,e.instance.ngOnChanges(t)}markViewForCheck(e){this.hasInputChanges&&(this.hasInputChanges=!1,e.markForCheck())}scheduleDetectChanges(){this.scheduledChangeDetectionFn||(this.scheduledChangeDetectionFn=jN.scheduleBeforeRender(()=>{this.scheduledChangeDetectionFn=null,this.detectChanges()}))}recordInputChange(e,t){if(!this.implementsOnChanges)return;null===this.inputChanges&&(this.inputChanges={});const l=this.inputChanges[e];if(l)return void(l.currentValue=t);const V=this.unchangedInputs.has(e),d=V?void 0:this.getInputValue(e);this.inputChanges[e]=new Ds(d,t,V)}detectChanges(){null!==this.componentRef&&(this.callNgOnChanges(this.componentRef),this.markViewForCheck(this.viewChangeDetectorRef),this.componentRef.changeDetectorRef.detectChanges())}runInZone(e){return this.elementZone&&Zone.current!==this.elementZone?this.ngZone.run(e):e()}}class KD extends HTMLElement{constructor(){super(...arguments),this.ngElementEventsSubscription=null}}function b(...n){return Be(n,Gd(n))}class yt extends u{constructor(e){super(),this._value=e}get value(){return this.getValue()}_subscribe(e){const t=super._subscribe(e);return!t.closed&&e.next(this._value),t}getValue(){const{hasError:e,thrownError:t,_value:l}=this;if(e)throw t;return this._throwIfClosed(),l}next(e){super.next(this._value=e)}}const HN=bd(n=>function(){n(this),this.name="EmptyError",this.message="no elements in sequence"}),{isArray:_D}=Array,{getPrototypeOf:qD,prototype:AD,keys:$D}=Object;const{isArray:tx}=Array;function ai(n){return D(e=>function nx(n,e){return tx(e)?n(...e):n(e)}(n,e))}function BN(...n){const e=Gd(n),t=function Ws(n){return te(eZ(n))?n.pop():void 0}(n),{args:l,keys:V}=function Z0(n){if(1===n.length){const e=n[0];if(_D(e))return{args:e,keys:null};if(function ex(n){return n&&"object"==typeof n&&qD(n)===AD}(e)){const t=$D(e);return{args:t.map(l=>e[l]),keys:t}}}return{args:n,keys:null}}(n);if(0===l.length)return Be([],e);const d=new ie(function lx(n,e,t=Nl){return l=>{c0(e,()=>{const{length:V}=n,d=new Array(V);let a=V,U=V;for(let N=0;N<V;N++)c0(e,()=>{const R=Be(n[N],e);let Z=!1;R.subscribe(pe(l,r=>{d[N]=r,Z||(Z=!0,U--),U||l.next(t(d.slice()))},()=>{--a||l.complete()}))},l)},l)}}(l,e,V?a=>function r0(n,e){return n.reduce((t,l,V)=>(t[l]=e[V],t),{})}(V,a):Nl));return t?d.pipe(ai(t)):d}function c0(n,e,t){n?jn(t,n,e):e()}function ON(...n){return function Vx(){return mV(1)}()(Be(n,Gd(n)))}function o0(n){return new ie(e=>{ot(n()).subscribe(e)})}function cd(n,e){const t=te(n)?n:()=>n,l=V=>V.error(t());return new ie(e?V=>e.schedule(l,0,V):l)}function Ui(){return ze((n,e)=>{let t=null;n._refCount++;const l=pe(e,void 0,void 0,void 0,()=>{if(!n||n._refCount<=0||0<--n._refCount)return void(t=null);const V=n._connection,d=t;t=null,V&&(!d||V===d)&&V.unsubscribe(),e.unsubscribe()});n.subscribe(l),l.closed||(t=n.connect())})}class s0 extends ie{constructor(e,t){super(),this.source=e,this.subjectFactory=t,this._subject=null,this._refCount=0,this._connection=null,Vs(e)&&(this.lift=e.lift)}_subscribe(e){return this.getSubject().subscribe(e)}getSubject(){const e=this._subject;return(!e||e.isStopped)&&(this._subject=this.subjectFactory()),this._subject}_teardown(){this._refCount=0;const{_connection:e}=this;this._subject=this._connection=null,e?.unsubscribe()}connect(){let e=this._connection;if(!e){e=this._connection=new Fe;const t=this.getSubject();e.add(this.source.subscribe(pe(t,void 0,()=>{this._teardown(),t.complete()},l=>{this._teardown(),t.error(l)},()=>this._teardown()))),e.closed&&(this._connection=null,e=Fe.EMPTY)}return e}refCount(){return Ui()(this)}}function Wn(n){return n<=0?()=>pn:ze((e,t)=>{let l=0;e.subscribe(pe(t,V=>{++l<=n&&(t.next(V),n<=l&&t.complete())}))})}function dV(...n){const e=Gd(n);return ze((t,l)=>{(e?ON(n,t,e):ON(n,t)).subscribe(l)})}function _e(n,e){return ze((t,l)=>{let V=0;t.subscribe(pe(l,d=>n.call(e,d,V++)&&l.next(d)))})}function vN(n){return ze((e,t)=>{let l=!1;e.subscribe(pe(t,V=>{l=!0,t.next(V)},()=>{l||t.next(n),t.complete()}))})}function T0(n=dx){return ze((e,t)=>{let l=!1;e.subscribe(pe(t,V=>{l=!0,t.next(V)},()=>l?t.complete():t.error(n())))})}function dx(){return new HN}function El(n,e){const t=arguments.length>=2;return l=>l.pipe(n?_e((V,d)=>n(V,d,l)):Nl,Wn(1),t?vN(e):T0(()=>new HN))}function Sl(n,e){return te(e)?Ce(n,e,1):Ce(n,1)}function Ye(n,e,t){const l=te(n)||e||t?{next:n,error:e,complete:t}:n;return l?ze((V,d)=>{var a;null===(a=l.subscribe)||void 0===a||a.call(l);let U=!0;V.subscribe(pe(d,N=>{var R;null===(R=l.next)||void 0===R||R.call(l,N),d.next(N)},()=>{var N;U=!1,null===(N=l.complete)||void 0===N||N.call(l),d.complete()},N=>{var R;U=!1,null===(R=l.error)||void 0===R||R.call(l,N),d.error(N)},()=>{var N,R;U&&(null===(N=l.unsubscribe)||void 0===N||N.call(l)),null===(R=l.finalize)||void 0===R||R.call(l)}))}):Nl}function $n(n){return ze((e,t)=>{let d,l=null,V=!1;l=e.subscribe(pe(t,void 0,void 0,a=>{d=ot(n(a,$n(n)(e))),l?(l.unsubscribe(),l=null,d.subscribe(t)):V=!0})),V&&(l.unsubscribe(),l=null,d.subscribe(t))})}function ax(n,e,t,l,V){return(d,a)=>{let U=t,N=e,R=0;d.subscribe(pe(a,Z=>{const r=R++;N=U?n(N,Z,r):(U=!0,Z),l&&a.next(N)},V&&(()=>{U&&a.next(N),a.complete()})))}}function h0(n,e){return ze(ax(n,e,arguments.length>=2,!0))}function Ni(n){return n<=0?()=>pn:ze((e,t)=>{let l=[];e.subscribe(pe(t,V=>{l.push(V),n<l.length&&l.shift()},()=>{for(const V of l)t.next(V);t.complete()},void 0,()=>{l=null}))})}function W0(n,e){const t=arguments.length>=2;return l=>l.pipe(n?_e((V,d)=>n(V,d,l)):Nl,Ni(1),t?vN(e):T0(()=>new HN))}function wN(n){return ze((e,t)=>{try{e.subscribe(t)}finally{t.add(n)}})}const C="primary",Sa=Symbol("RouteTitle");class Rx{constructor(e){this.params=e||{}}has(e){return Object.prototype.hasOwnProperty.call(this.params,e)}get(e){if(this.has(e)){const t=this.params[e];return Array.isArray(t)?t[0]:t}return null}getAll(e){if(this.has(e)){const t=this.params[e];return Array.isArray(t)?t:[t]}return[]}get keys(){return Object.keys(this.params)}}function id(n){return new Rx(n)}function Zx(n,e,t){const l=t.path.split("/");if(l.length>n.length||"full"===t.pathMatch&&(e.hasChildren()||l.length<n.length))return null;const V={};for(let d=0;d<l.length;d++){const a=l[d],U=n[d];if(a.startsWith(":"))V[a.substring(1)]=U;else if(a!==U.path)return null}return{consumed:n.slice(0,l.length),posParams:V}}function xn(n,e){const t=n?Object.keys(n):void 0,l=e?Object.keys(e):void 0;if(!t||!l||t.length!=l.length)return!1;let V;for(let d=0;d<t.length;d++)if(V=t[d],!F0(n[V],e[V]))return!1;return!0}function F0(n,e){if(Array.isArray(n)&&Array.isArray(e)){if(n.length!==e.length)return!1;const t=[...n].sort(),l=[...e].sort();return t.every((V,d)=>l[d]===V)}return n===e}function M0(n){return Array.prototype.concat.apply([],n)}function m0(n){return n.length>0?n[n.length-1]:null}function qe(n,e){for(const t in n)n.hasOwnProperty(t)&&e(n[t],t)}function Yl(n){return QW(n)?n:AU(n)?Be(Promise.resolve(n)):b(n)}const ix={exact:function E0(n,e,t){if(!UV(n.segments,e.segments)||!gN(n.segments,e.segments,t)||n.numberOfChildren!==e.numberOfChildren)return!1;for(const l in e.children)if(!n.children[l]||!E0(n.children[l],e.children[l],t))return!1;return!0},subset:S0},p0={exact:function ox(n,e){return xn(n,e)},subset:function sx(n,e){return Object.keys(e).length<=Object.keys(n).length&&Object.keys(e).every(t=>F0(n[t],e[t]))},ignored:()=>!0};function k0(n,e,t){return ix[t.paths](n.root,e.root,t.matrixParams)&&p0[t.queryParams](n.queryParams,e.queryParams)&&!("exact"===t.fragment&&n.fragment!==e.fragment)}function S0(n,e,t){return Y0(n,e,e.segments,t)}function Y0(n,e,t,l){if(n.segments.length>t.length){const V=n.segments.slice(0,t.length);return!(!UV(V,t)||e.hasChildren()||!gN(V,t,l))}if(n.segments.length===t.length){if(!UV(n.segments,t)||!gN(n.segments,t,l))return!1;for(const V in e.children)if(!n.children[V]||!S0(n.children[V],e.children[V],l))return!1;return!0}{const V=t.slice(0,n.segments.length),d=t.slice(n.segments.length);return!!(UV(n.segments,V)&&gN(n.segments,V,l)&&n.children[C])&&Y0(n.children[C],e,d,l)}}function gN(n,e,t){return e.every((l,V)=>p0[t](n[V].parameters,l.parameters))}class aV{constructor(e,t,l){this.root=e,this.queryParams=t,this.fragment=l}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=id(this.queryParams)),this._queryParamMap}toString(){return Wx.serialize(this)}}class K{constructor(e,t){this.segments=e,this.children=t,this.parent=null,qe(t,(l,V)=>l.parent=this)}hasChildren(){return this.numberOfChildren>0}get numberOfChildren(){return Object.keys(this.children).length}toString(){return IN(this)}}class Ya{constructor(e,t){this.path=e,this.parameters=t}get parameterMap(){return this._parameterMap||(this._parameterMap=id(this.parameters)),this._parameterMap}toString(){return b0(this)}}function UV(n,e){return n.length===e.length&&n.every((t,l)=>t.path===e[l].path)}let J0=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:function(){return new Zi},providedIn:"root"}),n})();class Zi{parse(e){const t=new Jx(e);return new aV(t.parseRootSegment(),t.parseQueryParams(),t.parseFragment())}serialize(e){const t=`/${Ja(e.root,!0)}`,l=function mx(n){const e=Object.keys(n).map(t=>{const l=n[t];return Array.isArray(l)?l.map(V=>`${fN(t)}=${fN(V)}`).join("&"):`${fN(t)}=${fN(l)}`}).filter(t=>!!t);return e.length?`?${e.join("&")}`:""}(e.queryParams);return`${t}${l}${"string"==typeof e.fragment?`#${function Fx(n){return encodeURI(n)}(e.fragment)}`:""}`}}const Wx=new Zi;function IN(n){return n.segments.map(e=>b0(e)).join("/")}function Ja(n,e){if(!n.hasChildren())return IN(n);if(e){const t=n.children[C]?Ja(n.children[C],!1):"",l=[];return qe(n.children,(V,d)=>{d!==C&&l.push(`${d}:${Ja(V,!1)}`)}),l.length>0?`${t}(${l.join("//")})`:t}{const t=function hx(n,e){let t=[];return qe(n.children,(l,V)=>{V===C&&(t=t.concat(e(l,V)))}),qe(n.children,(l,V)=>{V!==C&&(t=t.concat(e(l,V)))}),t}(n,(l,V)=>V===C?[Ja(n.children[C],!1)]:[`${V}:${Ja(l,!1)}`]);return 1===Object.keys(n.children).length&&null!=n.children[C]?`${IN(n)}/${t[0]}`:`${IN(n)}/(${t.join("//")})`}}function Q0(n){return encodeURIComponent(n).replace(/%40/g,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",")}function fN(n){return Q0(n).replace(/%3B/gi,";")}function ri(n){return Q0(n).replace(/\(/g,"%28").replace(/\)/g,"%29").replace(/%26/gi,"&")}function LN(n){return decodeURIComponent(n)}function z0(n){return LN(n.replace(/\+/g,"%20"))}function b0(n){return`${ri(n.path)}${function Mx(n){return Object.keys(n).map(e=>`;${ri(e)}=${ri(n[e])}`).join("")}(n.parameters)}`}const px=/^[^\/()?;=#]+/;function CN(n){const e=n.match(px);return e?e[0]:""}const kx=/^[^=?&#]+/,Sx=/^[^&#]+/;class Jx{constructor(e){this.url=e,this.remaining=e}parseRootSegment(){return this.consumeOptional("/"),""===this.remaining||this.peekStartsWith("?")||this.peekStartsWith("#")?new K([],{}):new K([],this.parseChildren())}parseQueryParams(){const e={};if(this.consumeOptional("?"))do{this.parseQueryParam(e)}while(this.consumeOptional("&"));return e}parseFragment(){return this.consumeOptional("#")?decodeURIComponent(this.remaining):null}parseChildren(){if(""===this.remaining)return{};this.consumeOptional("/");const e=[];for(this.peekStartsWith("(")||e.push(this.parseSegment());this.peekStartsWith("/")&&!this.peekStartsWith("//")&&!this.peekStartsWith("/(");)this.capture("/"),e.push(this.parseSegment());let t={};this.peekStartsWith("/(")&&(this.capture("/"),t=this.parseParens(!0));let l={};return this.peekStartsWith("(")&&(l=this.parseParens(!1)),(e.length>0||Object.keys(t).length>0)&&(l[C]=new K(e,t)),l}parseSegment(){const e=CN(this.remaining);if(""===e&&this.peekStartsWith(";"))throw new k(4009,!1);return this.capture(e),new Ya(LN(e),this.parseMatrixParams())}parseMatrixParams(){const e={};for(;this.consumeOptional(";");)this.parseParam(e);return e}parseParam(e){const t=CN(this.remaining);if(!t)return;this.capture(t);let l="";if(this.consumeOptional("=")){const V=CN(this.remaining);V&&(l=V,this.capture(l))}e[LN(t)]=LN(l)}parseQueryParam(e){const t=function Ex(n){const e=n.match(kx);return e?e[0]:""}(this.remaining);if(!t)return;this.capture(t);let l="";if(this.consumeOptional("=")){const a=function Yx(n){const e=n.match(Sx);return e?e[0]:""}(this.remaining);a&&(l=a,this.capture(l))}const V=z0(t),d=z0(l);if(e.hasOwnProperty(V)){let a=e[V];Array.isArray(a)||(a=[a],e[V]=a),a.push(d)}else e[V]=d}parseParens(e){const t={};for(this.capture("(");!this.consumeOptional(")")&&this.remaining.length>0;){const l=CN(this.remaining),V=this.remaining[l.length];if("/"!==V&&")"!==V&&";"!==V)throw new k(4010,!1);let d;l.indexOf(":")>-1?(d=l.slice(0,l.indexOf(":")),this.capture(d),this.capture(":")):e&&(d=C);const a=this.parseChildren();t[d]=1===Object.keys(a).length?a[C]:new K([],a),this.consumeOptional("//")}return t}peekStartsWith(e){return this.remaining.startsWith(e)}consumeOptional(e){return!!this.peekStartsWith(e)&&(this.remaining=this.remaining.substring(e.length),!0)}capture(e){if(!this.consumeOptional(e))throw new k(4011,!1)}}function ci(n){return n.segments.length>0?new K([],{[C]:n}):n}function KN(n){const e={};for(const l of Object.keys(n.children)){const d=KN(n.children[l]);(d.segments.length>0||d.hasChildren())&&(e[l]=d)}return function Qx(n){if(1===n.numberOfChildren&&n.children[C]){const e=n.children[C];return new K(n.segments.concat(e.segments),e.children)}return n}(new K(n.segments,e))}function NV(n){return n instanceof aV}function ux(n,e,t,l,V){if(0===t.length)return od(e.root,e.root,e.root,l,V);const d=function D0(n){if("string"==typeof n[0]&&1===n.length&&"/"===n[0])return new G0(!0,0,n);let e=0,t=!1;const l=n.reduce((V,d,a)=>{if("object"==typeof d&&null!=d){if(d.outlets){const U={};return qe(d.outlets,(N,R)=>{U[R]="string"==typeof N?N.split("/"):N}),[...V,{outlets:U}]}if(d.segmentPath)return[...V,d.segmentPath]}return"string"!=typeof d?[...V,d]:0===a?(d.split("/").forEach((U,N)=>{0==N&&"."===U||(0==N&&""===U?t=!0:".."===U?e++:""!=U&&V.push(U))}),V):[...V,d]},[]);return new G0(t,e,l)}(t);return d.toRoot()?od(e.root,e.root,new K([],{}),l,V):function a(N){const R=function Dx(n,e,t,l){if(n.isAbsolute)return new sd(e.root,!0,0);if(-1===l)return new sd(t,t===e.root,0);return function x0(n,e,t){let l=n,V=e,d=t;for(;d>V;){if(d-=V,l=l.parent,!l)throw new k(4005,!1);V=l.segments.length}return new sd(l,!1,V-d)}(t,l+(Qa(n.commands[0])?0:1),n.numberOfDoubleDots)}(d,e,n.snapshot?._urlSegment,N),Z=R.processChildren?ba(R.segmentGroup,R.index,d.commands):oi(R.segmentGroup,R.index,d.commands);return od(e.root,R.segmentGroup,Z,l,V)}(n.snapshot?._lastPathIndex)}function Qa(n){return"object"==typeof n&&null!=n&&!n.outlets&&!n.segmentPath}function za(n){return"object"==typeof n&&null!=n&&n.outlets}function od(n,e,t,l,V){let a,d={};l&&qe(l,(N,R)=>{d[R]=Array.isArray(N)?N.map(Z=>`${Z}`):`${N}`}),a=n===e?t:u0(n,e,t);const U=ci(KN(a));return new aV(U,d,V)}function u0(n,e,t){const l={};return qe(n.children,(V,d)=>{l[d]=V===e?t:u0(V,e,t)}),new K(n.segments,l)}class G0{constructor(e,t,l){if(this.isAbsolute=e,this.numberOfDoubleDots=t,this.commands=l,e&&l.length>0&&Qa(l[0]))throw new k(4003,!1);const V=l.find(za);if(V&&V!==m0(l))throw new k(4004,!1)}toRoot(){return this.isAbsolute&&1===this.commands.length&&"/"==this.commands[0]}}class sd{constructor(e,t,l){this.segmentGroup=e,this.processChildren=t,this.index=l}}function oi(n,e,t){if(n||(n=new K([],{})),0===n.segments.length&&n.hasChildren())return ba(n,e,t);const l=function Xx(n,e,t){let l=0,V=e;const d={match:!1,pathIndex:0,commandIndex:0};for(;V<n.segments.length;){if(l>=t.length)return d;const a=n.segments[V],U=t[l];if(za(U))break;const N=`${U}`,R=l<t.length-1?t[l+1]:null;if(V>0&&void 0===N)break;if(N&&R&&"object"==typeof R&&void 0===R.outlets){if(!y0(N,R,a))return d;l+=2}else{if(!y0(N,{},a))return d;l++}V++}return{match:!0,pathIndex:V,commandIndex:l}}(n,e,t),V=t.slice(l.commandIndex);if(l.match&&l.pathIndex<n.segments.length){const d=new K(n.segments.slice(0,l.pathIndex),{});return d.children[C]=new K(n.segments.slice(l.pathIndex),n.children),ba(d,0,V)}return l.match&&0===V.length?new K(n.segments,{}):l.match&&!n.hasChildren()?si(n,e,t):l.match?ba(n,0,V):si(n,e,t)}function ba(n,e,t){if(0===t.length)return new K(n.segments,{});{const l=function xx(n){return za(n[0])?n[0].outlets:{[C]:n}}(t),V={};return qe(l,(d,a)=>{"string"==typeof d&&(d=[d]),null!==d&&(V[a]=oi(n.children[a],e,d))}),qe(n.children,(d,a)=>{void 0===l[a]&&(V[a]=d)}),new K(n.segments,V)}}function si(n,e,t){const l=n.segments.slice(0,e);let V=0;for(;V<t.length;){const d=t[V];if(za(d)){const N=yx(d.outlets);return new K(l,N)}if(0===V&&Qa(t[0])){l.push(new Ya(n.segments[e].path,X0(t[0]))),V++;continue}const a=za(d)?d.outlets[C]:`${d}`,U=V<t.length-1?t[V+1]:null;a&&U&&Qa(U)?(l.push(new Ya(a,X0(U))),V+=2):(l.push(new Ya(a,{})),V++)}return new K(l,{})}function yx(n){const e={};return qe(n,(t,l)=>{"string"==typeof t&&(t=[t]),null!==t&&(e[l]=si(new K([],{}),0,t))}),e}function X0(n){const e={};return qe(n,(t,l)=>e[l]=`${t}`),e}function y0(n,e,t){return n==t.path&&xn(e,t.parameters)}class el{constructor(e,t){this.id=e,this.url=t}}class Ti extends el{constructor(e,t,l="imperative",V=null){super(e,t),this.type=0,this.navigationTrigger=l,this.restoredState=V}toString(){return`NavigationStart(id: ${this.id}, url: '${this.url}')`}}class RV extends el{constructor(e,t,l){super(e,t),this.urlAfterRedirects=l,this.type=1}toString(){return`NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`}}class PN extends el{constructor(e,t,l,V){super(e,t),this.reason=l,this.code=V,this.type=2}toString(){return`NavigationCancel(id: ${this.id}, url: '${this.url}')`}}class j0 extends el{constructor(e,t,l,V){super(e,t),this.error=l,this.target=V,this.type=3}toString(){return`NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`}}class jx extends el{constructor(e,t,l,V){super(e,t),this.urlAfterRedirects=l,this.state=V,this.type=4}toString(){return`RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class Hx extends el{constructor(e,t,l,V){super(e,t),this.urlAfterRedirects=l,this.state=V,this.type=7}toString(){return`GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class Bx extends el{constructor(e,t,l,V,d){super(e,t),this.urlAfterRedirects=l,this.state=V,this.shouldActivate=d,this.type=8}toString(){return`GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`}}class Ox extends el{constructor(e,t,l,V){super(e,t),this.urlAfterRedirects=l,this.state=V,this.type=5}toString(){return`ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class vx extends el{constructor(e,t,l,V){super(e,t),this.urlAfterRedirects=l,this.state=V,this.type=6}toString(){return`ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`}}class wx{constructor(e){this.route=e,this.type=9}toString(){return`RouteConfigLoadStart(path: ${this.route.path})`}}class gx{constructor(e){this.route=e,this.type=10}toString(){return`RouteConfigLoadEnd(path: ${this.route.path})`}}class Ix{constructor(e){this.snapshot=e,this.type=11}toString(){return`ChildActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class fx{constructor(e){this.snapshot=e,this.type=12}toString(){return`ChildActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class Lx{constructor(e){this.snapshot=e,this.type=13}toString(){return`ActivationStart(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class Cx{constructor(e){this.snapshot=e,this.type=14}toString(){return`ActivationEnd(path: '${this.snapshot.routeConfig&&this.snapshot.routeConfig.path||""}')`}}class H0{constructor(e,t,l){this.routerEvent=e,this.position=t,this.anchor=l,this.type=15}toString(){return`Scroll(anchor: '${this.anchor}', position: '${this.position?`${this.position[0]}, ${this.position[1]}`:null}')`}}class B0{constructor(e){this._root=e}get root(){return this._root.value}parent(e){const t=this.pathFromRoot(e);return t.length>1?t[t.length-2]:null}children(e){const t=hi(e,this._root);return t?t.children.map(l=>l.value):[]}firstChild(e){const t=hi(e,this._root);return t&&t.children.length>0?t.children[0].value:null}siblings(e){const t=Wi(e,this._root);return t.length<2?[]:t[t.length-2].children.map(V=>V.value).filter(V=>V!==e)}pathFromRoot(e){return Wi(e,this._root).map(t=>t.value)}}function hi(n,e){if(n===e.value)return e;for(const t of e.children){const l=hi(n,t);if(l)return l}return null}function Wi(n,e){if(n===e.value)return[e];for(const t of e.children){const l=Wi(n,t);if(l.length)return l.unshift(e),l}return[]}class tl{constructor(e,t){this.value=e,this.children=t}toString(){return`TreeNode(${this.value})`}}function Td(n){const e={};return n&&n.children.forEach(t=>e[t.value.outlet]=t),e}class O0 extends B0{constructor(e,t){super(e),this.snapshot=t,Fi(this,e)}toString(){return this.snapshot.toString()}}function v0(n,e){const t=function Px(n,e){const a=new _N([],{},{},"",{},C,e,null,n.root,-1,{});return new g0("",new tl(a,[]))}(n,e),l=new yt([new Ya("",{})]),V=new yt({}),d=new yt({}),a=new yt({}),U=new yt(""),N=new ZV(l,V,a,U,d,C,e,t.root);return N.snapshot=t.root,new O0(new tl(N,[]),t)}class ZV{constructor(e,t,l,V,d,a,U,N){this.url=e,this.params=t,this.queryParams=l,this.fragment=V,this.data=d,this.outlet=a,this.component=U,this.title=this.data?.pipe(D(R=>R[Sa]))??b(void 0),this._futureSnapshot=N}get routeConfig(){return this._futureSnapshot.routeConfig}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=this.params.pipe(D(e=>id(e)))),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=this.queryParams.pipe(D(e=>id(e)))),this._queryParamMap}toString(){return this.snapshot?this.snapshot.toString():`Future(${this._futureSnapshot})`}}function w0(n,e="emptyOnly"){const t=n.pathFromRoot;let l=0;if("always"!==e)for(l=t.length-1;l>=1;){const V=t[l],d=t[l-1];if(V.routeConfig&&""===V.routeConfig.path)l--;else{if(d.component)break;l--}}return function _x(n){return n.reduce((e,t)=>({params:{...e.params,...t.params},data:{...e.data,...t.data},resolve:{...t.data,...e.resolve,...t.routeConfig?.data,...t._resolvedData}}),{params:{},data:{},resolve:{}})}(t.slice(l))}class _N{constructor(e,t,l,V,d,a,U,N,R,Z,r,c){this.url=e,this.params=t,this.queryParams=l,this.fragment=V,this.data=d,this.outlet=a,this.component=U,this.title=this.data?.[Sa],this.routeConfig=N,this._urlSegment=R,this._lastPathIndex=Z,this._correctedLastPathIndex=c??Z,this._resolve=r}get root(){return this._routerState.root}get parent(){return this._routerState.parent(this)}get firstChild(){return this._routerState.firstChild(this)}get children(){return this._routerState.children(this)}get pathFromRoot(){return this._routerState.pathFromRoot(this)}get paramMap(){return this._paramMap||(this._paramMap=id(this.params)),this._paramMap}get queryParamMap(){return this._queryParamMap||(this._queryParamMap=id(this.queryParams)),this._queryParamMap}toString(){return`Route(url:'${this.url.map(l=>l.toString()).join("/")}', path:'${this.routeConfig?this.routeConfig.path:""}')`}}class g0 extends B0{constructor(e,t){super(t),this.url=e,Fi(this,t)}toString(){return I0(this._root)}}function Fi(n,e){e.value._routerState=n,e.children.forEach(t=>Fi(n,t))}function I0(n){const e=n.children.length>0?` { ${n.children.map(I0).join(", ")} } `:"";return`${n.value}${e}`}function Mi(n){if(n.snapshot){const e=n.snapshot,t=n._futureSnapshot;n.snapshot=t,xn(e.queryParams,t.queryParams)||n.queryParams.next(t.queryParams),e.fragment!==t.fragment&&n.fragment.next(t.fragment),xn(e.params,t.params)||n.params.next(t.params),function rx(n,e){if(n.length!==e.length)return!1;for(let t=0;t<n.length;++t)if(!xn(n[t],e[t]))return!1;return!0}(e.url,t.url)||n.url.next(t.url),xn(e.data,t.data)||n.data.next(t.data)}else n.snapshot=n._futureSnapshot,n.data.next(n._futureSnapshot.data)}function mi(n,e){const t=xn(n.params,e.params)&&function Tx(n,e){return UV(n,e)&&n.every((t,l)=>xn(t.parameters,e[l].parameters))}(n.url,e.url);return t&&!(!n.parent!=!e.parent)&&(!n.parent||mi(n.parent,e.parent))}function ua(n,e,t){if(t&&n.shouldReuseRoute(e.value,t.value.snapshot)){const l=t.value;l._futureSnapshot=e.value;const V=function Ax(n,e,t){return e.children.map(l=>{for(const V of t.children)if(n.shouldReuseRoute(l.value,V.value.snapshot))return ua(n,l,V);return ua(n,l)})}(n,e,t);return new tl(l,V)}{if(n.shouldAttach(e.value)){const d=n.retrieve(e.value);if(null!==d){const a=d.route;return a.value._futureSnapshot=e.value,a.children=e.children.map(U=>ua(n,U)),a}}const l=function $x(n){return new ZV(new yt(n.url),new yt(n.params),new yt(n.queryParams),new yt(n.fragment),new yt(n.data),n.outlet,n.component,n)}(e.value),V=e.children.map(d=>ua(n,d));return new tl(l,V)}}const pi="ngNavigationCancelingError";function f0(n,e){const{redirectTo:t,navigationBehaviorOptions:l}=NV(e)?{redirectTo:e,navigationBehaviorOptions:void 0}:e,V=L0(!1,0,e);return V.url=t,V.navigationBehaviorOptions=l,V}function L0(n,e,t){const l=new Error("NavigationCancelingError: "+(n||""));return l[pi]=!0,l.cancellationCode=e,t&&(l.url=t),l}function C0(n){return K0(n)&&NV(n.url)}function K0(n){return n&&n[pi]}class eX{constructor(){this.outlet=null,this.route=null,this.resolver=null,this.injector=null,this.children=new Ga,this.attachRef=null}}let Ga=(()=>{class n{constructor(){this.contexts=new Map}onChildOutletCreated(t,l){const V=this.getOrCreateContext(t);V.outlet=l,this.contexts.set(t,V)}onChildOutletDestroyed(t){const l=this.getContext(t);l&&(l.outlet=null,l.attachRef=null)}onOutletDeactivated(){const t=this.contexts;return this.contexts=new Map,t}onOutletReAttached(t){this.contexts=t}getOrCreateContext(t){let l=this.getContext(t);return l||(l=new eX,this.contexts.set(t,l)),l}getContext(t){return this.contexts.get(t)||null}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const qN=!1;let P0=(()=>{class n{constructor(t,l,V,d,a){this.parentContexts=t,this.location=l,this.changeDetector=d,this.environmentInjector=a,this.activated=null,this._activatedRoute=null,this.activateEvents=new A,this.deactivateEvents=new A,this.attachEvents=new A,this.detachEvents=new A,this.name=V||C,t.onChildOutletCreated(this.name,this)}ngOnDestroy(){this.parentContexts.getContext(this.name)?.outlet===this&&this.parentContexts.onChildOutletDestroyed(this.name)}ngOnInit(){if(!this.activated){const t=this.parentContexts.getContext(this.name);t&&t.route&&(t.attachRef?this.attach(t.attachRef,t.route):this.activateWith(t.route,t.injector))}}get isActivated(){return!!this.activated}get component(){if(!this.activated)throw new k(4012,qN);return this.activated.instance}get activatedRoute(){if(!this.activated)throw new k(4012,qN);return this._activatedRoute}get activatedRouteData(){return this._activatedRoute?this._activatedRoute.snapshot.data:{}}detach(){if(!this.activated)throw new k(4012,qN);this.location.detach();const t=this.activated;return this.activated=null,this._activatedRoute=null,this.detachEvents.emit(t.instance),t}attach(t,l){this.activated=t,this._activatedRoute=l,this.location.insert(t.hostView),this.attachEvents.emit(t.instance)}deactivate(){if(this.activated){const t=this.component;this.activated.destroy(),this.activated=null,this._activatedRoute=null,this.deactivateEvents.emit(t)}}activateWith(t,l){if(this.isActivated)throw new k(4013,qN);this._activatedRoute=t;const V=this.location,a=t._futureSnapshot.component,U=this.parentContexts.getOrCreateContext(this.name).children,N=new tX(t,U,V.injector);if(l&&function nX(n){return!!n.resolveComponentFactory}(l)){const R=l.resolveComponentFactory(a);this.activated=V.createComponent(R,V.length,N)}else this.activated=V.createComponent(a,{index:V.length,injector:N,environmentInjector:l??this.environmentInjector});this.changeDetector.markForCheck(),this.activateEvents.emit(this.activated.instance)}}return n.\u0275fac=function(t){return new(t||n)(M(Ga),M(Mt),DV("name"),M(Dn),M(il))},n.\u0275dir=Me({type:n,selectors:[["router-outlet"]],outputs:{activateEvents:"activate",deactivateEvents:"deactivate",attachEvents:"attach",detachEvents:"detach"},exportAs:["outlet"],standalone:!0}),n})();class tX{constructor(e,t,l){this.route=e,this.childContexts=t,this.parent=l}get(e,t){return e===ZV?this.route:e===Ga?this.childContexts:this.parent.get(e,t)}}let ki=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275cmp=Et({type:n,selectors:[["ng-component"]],standalone:!0,features:[KF],decls:1,vars:0,template:function(t,l){1&t&&Wt(0,"router-outlet")},dependencies:[P0],encapsulation:2}),n})();function _0(n,e){return n.providers&&!n._injector&&(n._injector=aN(n.providers,e,`Route: ${n.path}`)),n._injector??e}function Si(n){const e=n.children&&n.children.map(Si),t=e?{...n,children:e}:{...n};return!t.component&&!t.loadComponent&&(e||t.loadChildren)&&t.outlet&&t.outlet!==C&&(t.component=ki),t}function _t(n){return n.outlet||C}function q0(n,e){const t=n.filter(l=>_t(l)===e);return t.push(...n.filter(l=>_t(l)!==e)),t}function Da(n){if(!n)return null;if(n.routeConfig?._injector)return n.routeConfig._injector;for(let e=n.parent;e;e=e.parent){const t=e.routeConfig;if(t?._loadedInjector)return t._loadedInjector;if(t?._injector)return t._injector}return null}class UX{constructor(e,t,l,V){this.routeReuseStrategy=e,this.futureState=t,this.currState=l,this.forwardEvent=V}activate(e){const t=this.futureState._root,l=this.currState?this.currState._root:null;this.deactivateChildRoutes(t,l,e),Mi(this.futureState.root),this.activateChildRoutes(t,l,e)}deactivateChildRoutes(e,t,l){const V=Td(t);e.children.forEach(d=>{const a=d.value.outlet;this.deactivateRoutes(d,V[a],l),delete V[a]}),qe(V,(d,a)=>{this.deactivateRouteAndItsChildren(d,l)})}deactivateRoutes(e,t,l){const V=e.value,d=t?t.value:null;if(V===d)if(V.component){const a=l.getContext(V.outlet);a&&this.deactivateChildRoutes(e,t,a.children)}else this.deactivateChildRoutes(e,t,l);else d&&this.deactivateRouteAndItsChildren(t,l)}deactivateRouteAndItsChildren(e,t){e.value.component&&this.routeReuseStrategy.shouldDetach(e.value.snapshot)?this.detachAndStoreRouteSubtree(e,t):this.deactivateRouteAndOutlet(e,t)}detachAndStoreRouteSubtree(e,t){const l=t.getContext(e.value.outlet),V=l&&e.value.component?l.children:t,d=Td(e);for(const a of Object.keys(d))this.deactivateRouteAndItsChildren(d[a],V);if(l&&l.outlet){const a=l.outlet.detach(),U=l.children.onOutletDeactivated();this.routeReuseStrategy.store(e.value.snapshot,{componentRef:a,route:e,contexts:U})}}deactivateRouteAndOutlet(e,t){const l=t.getContext(e.value.outlet),V=l&&e.value.component?l.children:t,d=Td(e);for(const a of Object.keys(d))this.deactivateRouteAndItsChildren(d[a],V);l&&l.outlet&&(l.outlet.deactivate(),l.children.onOutletDeactivated(),l.attachRef=null,l.resolver=null,l.route=null)}activateChildRoutes(e,t,l){const V=Td(t);e.children.forEach(d=>{this.activateRoutes(d,V[d.value.outlet],l),this.forwardEvent(new Cx(d.value.snapshot))}),e.children.length&&this.forwardEvent(new fx(e.value.snapshot))}activateRoutes(e,t,l){const V=e.value,d=t?t.value:null;if(Mi(V),V===d)if(V.component){const a=l.getOrCreateContext(V.outlet);this.activateChildRoutes(e,t,a.children)}else this.activateChildRoutes(e,t,l);else if(V.component){const a=l.getOrCreateContext(V.outlet);if(this.routeReuseStrategy.shouldAttach(V.snapshot)){const U=this.routeReuseStrategy.retrieve(V.snapshot);this.routeReuseStrategy.store(V.snapshot,null),a.children.onOutletReAttached(U.contexts),a.attachRef=U.componentRef,a.route=U.route.value,a.outlet&&a.outlet.attach(U.componentRef,U.route.value),Mi(U.route.value),this.activateChildRoutes(e,null,a.children)}else{const U=Da(V.snapshot),N=U?.get(fn)??null;a.attachRef=null,a.route=V,a.resolver=N,a.injector=U,a.outlet&&a.outlet.activateWith(V,a.injector),this.activateChildRoutes(e,null,a.children)}}else this.activateChildRoutes(e,null,l)}}class A0{constructor(e){this.path=e,this.route=this.path[this.path.length-1]}}class AN{constructor(e,t){this.component=e,this.route=t}}function NX(n,e,t){const l=n._root;return xa(l,e?e._root:null,t,[l.value])}function hd(n,e){const t=Symbol(),l=e.get(n,t);return l===t?"function"!=typeof n||function gE(n){return null!==aU(n)}(n)?e.get(n):n:l}function xa(n,e,t,l,V={canDeactivateChecks:[],canActivateChecks:[]}){const d=Td(e);return n.children.forEach(a=>{(function ZX(n,e,t,l,V={canDeactivateChecks:[],canActivateChecks:[]}){const d=n.value,a=e?e.value:null,U=t?t.getContext(n.value.outlet):null;if(a&&d.routeConfig===a.routeConfig){const N=function rX(n,e,t){if("function"==typeof t)return t(n,e);switch(t){case"pathParamsChange":return!UV(n.url,e.url);case"pathParamsOrQueryParamsChange":return!UV(n.url,e.url)||!xn(n.queryParams,e.queryParams);case"always":return!0;case"paramsOrQueryParamsChange":return!mi(n,e)||!xn(n.queryParams,e.queryParams);default:return!mi(n,e)}}(a,d,d.routeConfig.runGuardsAndResolvers);N?V.canActivateChecks.push(new A0(l)):(d.data=a.data,d._resolvedData=a._resolvedData),xa(n,e,d.component?U?U.children:null:t,l,V),N&&U&&U.outlet&&U.outlet.isActivated&&V.canDeactivateChecks.push(new AN(U.outlet.component,a))}else a&&Xa(e,U,V),V.canActivateChecks.push(new A0(l)),xa(n,null,d.component?U?U.children:null:t,l,V)})(a,d[a.value.outlet],t,l.concat([a.value]),V),delete d[a.value.outlet]}),qe(d,(a,U)=>Xa(a,t.getContext(U),V)),V}function Xa(n,e,t){const l=Td(n),V=n.value;qe(l,(d,a)=>{Xa(d,V.component?e?e.children.getContext(a):null:e,t)}),t.canDeactivateChecks.push(new AN(V.component&&e&&e.outlet&&e.outlet.isActivated?e.outlet.component:null,V))}function ya(n){return"function"==typeof n}function Yi(n){return n instanceof HN||"EmptyError"===n?.name}const $N=Symbol("INITIAL_VALUE");function Wd(){return Xt(n=>BN(n.map(e=>e.pipe(Wn(1),dV($N)))).pipe(D(e=>{for(const t of e)if(!0!==t){if(t===$N)return $N;if(!1===t||t instanceof aV)return t}return!0}),_e(e=>e!==$N),Wn(1)))}function $0(n){return function NE(...n){return ts(n)}(Ye(e=>{if(NV(e))throw f0(0,e)}),D(e=>!0===e))}const Ji={matched:!1,consumedSegments:[],remainingSegments:[],parameters:{},positionalParamSegments:{}};function em(n,e,t,l,V){const d=Qi(n,e,t);return d.matched?function QX(n,e,t,l){const V=e.canMatch;return V&&0!==V.length?b(V.map(a=>{const U=hd(a,n);return Yl(function hX(n){return n&&ya(n.canMatch)}(U)?U.canMatch(e,t):n.runInContext(()=>U(e,t)))})).pipe(Wd(),$0()):b(!0)}(l=_0(e,l),e,t).pipe(D(a=>!0===a?d:{...Ji})):b(d)}function Qi(n,e,t){if(""===e.path)return"full"===e.pathMatch&&(n.hasChildren()||t.length>0)?{...Ji}:{matched:!0,consumedSegments:[],remainingSegments:t,parameters:{},positionalParamSegments:{}};const V=(e.matcher||Zx)(t,n,e);if(!V)return{...Ji};const d={};qe(V.posParams,(U,N)=>{d[N]=U.path});const a=V.consumed.length>0?{...d,...V.consumed[V.consumed.length-1].parameters}:d;return{matched:!0,consumedSegments:V.consumed,remainingSegments:t.slice(V.consumed.length),parameters:a,positionalParamSegments:V.posParams??{}}}function eR(n,e,t,l,V="corrected"){if(t.length>0&&function uX(n,e,t){return t.some(l=>tR(n,e,l)&&_t(l)!==C)}(n,t,l)){const a=new K(e,function bX(n,e,t,l){const V={};V[C]=l,l._sourceSegment=n,l._segmentIndexShift=e.length;for(const d of t)if(""===d.path&&_t(d)!==C){const a=new K([],{});a._sourceSegment=n,a._segmentIndexShift=e.length,V[_t(d)]=a}return V}(n,e,l,new K(t,n.children)));return a._sourceSegment=n,a._segmentIndexShift=e.length,{segmentGroup:a,slicedSegments:[]}}if(0===t.length&&function GX(n,e,t){return t.some(l=>tR(n,e,l))}(n,t,l)){const a=new K(n.segments,function zX(n,e,t,l,V,d){const a={};for(const U of l)if(tR(n,t,U)&&!V[_t(U)]){const N=new K([],{});N._sourceSegment=n,N._segmentIndexShift="legacy"===d?n.segments.length:e.length,a[_t(U)]=N}return{...V,...a}}(n,e,t,l,n.children,V));return a._sourceSegment=n,a._segmentIndexShift=e.length,{segmentGroup:a,slicedSegments:t}}const d=new K(n.segments,n.children);return d._sourceSegment=n,d._segmentIndexShift=e.length,{segmentGroup:d,slicedSegments:t}}function tR(n,e,t){return(!(n.hasChildren()||e.length>0)||"full"!==t.pathMatch)&&""===t.path}function tm(n,e,t,l){return!!(_t(n)===l||l!==C&&tR(e,t,n))&&("**"===n.path||Qi(e,n,t).matched)}function nm(n,e,t){return 0===e.length&&!n.children[t]}const nR=!1;class lR{constructor(e){this.segmentGroup=e||null}}class lm{constructor(e){this.urlTree=e}}function ja(n){return cd(new lR(n))}function Vm(n){return cd(new lm(n))}class yX{constructor(e,t,l,V,d){this.injector=e,this.configLoader=t,this.urlSerializer=l,this.urlTree=V,this.config=d,this.allowRedirects=!0}apply(){const e=eR(this.urlTree.root,[],[],this.config).segmentGroup,t=new K(e.segments,e.children);return this.expandSegmentGroup(this.injector,this.config,t,C).pipe(D(d=>this.createUrlTree(KN(d),this.urlTree.queryParams,this.urlTree.fragment))).pipe($n(d=>{if(d instanceof lm)return this.allowRedirects=!1,this.match(d.urlTree);throw d instanceof lR?this.noMatchError(d):d}))}match(e){return this.expandSegmentGroup(this.injector,this.config,e.root,C).pipe(D(V=>this.createUrlTree(KN(V),e.queryParams,e.fragment))).pipe($n(V=>{throw V instanceof lR?this.noMatchError(V):V}))}noMatchError(e){return new k(4002,nR)}createUrlTree(e,t,l){const V=ci(e);return new aV(V,t,l)}expandSegmentGroup(e,t,l,V){return 0===l.segments.length&&l.hasChildren()?this.expandChildren(e,t,l).pipe(D(d=>new K([],d))):this.expandSegment(e,l,t,l.segments,V,!0)}expandChildren(e,t,l){const V=[];for(const d of Object.keys(l.children))"primary"===d?V.unshift(d):V.push(d);return Be(V).pipe(Sl(d=>{const a=l.children[d],U=q0(t,d);return this.expandSegmentGroup(e,U,a,d).pipe(D(N=>({segment:N,outlet:d})))}),h0((d,a)=>(d[a.outlet]=a.segment,d),{}),W0())}expandSegment(e,t,l,V,d,a){return Be(l).pipe(Sl(U=>this.expandSegmentAgainstRoute(e,t,l,U,V,d,a).pipe($n(R=>{if(R instanceof lR)return b(null);throw R}))),El(U=>!!U),$n((U,N)=>{if(Yi(U))return nm(t,V,d)?b(new K([],{})):ja(t);throw U}))}expandSegmentAgainstRoute(e,t,l,V,d,a,U){return tm(V,t,d,a)?void 0===V.redirectTo?this.matchSegmentAgainstRoute(e,t,V,d,a):U&&this.allowRedirects?this.expandSegmentAgainstRouteUsingRedirect(e,t,l,V,d,a):ja(t):ja(t)}expandSegmentAgainstRouteUsingRedirect(e,t,l,V,d,a){return"**"===V.path?this.expandWildCardWithParamsAgainstRouteUsingRedirect(e,l,V,a):this.expandRegularSegmentAgainstRouteUsingRedirect(e,t,l,V,d,a)}expandWildCardWithParamsAgainstRouteUsingRedirect(e,t,l,V){const d=this.applyRedirectCommands([],l.redirectTo,{});return l.redirectTo.startsWith("/")?Vm(d):this.lineralizeSegments(l,d).pipe(Ce(a=>{const U=new K(a,{});return this.expandSegment(e,U,t,a,V,!1)}))}expandRegularSegmentAgainstRouteUsingRedirect(e,t,l,V,d,a){const{matched:U,consumedSegments:N,remainingSegments:R,positionalParamSegments:Z}=Qi(t,V,d);if(!U)return ja(t);const r=this.applyRedirectCommands(N,V.redirectTo,Z);return V.redirectTo.startsWith("/")?Vm(r):this.lineralizeSegments(V,r).pipe(Ce(c=>this.expandSegment(e,t,l,c.concat(R),a,!1)))}matchSegmentAgainstRoute(e,t,l,V,d){return"**"===l.path?(e=_0(l,e),l.loadChildren?(l._loadedRoutes?b({routes:l._loadedRoutes,injector:l._loadedInjector}):this.configLoader.loadChildren(e,l)).pipe(D(U=>(l._loadedRoutes=U.routes,l._loadedInjector=U.injector,new K(V,{})))):b(new K(V,{}))):em(t,l,V,e).pipe(Xt(({matched:a,consumedSegments:U,remainingSegments:N})=>a?this.getChildConfig(e=l._injector??e,l,V).pipe(Ce(Z=>{const r=Z.injector??e,c=Z.routes,{segmentGroup:i,slicedSegments:o}=eR(t,U,N,c),s=new K(i.segments,i.children);if(0===o.length&&s.hasChildren())return this.expandChildren(r,c,s).pipe(D(F=>new K(U,F)));if(0===c.length&&0===o.length)return b(new K(U,{}));const T=_t(l)===d;return this.expandSegment(r,s,c,o,T?C:d,!0).pipe(D(p=>new K(U.concat(p.segments),p.children)))})):ja(t)))}getChildConfig(e,t,l){return t.children?b({routes:t.children,injector:e}):t.loadChildren?void 0!==t._loadedRoutes?b({routes:t._loadedRoutes,injector:t._loadedInjector}):function JX(n,e,t,l){const V=e.canLoad;return void 0===V||0===V.length?b(!0):b(V.map(a=>{const U=hd(a,n);return Yl(function iX(n){return n&&ya(n.canLoad)}(U)?U.canLoad(e,t):n.runInContext(()=>U(e,t)))})).pipe(Wd(),$0())}(e,t,l).pipe(Ce(V=>V?this.configLoader.loadChildren(e,t).pipe(Ye(d=>{t._loadedRoutes=d.routes,t._loadedInjector=d.injector})):function xX(n){return cd(L0(nR,3))}())):b({routes:[],injector:e})}lineralizeSegments(e,t){let l=[],V=t.root;for(;;){if(l=l.concat(V.segments),0===V.numberOfChildren)return b(l);if(V.numberOfChildren>1||!V.children[C])return cd(new k(4e3,nR));V=V.children[C]}}applyRedirectCommands(e,t,l){return this.applyRedirectCreateUrlTree(t,this.urlSerializer.parse(t),e,l)}applyRedirectCreateUrlTree(e,t,l,V){const d=this.createSegmentGroup(e,t.root,l,V);return new aV(d,this.createQueryParams(t.queryParams,this.urlTree.queryParams),t.fragment)}createQueryParams(e,t){const l={};return qe(e,(V,d)=>{if("string"==typeof V&&V.startsWith(":")){const U=V.substring(1);l[d]=t[U]}else l[d]=V}),l}createSegmentGroup(e,t,l,V){const d=this.createSegments(e,t.segments,l,V);let a={};return qe(t.children,(U,N)=>{a[N]=this.createSegmentGroup(e,U,l,V)}),new K(d,a)}createSegments(e,t,l,V){return t.map(d=>d.path.startsWith(":")?this.findPosParam(e,d,V):this.findOrReturn(d,l))}findPosParam(e,t,l){const V=l[t.path.substring(1)];if(!V)throw new k(4001,nR);return V}findOrReturn(e,t){let l=0;for(const V of t){if(V.path===e.path)return t.splice(l),V;l++}return e}}class HX{}class vX{constructor(e,t,l,V,d,a,U,N){this.injector=e,this.rootComponentType=t,this.config=l,this.urlTree=V,this.url=d,this.paramsInheritanceStrategy=a,this.relativeLinkResolution=U,this.urlSerializer=N}recognize(){const e=eR(this.urlTree.root,[],[],this.config.filter(t=>void 0===t.redirectTo),this.relativeLinkResolution).segmentGroup;return this.processSegmentGroup(this.injector,this.config,e,C).pipe(D(t=>{if(null===t)return null;const l=new _N([],Object.freeze({}),Object.freeze({...this.urlTree.queryParams}),this.urlTree.fragment,{},C,this.rootComponentType,null,this.urlTree.root,-1,{}),V=new tl(l,t),d=new g0(this.url,V);return this.inheritParamsAndData(d._root),d}))}inheritParamsAndData(e){const t=e.value,l=w0(t,this.paramsInheritanceStrategy);t.params=Object.freeze(l.params),t.data=Object.freeze(l.data),e.children.forEach(V=>this.inheritParamsAndData(V))}processSegmentGroup(e,t,l,V){return 0===l.segments.length&&l.hasChildren()?this.processChildren(e,t,l):this.processSegment(e,t,l,l.segments,V)}processChildren(e,t,l){return Be(Object.keys(l.children)).pipe(Sl(V=>{const d=l.children[V],a=q0(t,V);return this.processSegmentGroup(e,a,d,V)}),h0((V,d)=>V&&d?(V.push(...d),V):null),function Ux(n,e=!1){return ze((t,l)=>{let V=0;t.subscribe(pe(l,d=>{const a=n(d,V++);(a||e)&&l.next(d),!a&&l.complete()}))})}(V=>null!==V),vN(null),W0(),D(V=>{if(null===V)return null;const d=dm(V);return function wX(n){n.sort((e,t)=>e.value.outlet===C?-1:t.value.outlet===C?1:e.value.outlet.localeCompare(t.value.outlet))}(d),d}))}processSegment(e,t,l,V,d){return Be(t).pipe(Sl(a=>this.processSegmentAgainstRoute(a._injector??e,a,l,V,d)),El(a=>!!a),$n(a=>{if(Yi(a))return nm(l,V,d)?b([]):b(null);throw a}))}processSegmentAgainstRoute(e,t,l,V,d){if(t.redirectTo||!tm(t,l,V,d))return b(null);let a;if("**"===t.path){const U=V.length>0?m0(V).parameters:{},N=Um(l)+V.length;a=b({snapshot:new _N(V,U,Object.freeze({...this.urlTree.queryParams}),this.urlTree.fragment,Rm(t),_t(t),t.component??t._loadedComponent??null,t,am(l),N,Zm(t),N),consumedSegments:[],remainingSegments:[]})}else a=em(l,t,V,e).pipe(D(({matched:U,consumedSegments:N,remainingSegments:R,parameters:Z})=>{if(!U)return null;const r=Um(l)+N.length;return{snapshot:new _N(N,Z,Object.freeze({...this.urlTree.queryParams}),this.urlTree.fragment,Rm(t),_t(t),t.component??t._loadedComponent??null,t,am(l),r,Zm(t),r),consumedSegments:N,remainingSegments:R}}));return a.pipe(Xt(U=>{if(null===U)return b(null);const{snapshot:N,consumedSegments:R,remainingSegments:Z}=U;e=t._injector??e;const r=t._loadedInjector??e,c=function gX(n){return n.children?n.children:n.loadChildren?n._loadedRoutes:[]}(t),{segmentGroup:i,slicedSegments:o}=eR(l,R,Z,c.filter(T=>void 0===T.redirectTo),this.relativeLinkResolution);if(0===o.length&&i.hasChildren())return this.processChildren(r,c,i).pipe(D(T=>null===T?null:[new tl(N,T)]));if(0===c.length&&0===o.length)return b([new tl(N,[])]);const s=_t(t)===d;return this.processSegment(r,c,i,o,s?C:d).pipe(D(T=>null===T?null:[new tl(N,T)]))}))}}function IX(n){const e=n.value.routeConfig;return e&&""===e.path&&void 0===e.redirectTo}function dm(n){const e=[],t=new Set;for(const l of n){if(!IX(l)){e.push(l);continue}const V=e.find(d=>l.value.routeConfig===d.value.routeConfig);void 0!==V?(V.children.push(...l.children),t.add(V)):e.push(l)}for(const l of t){const V=dm(l.children);e.push(new tl(l.value,V))}return e.filter(l=>!t.has(l))}function am(n){let e=n;for(;e._sourceSegment;)e=e._sourceSegment;return e}function Um(n){let e=n,t=e._segmentIndexShift??0;for(;e._sourceSegment;)e=e._sourceSegment,t+=e._segmentIndexShift??0;return t-1}function Rm(n){return n.data||{}}function Zm(n){return n.resolve||{}}function rm(n){return"string"==typeof n.title||null===n.title}function zi(n){return Xt(e=>{const t=n(e);return t?Be(t).pipe(D(()=>e)):b(e)})}let cm=(()=>{class n{buildTitle(t){let l,V=t.root;for(;void 0!==V;)l=this.getResolvedTitleForRoute(V)??l,V=V.children.find(d=>d.outlet===C);return l}getResolvedTitleForRoute(t){return t.data[Sa]}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:function(){return me(im)},providedIn:"root"}),n})(),im=(()=>{class n extends cm{constructor(t){super(),this.title=t}updateTitle(t){const l=this.buildTitle(t);void 0!==l&&this.title.setTitle(l)}}return n.\u0275fac=function(t){return new(t||n)(h(a0))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();class AX{}class ey extends class $X{shouldDetach(e){return!1}store(e,t){}shouldAttach(e){return!1}retrieve(e){return null}shouldReuseRoute(e,t){return e.routeConfig===t.routeConfig}}{}const dR=new E("",{providedIn:"root",factory:()=>({})}),bi=new E("ROUTES");let ui=(()=>{class n{constructor(t,l){this.injector=t,this.compiler=l,this.componentLoaders=new WeakMap,this.childrenLoaders=new WeakMap}loadComponent(t){if(this.componentLoaders.get(t))return this.componentLoaders.get(t);if(t._loadedComponent)return b(t._loadedComponent);this.onLoadStartListener&&this.onLoadStartListener(t);const l=Yl(t.loadComponent()).pipe(Ye(d=>{this.onLoadEndListener&&this.onLoadEndListener(t),t._loadedComponent=d}),wN(()=>{this.componentLoaders.delete(t)})),V=new s0(l,()=>new u).pipe(Ui());return this.componentLoaders.set(t,V),V}loadChildren(t,l){if(this.childrenLoaders.get(l))return this.childrenLoaders.get(l);if(l._loadedRoutes)return b({routes:l._loadedRoutes,injector:l._loadedInjector});this.onLoadStartListener&&this.onLoadStartListener(l);const d=this.loadModuleFactoryOrRoutes(l.loadChildren).pipe(D(U=>{this.onLoadEndListener&&this.onLoadEndListener(l);let N,R,Z=!1;Array.isArray(U)?R=U:(N=U.create(t).injector,R=M0(N.get(bi,[],X.Self|X.Optional)));return{routes:R.map(Si),injector:N}}),wN(()=>{this.childrenLoaders.delete(l)})),a=new s0(d,()=>new u).pipe(Ui());return this.childrenLoaders.set(l,a),a}loadModuleFactoryOrRoutes(t){return Yl(t()).pipe(Ce(l=>l instanceof LF||Array.isArray(l)?b(l):Be(this.compiler.compileModuleAsync(l))))}}return n.\u0275fac=function(t){return new(t||n)(h(ge),h(mc))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();class ny{}class ly{shouldProcessUrl(e){return!0}extract(e){return e}merge(e,t){return e}}function Vy(n){throw n}function dy(n,e,t){return e.parse("/")}const ay={paths:"exact",fragment:"ignored",matrixParams:"ignored",queryParams:"exact"},Uy={paths:"subset",fragment:"ignored",matrixParams:"ignored",queryParams:"subset"};function sm(){const n=me(J0),e=me(Ga),t=me(MN),l=me(ge),V=me(mc),d=me(bi,{optional:!0})??[],a=me(dR,{optional:!0})??{},U=me(im),N=me(cm,{optional:!0}),R=me(ny,{optional:!0}),Z=me(AX,{optional:!0}),r=new Ae(null,n,e,t,l,V,M0(d));return R&&(r.urlHandlingStrategy=R),Z&&(r.routeReuseStrategy=Z),r.titleStrategy=N??U,function Ny(n,e){n.errorHandler&&(e.errorHandler=n.errorHandler),n.malformedUriErrorHandler&&(e.malformedUriErrorHandler=n.malformedUriErrorHandler),n.onSameUrlNavigation&&(e.onSameUrlNavigation=n.onSameUrlNavigation),n.paramsInheritanceStrategy&&(e.paramsInheritanceStrategy=n.paramsInheritanceStrategy),n.relativeLinkResolution&&(e.relativeLinkResolution=n.relativeLinkResolution),n.urlUpdateStrategy&&(e.urlUpdateStrategy=n.urlUpdateStrategy),n.canceledNavigationResolution&&(e.canceledNavigationResolution=n.canceledNavigationResolution)}(a,r),r}let Ae=(()=>{class n{constructor(t,l,V,d,a,U,N){this.rootComponentType=t,this.urlSerializer=l,this.rootContexts=V,this.location=d,this.config=N,this.lastSuccessfulNavigation=null,this.currentNavigation=null,this.disposed=!1,this.navigationId=0,this.currentPageId=0,this.isNgZoneEnabled=!1,this.events=new u,this.errorHandler=Vy,this.malformedUriErrorHandler=dy,this.navigated=!1,this.lastSuccessfulId=-1,this.afterPreactivation=()=>b(void 0),this.urlHandlingStrategy=new ly,this.routeReuseStrategy=new ey,this.onSameUrlNavigation="ignore",this.paramsInheritanceStrategy="emptyOnly",this.urlUpdateStrategy="deferred",this.relativeLinkResolution="corrected",this.canceledNavigationResolution="replace",this.configLoader=a.get(ui),this.configLoader.onLoadEndListener=c=>this.triggerEvent(new gx(c)),this.configLoader.onLoadStartListener=c=>this.triggerEvent(new wx(c)),this.ngModule=a.get(Al),this.console=a.get(kb);const r=a.get(_);this.isNgZoneEnabled=r instanceof _&&_.isInAngularZone(),this.resetConfig(N),this.currentUrlTree=function cx(){return new aV(new K([],{}),{},null)}(),this.rawUrlTree=this.currentUrlTree,this.browserUrlTree=this.currentUrlTree,this.routerState=v0(this.currentUrlTree,this.rootComponentType),this.transitions=new yt({id:0,targetPageId:0,currentUrlTree:this.currentUrlTree,currentRawUrl:this.currentUrlTree,extractedUrl:this.urlHandlingStrategy.extract(this.currentUrlTree),urlAfterRedirects:this.urlHandlingStrategy.extract(this.currentUrlTree),rawUrl:this.currentUrlTree,extras:{},resolve:null,reject:null,promise:Promise.resolve(!0),source:"imperative",restoredState:null,currentSnapshot:this.routerState.snapshot,targetSnapshot:null,currentRouterState:this.routerState,targetRouterState:null,guards:{canActivateChecks:[],canDeactivateChecks:[]},guardsResult:null}),this.navigations=this.setupNavigations(this.transitions),this.processNavigations()}get browserPageId(){return this.location.getState()?.\u0275routerPageId}setupNavigations(t){const l=this.events;return t.pipe(_e(V=>0!==V.id),D(V=>({...V,extractedUrl:this.urlHandlingStrategy.extract(V.rawUrl)})),Xt(V=>{let d=!1,a=!1;return b(V).pipe(Ye(U=>{this.currentNavigation={id:U.id,initialUrl:U.rawUrl,extractedUrl:U.extractedUrl,trigger:U.source,extras:U.extras,previousNavigation:this.lastSuccessfulNavigation?{...this.lastSuccessfulNavigation,previousNavigation:null}:null}}),Xt(U=>{const N=this.browserUrlTree.toString(),R=!this.navigated||U.extractedUrl.toString()!==N||N!==this.currentUrlTree.toString();if(("reload"===this.onSameUrlNavigation||R)&&this.urlHandlingStrategy.shouldProcessUrl(U.rawUrl))return Tm(U.source)&&(this.browserUrlTree=U.extractedUrl),b(U).pipe(Xt(r=>{const c=this.transitions.getValue();return l.next(new Ti(r.id,this.serializeUrl(r.extractedUrl),r.source,r.restoredState)),c!==this.transitions.getValue()?pn:Promise.resolve(r)}),function jX(n,e,t,l){return Xt(V=>function XX(n,e,t,l,V){return new yX(n,e,t,l,V).apply()}(n,e,t,V.extractedUrl,l).pipe(D(d=>({...V,urlAfterRedirects:d}))))}(this.ngModule.injector,this.configLoader,this.urlSerializer,this.config),Ye(r=>{this.currentNavigation={...this.currentNavigation,finalUrl:r.urlAfterRedirects},V.urlAfterRedirects=r.urlAfterRedirects}),function LX(n,e,t,l,V,d){return Ce(a=>function OX(n,e,t,l,V,d,a="emptyOnly",U="legacy"){return new vX(n,e,t,l,V,a,U,d).recognize().pipe(Xt(N=>null===N?function BX(n){return new ie(e=>e.error(n))}(new HX):b(N)))}(n,e,t,a.urlAfterRedirects,l.serialize(a.urlAfterRedirects),l,V,d).pipe(D(U=>({...a,targetSnapshot:U}))))}(this.ngModule.injector,this.rootComponentType,this.config,this.urlSerializer,this.paramsInheritanceStrategy,this.relativeLinkResolution),Ye(r=>{if(V.targetSnapshot=r.targetSnapshot,"eager"===this.urlUpdateStrategy){if(!r.extras.skipLocationChange){const i=this.urlHandlingStrategy.merge(r.urlAfterRedirects,r.rawUrl);this.setBrowserUrl(i,r)}this.browserUrlTree=r.urlAfterRedirects}const c=new jx(r.id,this.serializeUrl(r.extractedUrl),this.serializeUrl(r.urlAfterRedirects),r.targetSnapshot);l.next(c)}));if(R&&this.rawUrlTree&&this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree)){const{id:c,extractedUrl:i,source:o,restoredState:s,extras:T}=U,W=new Ti(c,this.serializeUrl(i),o,s);l.next(W);const p=v0(i,this.rootComponentType).snapshot;return b(V={...U,targetSnapshot:p,urlAfterRedirects:i,extras:{...T,skipLocationChange:!1,replaceUrl:!1}})}return this.rawUrlTree=U.rawUrl,U.resolve(null),pn}),Ye(U=>{const N=new Hx(U.id,this.serializeUrl(U.extractedUrl),this.serializeUrl(U.urlAfterRedirects),U.targetSnapshot);this.triggerEvent(N)}),D(U=>V={...U,guards:NX(U.targetSnapshot,U.currentSnapshot,this.rootContexts)}),function FX(n,e){return Ce(t=>{const{targetSnapshot:l,currentSnapshot:V,guards:{canActivateChecks:d,canDeactivateChecks:a}}=t;return 0===a.length&&0===d.length?b({...t,guardsResult:!0}):function MX(n,e,t,l){return Be(n).pipe(Ce(V=>function YX(n,e,t,l,V){const d=e&&e.routeConfig?e.routeConfig.canDeactivate:null;return d&&0!==d.length?b(d.map(U=>{const N=Da(e)??V,R=hd(U,N);return Yl(function TX(n){return n&&ya(n.canDeactivate)}(R)?R.canDeactivate(n,e,t,l):N.runInContext(()=>R(n,e,t,l))).pipe(El())})).pipe(Wd()):b(!0)}(V.component,V.route,t,e,l)),El(V=>!0!==V,!0))}(a,l,V,n).pipe(Ce(U=>U&&function cX(n){return"boolean"==typeof n}(U)?function mX(n,e,t,l){return Be(e).pipe(Sl(V=>ON(function kX(n,e){return null!==n&&e&&e(new Ix(n)),b(!0)}(V.route.parent,l),function pX(n,e){return null!==n&&e&&e(new Lx(n)),b(!0)}(V.route,l),function SX(n,e,t){const l=e[e.length-1],d=e.slice(0,e.length-1).reverse().map(a=>function RX(n){const e=n.routeConfig?n.routeConfig.canActivateChild:null;return e&&0!==e.length?{node:n,guards:e}:null}(a)).filter(a=>null!==a).map(a=>o0(()=>b(a.guards.map(N=>{const R=Da(a.node)??t,Z=hd(N,R);return Yl(function sX(n){return n&&ya(n.canActivateChild)}(Z)?Z.canActivateChild(l,n):R.runInContext(()=>Z(l,n))).pipe(El())})).pipe(Wd())));return b(d).pipe(Wd())}(n,V.path,t),function EX(n,e,t){const l=e.routeConfig?e.routeConfig.canActivate:null;if(!l||0===l.length)return b(!0);const V=l.map(d=>o0(()=>{const a=Da(e)??t,U=hd(d,a);return Yl(function oX(n){return n&&ya(n.canActivate)}(U)?U.canActivate(e,n):a.runInContext(()=>U(e,n))).pipe(El())}));return b(V).pipe(Wd())}(n,V.route,t))),El(V=>!0!==V,!0))}(l,d,n,e):b(U)),D(U=>({...t,guardsResult:U})))})}(this.ngModule.injector,U=>this.triggerEvent(U)),Ye(U=>{if(V.guardsResult=U.guardsResult,NV(U.guardsResult))throw f0(0,U.guardsResult);const N=new Bx(U.id,this.serializeUrl(U.extractedUrl),this.serializeUrl(U.urlAfterRedirects),U.targetSnapshot,!!U.guardsResult);this.triggerEvent(N)}),_e(U=>!!U.guardsResult||(this.restoreHistory(U),this.cancelNavigationTransition(U,"",3),!1)),zi(U=>{if(U.guards.canActivateChecks.length)return b(U).pipe(Ye(N=>{const R=new Ox(N.id,this.serializeUrl(N.extractedUrl),this.serializeUrl(N.urlAfterRedirects),N.targetSnapshot);this.triggerEvent(R)}),Xt(N=>{let R=!1;return b(N).pipe(function CX(n,e){return Ce(t=>{const{targetSnapshot:l,guards:{canActivateChecks:V}}=t;if(!V.length)return b(t);let d=0;return Be(V).pipe(Sl(a=>function KX(n,e,t,l){const V=n.routeConfig,d=n._resolve;return void 0!==V?.title&&!rm(V)&&(d[Sa]=V.title),function PX(n,e,t,l){const V=function _X(n){return[...Object.keys(n),...Object.getOwnPropertySymbols(n)]}(n);if(0===V.length)return b({});const d={};return Be(V).pipe(Ce(a=>function qX(n,e,t,l){const V=Da(e)??l,d=hd(n,V);return Yl(d.resolve?d.resolve(e,t):V.runInContext(()=>d(e,t)))}(n[a],e,t,l).pipe(El(),Ye(U=>{d[a]=U}))),Ni(1),function Nx(n){return D(()=>n)}(d),$n(a=>Yi(a)?pn:cd(a)))}(d,n,e,l).pipe(D(a=>(n._resolvedData=a,n.data=w0(n,t).resolve,V&&rm(V)&&(n.data[Sa]=V.title),null)))}(a.route,l,n,e)),Ye(()=>d++),Ni(1),Ce(a=>d===V.length?b(t):pn))})}(this.paramsInheritanceStrategy,this.ngModule.injector),Ye({next:()=>R=!0,complete:()=>{R||(this.restoreHistory(N),this.cancelNavigationTransition(N,"",2))}}))}),Ye(N=>{const R=new vx(N.id,this.serializeUrl(N.extractedUrl),this.serializeUrl(N.urlAfterRedirects),N.targetSnapshot);this.triggerEvent(R)}))}),zi(U=>{const N=R=>{const Z=[];R.routeConfig?.loadComponent&&!R.routeConfig._loadedComponent&&Z.push(this.configLoader.loadComponent(R.routeConfig).pipe(Ye(r=>{R.component=r}),D(()=>{})));for(const r of R.children)Z.push(...N(r));return Z};return BN(N(U.targetSnapshot.root)).pipe(vN(),Wn(1))}),zi(()=>this.afterPreactivation()),D(U=>{const N=function qx(n,e,t){const l=ua(n,e._root,t?t._root:void 0);return new O0(l,e)}(this.routeReuseStrategy,U.targetSnapshot,U.currentRouterState);return V={...U,targetRouterState:N}}),Ye(U=>{this.currentUrlTree=U.urlAfterRedirects,this.rawUrlTree=this.urlHandlingStrategy.merge(U.urlAfterRedirects,U.rawUrl),this.routerState=U.targetRouterState,"deferred"===this.urlUpdateStrategy&&(U.extras.skipLocationChange||this.setBrowserUrl(this.rawUrlTree,U),this.browserUrlTree=U.urlAfterRedirects)}),((n,e,t)=>D(l=>(new UX(e,l.targetRouterState,l.currentRouterState,t).activate(n),l)))(this.rootContexts,this.routeReuseStrategy,U=>this.triggerEvent(U)),Ye({next(){d=!0},complete(){d=!0}}),wN(()=>{d||a||this.cancelNavigationTransition(V,"",1),this.currentNavigation?.id===V.id&&(this.currentNavigation=null)}),$n(U=>{if(a=!0,K0(U)){C0(U)||(this.navigated=!0,this.restoreHistory(V,!0));const N=new PN(V.id,this.serializeUrl(V.extractedUrl),U.message,U.cancellationCode);if(l.next(N),C0(U)){const R=this.urlHandlingStrategy.merge(U.url,this.rawUrlTree),Z={skipLocationChange:V.extras.skipLocationChange,replaceUrl:"eager"===this.urlUpdateStrategy||Tm(V.source)};this.scheduleNavigation(R,"imperative",null,Z,{resolve:V.resolve,reject:V.reject,promise:V.promise})}else V.resolve(!1)}else{this.restoreHistory(V,!0);const N=new j0(V.id,this.serializeUrl(V.extractedUrl),U,V.targetSnapshot??void 0);l.next(N);try{V.resolve(this.errorHandler(U))}catch(R){V.reject(R)}}return pn}))}))}resetRootComponentType(t){this.rootComponentType=t,this.routerState.root.component=this.rootComponentType}setTransition(t){this.transitions.next({...this.transitions.value,...t})}initialNavigation(){this.setUpLocationChangeListener(),0===this.navigationId&&this.navigateByUrl(this.location.path(!0),{replaceUrl:!0})}setUpLocationChangeListener(){this.locationSubscription||(this.locationSubscription=this.location.subscribe(t=>{const l="popstate"===t.type?"popstate":"hashchange";"popstate"===l&&setTimeout(()=>{const V={replaceUrl:!0},d=t.state?.navigationId?t.state:null;if(d){const U={...d};delete U.navigationId,delete U.\u0275routerPageId,0!==Object.keys(U).length&&(V.state=U)}const a=this.parseUrl(t.url);this.scheduleNavigation(a,l,d,V)},0)}))}get url(){return this.serializeUrl(this.currentUrlTree)}getCurrentNavigation(){return this.currentNavigation}triggerEvent(t){this.events.next(t)}resetConfig(t){this.config=t.map(Si),this.navigated=!1,this.lastSuccessfulId=-1}ngOnDestroy(){this.dispose()}dispose(){this.transitions.complete(),this.locationSubscription&&(this.locationSubscription.unsubscribe(),this.locationSubscription=void 0),this.disposed=!0}createUrlTree(t,l={}){const{relativeTo:V,queryParams:d,fragment:a,queryParamsHandling:U,preserveFragment:N}=l,R=V||this.routerState.root,Z=N?this.currentUrlTree.fragment:a;let r=null;switch(U){case"merge":r={...this.currentUrlTree.queryParams,...d};break;case"preserve":r=this.currentUrlTree.queryParams;break;default:r=d||null}return null!==r&&(r=this.removeEmptyProps(r)),ux(R,this.currentUrlTree,t,r,Z??null)}navigateByUrl(t,l={skipLocationChange:!1}){const V=NV(t)?t:this.parseUrl(t),d=this.urlHandlingStrategy.merge(V,this.rawUrlTree);return this.scheduleNavigation(d,"imperative",null,l)}navigate(t,l={skipLocationChange:!1}){return function Ry(n){for(let e=0;e<n.length;e++){if(null==n[e])throw new k(4008,false)}}(t),this.navigateByUrl(this.createUrlTree(t,l),l)}serializeUrl(t){return this.urlSerializer.serialize(t)}parseUrl(t){let l;try{l=this.urlSerializer.parse(t)}catch(V){l=this.malformedUriErrorHandler(V,this.urlSerializer,t)}return l}isActive(t,l){let V;if(V=!0===l?{...ay}:!1===l?{...Uy}:l,NV(t))return k0(this.currentUrlTree,t,V);const d=this.parseUrl(t);return k0(this.currentUrlTree,d,V)}removeEmptyProps(t){return Object.keys(t).reduce((l,V)=>{const d=t[V];return null!=d&&(l[V]=d),l},{})}processNavigations(){this.navigations.subscribe(t=>{this.navigated=!0,this.lastSuccessfulId=t.id,this.currentPageId=t.targetPageId,this.events.next(new RV(t.id,this.serializeUrl(t.extractedUrl),this.serializeUrl(this.currentUrlTree))),this.lastSuccessfulNavigation=this.currentNavigation,this.titleStrategy?.updateTitle(this.routerState.snapshot),t.resolve(!0)},t=>{this.console.warn(`Unhandled Navigation Error: ${t}`)})}scheduleNavigation(t,l,V,d,a){if(this.disposed)return Promise.resolve(!1);let U,N,R;a?(U=a.resolve,N=a.reject,R=a.promise):R=new Promise((c,i)=>{U=c,N=i});const Z=++this.navigationId;let r;return"computed"===this.canceledNavigationResolution?(0===this.currentPageId&&(V=this.location.getState()),r=V&&V.\u0275routerPageId?V.\u0275routerPageId:d.replaceUrl||d.skipLocationChange?this.browserPageId??0:(this.browserPageId??0)+1):r=0,this.setTransition({id:Z,targetPageId:r,source:l,restoredState:V,currentUrlTree:this.currentUrlTree,currentRawUrl:this.rawUrlTree,rawUrl:t,extras:d,resolve:U,reject:N,promise:R,currentSnapshot:this.routerState.snapshot,currentRouterState:this.routerState}),R.catch(c=>Promise.reject(c))}setBrowserUrl(t,l){const V=this.urlSerializer.serialize(t),d={...l.extras.state,...this.generateNgRouterState(l.id,l.targetPageId)};this.location.isCurrentPathEqualTo(V)||l.extras.replaceUrl?this.location.replaceState(V,"",d):this.location.go(V,"",d)}restoreHistory(t,l=!1){if("computed"===this.canceledNavigationResolution){const V=this.currentPageId-t.targetPageId;"popstate"!==t.source&&"eager"!==this.urlUpdateStrategy&&this.currentUrlTree!==this.currentNavigation?.finalUrl||0===V?this.currentUrlTree===this.currentNavigation?.finalUrl&&0===V&&(this.resetState(t),this.browserUrlTree=t.currentUrlTree,this.resetUrlToCurrentUrlTree()):this.location.historyGo(V)}else"replace"===this.canceledNavigationResolution&&(l&&this.resetState(t),this.resetUrlToCurrentUrlTree())}resetState(t){this.routerState=t.currentRouterState,this.currentUrlTree=t.currentUrlTree,this.rawUrlTree=this.urlHandlingStrategy.merge(this.currentUrlTree,t.rawUrl)}resetUrlToCurrentUrlTree(){this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree),"",this.generateNgRouterState(this.lastSuccessfulId,this.currentPageId))}cancelNavigationTransition(t,l,V){const d=new PN(t.id,this.serializeUrl(t.extractedUrl),l,V);this.triggerEvent(d),t.resolve(!1)}generateNgRouterState(t,l){return"computed"===this.canceledNavigationResolution?{navigationId:t,\u0275routerPageId:l}:{navigationId:t}}}return n.\u0275fac=function(t){Er()},n.\u0275prov=S({token:n,factory:function(){return sm()},providedIn:"root"}),n})();function Tm(n){return"imperative"!==n}class hm{}let cy=(()=>{class n{constructor(t,l,V,d,a){this.router=t,this.injector=V,this.preloadingStrategy=d,this.loader=a}setUpPreloading(){this.subscription=this.router.events.pipe(_e(t=>t instanceof RV),Sl(()=>this.preload())).subscribe(()=>{})}preload(){return this.processRoutes(this.injector,this.router.config)}ngOnDestroy(){this.subscription&&this.subscription.unsubscribe()}processRoutes(t,l){const V=[];for(const d of l){d.providers&&!d._injector&&(d._injector=aN(d.providers,t,`Route: ${d.path}`));const a=d._injector??t,U=d._loadedInjector??a;d.loadChildren&&!d._loadedRoutes&&void 0===d.canLoad||d.loadComponent&&!d._loadedComponent?V.push(this.preloadConfig(a,d)):(d.children||d._loadedRoutes)&&V.push(this.processRoutes(U,d.children??d._loadedRoutes))}return Be(V).pipe(mV())}preloadConfig(t,l){return this.preloadingStrategy.preload(l,()=>{let V;V=l.loadChildren&&void 0===l.canLoad?this.loader.loadChildren(t,l):b(null);const d=V.pipe(Ce(a=>null===a?b(void 0):(l._loadedRoutes=a.routes,l._loadedInjector=a.injector,this.processRoutes(a.injector??t,a.routes))));return l.loadComponent&&!l._loadedComponent?Be([d,this.loader.loadComponent(l)]).pipe(mV()):d})}}return n.\u0275fac=function(t){return new(t||n)(h(Ae),h(mc),h(il),h(hm),h(ui))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const xi=new E("");let Wm=(()=>{class n{constructor(t,l,V={}){this.router=t,this.viewportScroller=l,this.options=V,this.lastId=0,this.lastSource="imperative",this.restoredId=0,this.store={},V.scrollPositionRestoration=V.scrollPositionRestoration||"disabled",V.anchorScrolling=V.anchorScrolling||"disabled"}init(){"disabled"!==this.options.scrollPositionRestoration&&this.viewportScroller.setHistoryScrollRestoration("manual"),this.routerEventsSubscription=this.createScrollEvents(),this.scrollEventsSubscription=this.consumeScrollEvents()}createScrollEvents(){return this.router.events.subscribe(t=>{t instanceof Ti?(this.store[this.lastId]=this.viewportScroller.getScrollPosition(),this.lastSource=t.navigationTrigger,this.restoredId=t.restoredState?t.restoredState.navigationId:0):t instanceof RV&&(this.lastId=t.id,this.scheduleScrollEvent(t,this.router.parseUrl(t.urlAfterRedirects).fragment))})}consumeScrollEvents(){return this.router.events.subscribe(t=>{t instanceof H0&&(t.position?"top"===this.options.scrollPositionRestoration?this.viewportScroller.scrollToPosition([0,0]):"enabled"===this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition(t.position):t.anchor&&"enabled"===this.options.anchorScrolling?this.viewportScroller.scrollToAnchor(t.anchor):"disabled"!==this.options.scrollPositionRestoration&&this.viewportScroller.scrollToPosition([0,0]))})}scheduleScrollEvent(t,l){this.router.triggerEvent(new H0(t,"popstate"===this.lastSource?this.store[this.restoredId]:null,l))}ngOnDestroy(){this.routerEventsSubscription&&this.routerEventsSubscription.unsubscribe(),this.scrollEventsSubscription&&this.scrollEventsSubscription.unsubscribe()}}return n.\u0275fac=function(t){Er()},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();function Fd(n,e){return{\u0275kind:n,\u0275providers:e}}function Xi(n){return[{provide:bi,multi:!0,useValue:n}]}function Mm(){const n=me(ge);return e=>{const t=n.get(tV);if(e!==t.components[0])return;const l=n.get(Ae),V=n.get(mm);1===n.get(yi)&&l.initialNavigation(),n.get(pm,null,X.Optional)?.setUpPreloading(),n.get(xi,null,X.Optional)?.init(),l.resetRootComponentType(t.componentTypes[0]),V.closed||(V.next(),V.unsubscribe())}}const mm=new E("",{factory:()=>new u}),yi=new E("",{providedIn:"root",factory:()=>1});const pm=new E("");function Ty(n){return Fd(0,[{provide:pm,useExisting:cy},{provide:hm,useExisting:n}])}const km=new E("ROUTER_FORROOT_GUARD"),hy=[MN,{provide:J0,useClass:Zi},{provide:Ae,useFactory:sm},Ga,{provide:ZV,useFactory:function Fm(n){return n.routerState.root},deps:[Ae]},ui];function Wy(){return new IM("Router",Ae)}let Em=(()=>{class n{constructor(t){}static forRoot(t,l){return{ngModule:n,providers:[hy,[],Xi(t),{provide:km,useFactory:py,deps:[[Ae,new gn,new OV]]},{provide:dR,useValue:l||{}},l?.useHash?{provide:lV,useClass:cu}:{provide:lV,useClass:T1},{provide:xi,useFactory:()=>{const n=me(Ae),e=me(zG),t=me(dR);return t.scrollOffset&&e.setOffset(t.scrollOffset),new Wm(n,e,t)}},l?.preloadingStrategy?Ty(l.preloadingStrategy).\u0275providers:[],{provide:IM,multi:!0,useFactory:Wy},l?.initialNavigation?ky(l):[],[{provide:Sm,useFactory:Mm},{provide:jM,multi:!0,useExisting:Sm}]]}}static forChild(t){return{ngModule:n,providers:[Xi(t)]}}}return n.\u0275fac=function(t){return new(t||n)(h(km,8))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[ki]}),n})();function py(n){return"guarded"}function ky(n){return["disabled"===n.initialNavigation?Fd(3,[{provide:rN,multi:!0,useFactory:()=>{const e=me(Ae);return()=>{e.setUpLocationChangeListener()}}},{provide:yi,useValue:2}]).\u0275providers:[],"enabledBlocking"===n.initialNavigation?Fd(2,[{provide:yi,useValue:0},{provide:rN,multi:!0,deps:[ge],useFactory:e=>{const t=e.get(Zu,Promise.resolve());let l=!1;return()=>t.then(()=>new Promise(d=>{const a=e.get(Ae),U=e.get(mm);(function V(d){e.get(Ae).events.pipe(_e(U=>U instanceof RV||U instanceof PN||U instanceof j0),D(U=>U instanceof RV||U instanceof PN&&(0===U.code||1===U.code)&&null),_e(U=>null!==U),Wn(1)).subscribe(()=>{d()})})(()=>{d(!0),l=!0}),a.afterPreactivation=()=>(d(!0),l||U.closed?b(void 0):U),a.initialNavigation()}))}}]).\u0275providers:[]]}const Sm=new E(""),Sy=[];let Yy=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[Em.forRoot(Sy),Em]}),n})();function qt(n){return null!=n&&"false"!=`${n}`}function RR(n,e=0){return function Jy(n){return!isNaN(parseFloat(n))&&!isNaN(Number(n))}(n)?Number(n):e}function Ha(n){return Array.isArray(n)?n:[n]}function je(n){return null==n?"":"string"==typeof n?n:`${n}px`}function Le(n){return n instanceof we?n.nativeElement:n}const Qy=["addListener","removeListener"],zy=["addEventListener","removeEventListener"],by=["on","off"];function ZR(n,e,t,l){if(te(t)&&(l=t,t=void 0),l)return ZR(n,e,t).pipe(ai(l));const[V,d]=function Dy(n){return te(n.addEventListener)&&te(n.removeEventListener)}(n)?zy.map(a=>U=>n[a](e,U,t)):function uy(n){return te(n.addListener)&&te(n.removeListener)}(n)?Qy.map(Ym(n,e)):function Gy(n){return te(n.on)&&te(n.off)}(n)?by.map(Ym(n,e)):[];if(!V&&$R(n))return Ce(a=>ZR(a,e,t))(ot(n));if(!V)throw new TypeError("Invalid event target");return new ie(a=>{const U=(...N)=>a.next(1<N.length?N:N[0]);return V(U),()=>d(U)})}function Ym(n,e){return t=>l=>n[t](e,l)}class xy extends Fe{constructor(e,t){super()}schedule(e,t=0){return this}}const rR={setInterval(n,e,...t){const{delegate:l}=rR;return l?.setInterval?l.setInterval(n,e,...t):setInterval(n,e,...t)},clearInterval(n){const{delegate:e}=rR;return(e?.clearInterval||clearInterval)(n)},delegate:void 0};class ji extends xy{constructor(e,t){super(e,t),this.scheduler=e,this.work=t,this.pending=!1}schedule(e,t=0){var l;if(this.closed)return this;this.state=e;const V=this.id,d=this.scheduler;return null!=V&&(this.id=this.recycleAsyncId(d,V,t)),this.pending=!0,this.delay=t,this.id=null!==(l=this.id)&&void 0!==l?l:this.requestAsyncId(d,this.id,t),this}requestAsyncId(e,t,l=0){return rR.setInterval(e.flush.bind(e,this),l)}recycleAsyncId(e,t,l=0){if(null!=l&&this.delay===l&&!1===this.pending)return t;null!=t&&rR.clearInterval(t)}execute(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;const l=this._execute(e,t);if(l)return l;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))}_execute(e,t){let V,l=!1;try{this.work(e)}catch(d){l=!0,V=d||new Error("Scheduled action threw falsy error")}if(l)return this.unsubscribe(),V}unsubscribe(){if(!this.closed){const{id:e,scheduler:t}=this,{actions:l}=t;this.work=this.state=this.scheduler=null,this.pending=!1,MV(l,this),null!=e&&(this.id=this.recycleAsyncId(t,e,null)),this.delay=null,super.unsubscribe()}}}const Ba={schedule(n){let e=requestAnimationFrame,t=cancelAnimationFrame;const{delegate:l}=Ba;l&&(e=l.requestAnimationFrame,t=l.cancelAnimationFrame);const V=e(d=>{t=void 0,n(d)});return new Fe(()=>t?.(V))},requestAnimationFrame(...n){const{delegate:e}=Ba;return(e?.requestAnimationFrame||requestAnimationFrame)(...n)},cancelAnimationFrame(...n){const{delegate:e}=Ba;return(e?.cancelAnimationFrame||cancelAnimationFrame)(...n)},delegate:void 0};class Oa{constructor(e,t=Oa.now){this.schedulerActionCtor=e,this.now=t}schedule(e,t=0,l){return new this.schedulerActionCtor(this,e).schedule(l,t)}}Oa.now=Vi.now;class Hi extends Oa{constructor(e,t=Oa.now){super(e,t),this.actions=[],this._active=!1}flush(e){const{actions:t}=this;if(this._active)return void t.push(e);let l;this._active=!0;do{if(l=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,l){for(;e=t.shift();)e.unsubscribe();throw l}}}const Jm=new class yy extends Hi{flush(e){this._active=!0;const t=this._scheduled;this._scheduled=void 0;const{actions:l}=this;let V;e=e||l.shift();do{if(V=e.execute(e.state,e.delay))break}while((e=l[0])&&e.id===t&&l.shift());if(this._active=!1,V){for(;(e=l[0])&&e.id===t&&l.shift();)e.unsubscribe();throw V}}}(class Xy extends ji{constructor(e,t){super(e,t),this.scheduler=e,this.work=t}requestAsyncId(e,t,l=0){return null!==l&&l>0?super.requestAsyncId(e,t,l):(e.actions.push(this),e._scheduled||(e._scheduled=Ba.requestAnimationFrame(()=>e.flush(void 0))))}recycleAsyncId(e,t,l=0){var V;if(null!=l?l>0:this.delay>0)return super.recycleAsyncId(e,t,l);const{actions:d}=e;null!=t&&(null===(V=d[d.length-1])||void 0===V?void 0:V.id)!==t&&(Ba.cancelAnimationFrame(t),e._scheduled=void 0)}});let Bi,jy=1;const cR={};function Qm(n){return n in cR&&(delete cR[n],!0)}const Hy={setImmediate(n){const e=jy++;return cR[e]=!0,Bi||(Bi=Promise.resolve()),Bi.then(()=>Qm(e)&&n()),e},clearImmediate(n){Qm(n)}},{setImmediate:By,clearImmediate:Oy}=Hy,iR={setImmediate(...n){const{delegate:e}=iR;return(e?.setImmediate||By)(...n)},clearImmediate(n){const{delegate:e}=iR;return(e?.clearImmediate||Oy)(n)},delegate:void 0},oR=(new class wy extends Hi{flush(e){this._active=!0;const t=this._scheduled;this._scheduled=void 0;const{actions:l}=this;let V;e=e||l.shift();do{if(V=e.execute(e.state,e.delay))break}while((e=l[0])&&e.id===t&&l.shift());if(this._active=!1,V){for(;(e=l[0])&&e.id===t&&l.shift();)e.unsubscribe();throw V}}}(class vy extends ji{constructor(e,t){super(e,t),this.scheduler=e,this.work=t}requestAsyncId(e,t,l=0){return null!==l&&l>0?super.requestAsyncId(e,t,l):(e.actions.push(this),e._scheduled||(e._scheduled=iR.setImmediate(e.flush.bind(e,void 0))))}recycleAsyncId(e,t,l=0){var V;if(null!=l?l>0:this.delay>0)return super.recycleAsyncId(e,t,l);const{actions:d}=e;null!=t&&(null===(V=d[d.length-1])||void 0===V?void 0:V.id)!==t&&(iR.clearImmediate(t),e._scheduled=void 0)}}),new Hi(ji)),Iy=oR;function zm(n=0,e,t=Iy){let l=-1;return null!=e&&(hs(e)?t=e:l=e),new ie(V=>{let d=function Ly(n){return n instanceof Date&&!isNaN(n)}(n)?+n-t.now():n;d<0&&(d=0);let a=0;return t.schedule(function(){V.closed||(V.next(a++),0<=l?this.schedule(void 0,l):V.complete())},d)})}function bm(n,e=oR){return function fy(n){return ze((e,t)=>{let l=!1,V=null,d=null,a=!1;const U=()=>{if(d?.unsubscribe(),d=null,l){l=!1;const R=V;V=null,t.next(R)}a&&t.complete()},N=()=>{d=null,a&&t.complete()};e.subscribe(pe(t,R=>{l=!0,V=R,d||ot(n(R)).subscribe(d=pe(t,U,N))},()=>{a=!0,(!l||!d||d.closed)&&t.complete()}))})}(()=>zm(n,e))}let Oi;try{Oi=typeof Intl<"u"&&Intl.v8BreakIterator}catch{Oi=!1}let va,cV,wi,Mn,Fn=(()=>{class n{constructor(t){this._platformId=t,this.isBrowser=this._platformId?function QG(n){return n===j1}(this._platformId):"object"==typeof document&&!!document,this.EDGE=this.isBrowser&&/(edge)/i.test(navigator.userAgent),this.TRIDENT=this.isBrowser&&/(msie|trident)/i.test(navigator.userAgent),this.BLINK=this.isBrowser&&!(!window.chrome&&!Oi)&&typeof CSS<"u"&&!this.EDGE&&!this.TRIDENT,this.WEBKIT=this.isBrowser&&/AppleWebKit/i.test(navigator.userAgent)&&!this.BLINK&&!this.EDGE&&!this.TRIDENT,this.IOS=this.isBrowser&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!("MSStream"in window),this.FIREFOX=this.isBrowser&&/(firefox|minefield)/i.test(navigator.userAgent),this.ANDROID=this.isBrowser&&/android/i.test(navigator.userAgent)&&!this.TRIDENT,this.SAFARI=this.isBrowser&&/safari/i.test(navigator.userAgent)&&this.WEBKIT}}return n.\u0275fac=function(t){return new(t||n)(h(iN))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),vi=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})();function rV(n){return function Cy(){if(null==va&&typeof window<"u")try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:()=>va=!0}))}finally{va=va||!1}return va}()?n:!!n.capture}function Ky(){if(null==cV){if("object"!=typeof document||!document||"function"!=typeof Element||!Element)return cV=!1,cV;if("scrollBehavior"in document.documentElement.style)cV=!0;else{const n=Element.prototype.scrollTo;cV=!!n&&!/\{\s*\[native code\]\s*\}/.test(n.toString())}}return cV}function gi(n){if(function Py(){if(null==wi){const n=typeof document<"u"?document.head:null;wi=!(!n||!n.createShadowRoot&&!n.attachShadow)}return wi}()){const e=n.getRootNode?n.getRootNode():null;if(typeof ShadowRoot<"u"&&ShadowRoot&&e instanceof ShadowRoot)return e}return null}function At(n){return n.composedPath?n.composedPath()[0]:n.target}function Ii(){return typeof Mn.__karma__<"u"&&!!Mn.__karma__||typeof Mn.jasmine<"u"&&!!Mn.jasmine||typeof Mn.jest<"u"&&!!Mn.jest||typeof Mn.Mocha<"u"&&!!Mn.Mocha}Mn=typeof global<"u"?global:typeof window<"u"?window:{};const _y=new E("cdk-dir-doc",{providedIn:"root",factory:function qy(){return me(w)}});let fi=(()=>{class n{constructor(t){if(this.value="ltr",this.change=new A,t){const V=t.documentElement?t.documentElement.dir:null,d=(t.body?t.body.dir:null)||V;this.value="ltr"===d||"rtl"===d?d:"ltr"}}ngOnDestroy(){this.change.complete()}}return n.\u0275fac=function(t){return new(t||n)(h(_y,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),wa=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})(),Gm=(()=>{class n{constructor(t,l,V){this._ngZone=t,this._platform=l,this._scrolled=new u,this._globalSubscription=null,this._scrolledCount=0,this.scrollContainers=new Map,this._document=V}register(t){this.scrollContainers.has(t)||this.scrollContainers.set(t,t.elementScrolled().subscribe(()=>this._scrolled.next(t)))}deregister(t){const l=this.scrollContainers.get(t);l&&(l.unsubscribe(),this.scrollContainers.delete(t))}scrolled(t=20){return this._platform.isBrowser?new ie(l=>{this._globalSubscription||this._addGlobalListener();const V=t>0?this._scrolled.pipe(bm(t)).subscribe(l):this._scrolled.subscribe(l);return this._scrolledCount++,()=>{V.unsubscribe(),this._scrolledCount--,this._scrolledCount||this._removeGlobalListener()}}):b()}ngOnDestroy(){this._removeGlobalListener(),this.scrollContainers.forEach((t,l)=>this.deregister(l)),this._scrolled.complete()}ancestorScrolled(t,l){const V=this.getAncestorScrollContainers(t);return this.scrolled(l).pipe(_e(d=>!d||V.indexOf(d)>-1))}getAncestorScrollContainers(t){const l=[];return this.scrollContainers.forEach((V,d)=>{this._scrollableContainsElement(d,t)&&l.push(d)}),l}_getWindow(){return this._document.defaultView||window}_scrollableContainsElement(t,l){let V=Le(l),d=t.getElementRef().nativeElement;do{if(V==d)return!0}while(V=V.parentElement);return!1}_addGlobalListener(){this._globalSubscription=this._ngZone.runOutsideAngular(()=>ZR(this._getWindow().document,"scroll").subscribe(()=>this._scrolled.next()))}_removeGlobalListener(){this._globalSubscription&&(this._globalSubscription.unsubscribe(),this._globalSubscription=null)}}return n.\u0275fac=function(t){return new(t||n)(h(_),h(Fn),h(w,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),Li=(()=>{class n{constructor(t,l,V){this._platform=t,this._change=new u,this._changeListener=d=>{this._change.next(d)},this._document=V,l.runOutsideAngular(()=>{if(t.isBrowser){const d=this._getWindow();d.addEventListener("resize",this._changeListener),d.addEventListener("orientationchange",this._changeListener)}this.change().subscribe(()=>this._viewportSize=null)})}ngOnDestroy(){if(this._platform.isBrowser){const t=this._getWindow();t.removeEventListener("resize",this._changeListener),t.removeEventListener("orientationchange",this._changeListener)}this._change.complete()}getViewportSize(){this._viewportSize||this._updateViewportSize();const t={width:this._viewportSize.width,height:this._viewportSize.height};return this._platform.isBrowser||(this._viewportSize=null),t}getViewportRect(){const t=this.getViewportScrollPosition(),{width:l,height:V}=this.getViewportSize();return{top:t.top,left:t.left,bottom:t.top+V,right:t.left+l,height:V,width:l}}getViewportScrollPosition(){if(!this._platform.isBrowser)return{top:0,left:0};const t=this._document,l=this._getWindow(),V=t.documentElement,d=V.getBoundingClientRect();return{top:-d.top||t.body.scrollTop||l.scrollY||V.scrollTop||0,left:-d.left||t.body.scrollLeft||l.scrollX||V.scrollLeft||0}}change(t=20){return t>0?this._change.pipe(bm(t)):this._change}_getWindow(){return this._document.defaultView||window}_updateViewportSize(){const t=this._getWindow();this._viewportSize=this._platform.isBrowser?{width:t.innerWidth,height:t.innerHeight}:{width:0,height:0}}}return n.\u0275fac=function(t){return new(t||n)(h(Fn),h(_),h(w,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),TR=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})(),Dm=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[wa,vi,TR],wa,TR]}),n})();function xm(n,...e){return e.length?e.some(t=>n[t]):n.altKey||n.shiftKey||n.ctrlKey||n.metaKey}function Xm(n,e=oR){return ze((t,l)=>{let V=null,d=null,a=null;const U=()=>{if(V){V.unsubscribe(),V=null;const R=d;d=null,l.next(R)}};function N(){const R=a+n,Z=e.now();if(Z<R)return V=this.schedule(void 0,R-Z),void l.add(V);U()}t.subscribe(pe(l,R=>{d=R,a=e.now(),V||(V=e.schedule(N,n),l.add(V))},()=>{U(),l.complete()},void 0,()=>{d=V=null}))})}function ym(n){return _e((e,t)=>n<=t)}function jm(n,e=Nl){return n=n??F5,ze((t,l)=>{let V,d=!0;t.subscribe(pe(l,a=>{const U=e(a);(d||!n(V,U))&&(d=!1,V=U,l.next(a))}))})}function F5(n,e){return n===e}function Jl(n){return ze((e,t)=>{ot(n).subscribe(pe(t,()=>t.complete(),LR)),!t.closed&&e.subscribe(t)})}let M5=(()=>{class n{create(t){return typeof MutationObserver>"u"?null:new MutationObserver(t)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),m5=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[M5]}),n})();class S5 extends class E5{constructor(e){this._items=e,this._activeItemIndex=-1,this._activeItem=null,this._wrap=!1,this._letterKeyStream=new u,this._typeaheadSubscription=Fe.EMPTY,this._vertical=!0,this._allowedModifierKeys=[],this._homeAndEnd=!1,this._skipPredicateFn=t=>t.disabled,this._pressedLetters=[],this.tabOut=new u,this.change=new u,e instanceof $l&&e.changes.subscribe(t=>{if(this._activeItem){const V=t.toArray().indexOf(this._activeItem);V>-1&&V!==this._activeItemIndex&&(this._activeItemIndex=V)}})}skipPredicate(e){return this._skipPredicateFn=e,this}withWrap(e=!0){return this._wrap=e,this}withVerticalOrientation(e=!0){return this._vertical=e,this}withHorizontalOrientation(e){return this._horizontal=e,this}withAllowedModifierKeys(e){return this._allowedModifierKeys=e,this}withTypeAhead(e=200){return this._typeaheadSubscription.unsubscribe(),this._typeaheadSubscription=this._letterKeyStream.pipe(Ye(t=>this._pressedLetters.push(t)),Xm(e),_e(()=>this._pressedLetters.length>0),D(()=>this._pressedLetters.join(""))).subscribe(t=>{const l=this._getItemsArray();for(let V=1;V<l.length+1;V++){const d=(this._activeItemIndex+V)%l.length,a=l[d];if(!this._skipPredicateFn(a)&&0===a.getLabel().toUpperCase().trim().indexOf(t)){this.setActiveItem(d);break}}this._pressedLetters=[]}),this}withHomeAndEnd(e=!0){return this._homeAndEnd=e,this}setActiveItem(e){const t=this._activeItem;this.updateActiveItem(e),this._activeItem!==t&&this.change.next(this._activeItemIndex)}onKeydown(e){const t=e.keyCode,V=["altKey","ctrlKey","metaKey","shiftKey"].every(d=>!e[d]||this._allowedModifierKeys.indexOf(d)>-1);switch(t){case 9:return void this.tabOut.next();case 40:if(this._vertical&&V){this.setNextItemActive();break}return;case 38:if(this._vertical&&V){this.setPreviousItemActive();break}return;case 39:if(this._horizontal&&V){"rtl"===this._horizontal?this.setPreviousItemActive():this.setNextItemActive();break}return;case 37:if(this._horizontal&&V){"rtl"===this._horizontal?this.setNextItemActive():this.setPreviousItemActive();break}return;case 36:if(this._homeAndEnd&&V){this.setFirstItemActive();break}return;case 35:if(this._homeAndEnd&&V){this.setLastItemActive();break}return;default:return void((V||xm(e,"shiftKey"))&&(e.key&&1===e.key.length?this._letterKeyStream.next(e.key.toLocaleUpperCase()):(t>=65&&t<=90||t>=48&&t<=57)&&this._letterKeyStream.next(String.fromCharCode(t))))}this._pressedLetters=[],e.preventDefault()}get activeItemIndex(){return this._activeItemIndex}get activeItem(){return this._activeItem}isTyping(){return this._pressedLetters.length>0}setFirstItemActive(){this._setActiveItemByIndex(0,1)}setLastItemActive(){this._setActiveItemByIndex(this._items.length-1,-1)}setNextItemActive(){this._activeItemIndex<0?this.setFirstItemActive():this._setActiveItemByDelta(1)}setPreviousItemActive(){this._activeItemIndex<0&&this._wrap?this.setLastItemActive():this._setActiveItemByDelta(-1)}updateActiveItem(e){const t=this._getItemsArray(),l="number"==typeof e?e:t.indexOf(e);this._activeItem=t[l]??null,this._activeItemIndex=l}_setActiveItemByDelta(e){this._wrap?this._setActiveInWrapMode(e):this._setActiveInDefaultMode(e)}_setActiveInWrapMode(e){const t=this._getItemsArray();for(let l=1;l<=t.length;l++){const V=(this._activeItemIndex+e*l+t.length)%t.length;if(!this._skipPredicateFn(t[V]))return void this.setActiveItem(V)}}_setActiveInDefaultMode(e){this._setActiveItemByIndex(this._activeItemIndex+e,e)}_setActiveItemByIndex(e,t){const l=this._getItemsArray();if(l[e]){for(;this._skipPredicateFn(l[e]);)if(!l[e+=t])return;this.setActiveItem(e)}}_getItemsArray(){return this._items instanceof $l?this._items.toArray():this._items}}{constructor(){super(...arguments),this._origin="program"}setFocusOrigin(e){return this._origin=e,this}setActiveItem(e){super.setActiveItem(e),this.activeItem&&this.activeItem.focus(this._origin)}}function Ci(n){return 0===n.offsetX&&0===n.offsetY}function Ki(n){const e=n.touches&&n.touches[0]||n.changedTouches&&n.changedTouches[0];return!(!e||-1!==e.identifier||null!=e.radiusX&&1!==e.radiusX||null!=e.radiusY&&1!==e.radiusY)}const u5=new E("cdk-input-modality-detector-options"),G5={ignoreKeys:[18,17,224,91,16]},md=rV({passive:!0,capture:!0});let D5=(()=>{class n{constructor(t,l,V,d){this._platform=t,this._mostRecentTarget=null,this._modality=new yt(null),this._lastTouchMs=0,this._onKeydown=a=>{this._options?.ignoreKeys?.some(U=>U===a.keyCode)||(this._modality.next("keyboard"),this._mostRecentTarget=At(a))},this._onMousedown=a=>{Date.now()-this._lastTouchMs<650||(this._modality.next(Ci(a)?"keyboard":"mouse"),this._mostRecentTarget=At(a))},this._onTouchstart=a=>{Ki(a)?this._modality.next("keyboard"):(this._lastTouchMs=Date.now(),this._modality.next("touch"),this._mostRecentTarget=At(a))},this._options={...G5,...d},this.modalityDetected=this._modality.pipe(ym(1)),this.modalityChanged=this.modalityDetected.pipe(jm()),t.isBrowser&&l.runOutsideAngular(()=>{V.addEventListener("keydown",this._onKeydown,md),V.addEventListener("mousedown",this._onMousedown,md),V.addEventListener("touchstart",this._onTouchstart,md)})}get mostRecentModality(){return this._modality.value}ngOnDestroy(){this._modality.complete(),this._platform.isBrowser&&(document.removeEventListener("keydown",this._onKeydown,md),document.removeEventListener("mousedown",this._onMousedown,md),document.removeEventListener("touchstart",this._onTouchstart,md))}}return n.\u0275fac=function(t){return new(t||n)(h(Fn),h(_),h(w),h(u5,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const x5=new E("liveAnnouncerElement",{providedIn:"root",factory:function X5(){return null}}),y5=new E("LIVE_ANNOUNCER_DEFAULT_OPTIONS");let j5=(()=>{class n{constructor(t,l,V,d){this._ngZone=l,this._defaultOptions=d,this._document=V,this._liveElement=t||this._createLiveElement()}announce(t,...l){const V=this._defaultOptions;let d,a;return 1===l.length&&"number"==typeof l[0]?a=l[0]:[d,a]=l,this.clear(),clearTimeout(this._previousTimeout),d||(d=V&&V.politeness?V.politeness:"polite"),null==a&&V&&(a=V.duration),this._liveElement.setAttribute("aria-live",d),this._ngZone.runOutsideAngular(()=>new Promise(U=>{clearTimeout(this._previousTimeout),this._previousTimeout=setTimeout(()=>{this._liveElement.textContent=t,U(),"number"==typeof a&&(this._previousTimeout=setTimeout(()=>this.clear(),a))},100)}))}clear(){this._liveElement&&(this._liveElement.textContent="")}ngOnDestroy(){clearTimeout(this._previousTimeout),this._liveElement?.remove(),this._liveElement=null}_createLiveElement(){const t="cdk-live-announcer-element",l=this._document.getElementsByClassName(t),V=this._document.createElement("div");for(let d=0;d<l.length;d++)l[d].remove();return V.classList.add(t),V.classList.add("cdk-visually-hidden"),V.setAttribute("aria-atomic","true"),V.setAttribute("aria-live","polite"),this._document.body.appendChild(V),V}}return n.\u0275fac=function(t){return new(t||n)(h(x5,8),h(_),h(w),h(y5,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const H5=new E("cdk-focus-monitor-default-options"),hR=rV({passive:!0,capture:!0});let wm=(()=>{class n{constructor(t,l,V,d,a){this._ngZone=t,this._platform=l,this._inputModalityDetector=V,this._origin=null,this._windowFocused=!1,this._originFromTouchInteraction=!1,this._elementInfo=new Map,this._monitoredElementCount=0,this._rootNodeFocusListenerCount=new Map,this._windowFocusListener=()=>{this._windowFocused=!0,this._windowFocusTimeoutId=setTimeout(()=>this._windowFocused=!1)},this._stopInputModalityDetector=new u,this._rootNodeFocusAndBlurListener=U=>{const N=At(U),R="focus"===U.type?this._onFocus:this._onBlur;for(let Z=N;Z;Z=Z.parentElement)R.call(this,U,Z)},this._document=d,this._detectionMode=a?.detectionMode||0}monitor(t,l=!1){const V=Le(t);if(!this._platform.isBrowser||1!==V.nodeType)return b(null);const d=gi(V)||this._getDocument(),a=this._elementInfo.get(V);if(a)return l&&(a.checkChildren=!0),a.subject;const U={checkChildren:l,subject:new u,rootNode:d};return this._elementInfo.set(V,U),this._registerGlobalListeners(U),U.subject}stopMonitoring(t){const l=Le(t),V=this._elementInfo.get(l);V&&(V.subject.complete(),this._setClasses(l),this._elementInfo.delete(l),this._removeGlobalListeners(V))}focusVia(t,l,V){const d=Le(t);d===this._getDocument().activeElement?this._getClosestElementsInfo(d).forEach(([U,N])=>this._originChanged(U,l,N)):(this._setOrigin(l),"function"==typeof d.focus&&d.focus(V))}ngOnDestroy(){this._elementInfo.forEach((t,l)=>this.stopMonitoring(l))}_getDocument(){return this._document||document}_getWindow(){return this._getDocument().defaultView||window}_getFocusOrigin(t){return this._origin?this._originFromTouchInteraction?this._shouldBeAttributedToTouch(t)?"touch":"program":this._origin:this._windowFocused&&this._lastFocusOrigin?this._lastFocusOrigin:"program"}_shouldBeAttributedToTouch(t){return 1===this._detectionMode||!!t?.contains(this._inputModalityDetector._mostRecentTarget)}_setClasses(t,l){t.classList.toggle("cdk-focused",!!l),t.classList.toggle("cdk-touch-focused","touch"===l),t.classList.toggle("cdk-keyboard-focused","keyboard"===l),t.classList.toggle("cdk-mouse-focused","mouse"===l),t.classList.toggle("cdk-program-focused","program"===l)}_setOrigin(t,l=!1){this._ngZone.runOutsideAngular(()=>{this._origin=t,this._originFromTouchInteraction="touch"===t&&l,0===this._detectionMode&&(clearTimeout(this._originTimeoutId),this._originTimeoutId=setTimeout(()=>this._origin=null,this._originFromTouchInteraction?650:1))})}_onFocus(t,l){const V=this._elementInfo.get(l),d=At(t);!V||!V.checkChildren&&l!==d||this._originChanged(l,this._getFocusOrigin(d),V)}_onBlur(t,l){const V=this._elementInfo.get(l);!V||V.checkChildren&&t.relatedTarget instanceof Node&&l.contains(t.relatedTarget)||(this._setClasses(l),this._emitOrigin(V.subject,null))}_emitOrigin(t,l){this._ngZone.run(()=>t.next(l))}_registerGlobalListeners(t){if(!this._platform.isBrowser)return;const l=t.rootNode,V=this._rootNodeFocusListenerCount.get(l)||0;V||this._ngZone.runOutsideAngular(()=>{l.addEventListener("focus",this._rootNodeFocusAndBlurListener,hR),l.addEventListener("blur",this._rootNodeFocusAndBlurListener,hR)}),this._rootNodeFocusListenerCount.set(l,V+1),1==++this._monitoredElementCount&&(this._ngZone.runOutsideAngular(()=>{this._getWindow().addEventListener("focus",this._windowFocusListener)}),this._inputModalityDetector.modalityDetected.pipe(Jl(this._stopInputModalityDetector)).subscribe(d=>{this._setOrigin(d,!0)}))}_removeGlobalListeners(t){const l=t.rootNode;if(this._rootNodeFocusListenerCount.has(l)){const V=this._rootNodeFocusListenerCount.get(l);V>1?this._rootNodeFocusListenerCount.set(l,V-1):(l.removeEventListener("focus",this._rootNodeFocusAndBlurListener,hR),l.removeEventListener("blur",this._rootNodeFocusAndBlurListener,hR),this._rootNodeFocusListenerCount.delete(l))}--this._monitoredElementCount||(this._getWindow().removeEventListener("focus",this._windowFocusListener),this._stopInputModalityDetector.next(),clearTimeout(this._windowFocusTimeoutId),clearTimeout(this._originTimeoutId))}_originChanged(t,l,V){this._setClasses(t,l),this._emitOrigin(V.subject,l),this._lastFocusOrigin=l}_getClosestElementsInfo(t){const l=[];return this._elementInfo.forEach((V,d)=>{(d===t||V.checkChildren&&d.contains(t))&&l.push([d,V])}),l}}return n.\u0275fac=function(t){return new(t||n)(h(_),h(Fn),h(D5),h(w,8),h(H5,8))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const gm="cdk-high-contrast-black-on-white",Im="cdk-high-contrast-white-on-black",Pi="cdk-high-contrast-active";let fm=(()=>{class n{constructor(t,l){this._platform=t,this._document=l}getHighContrastMode(){if(!this._platform.isBrowser)return 0;const t=this._document.createElement("div");t.style.backgroundColor="rgb(1,2,3)",t.style.position="absolute",this._document.body.appendChild(t);const l=this._document.defaultView||window,V=l&&l.getComputedStyle?l.getComputedStyle(t):null,d=(V&&V.backgroundColor||"").replace(/ /g,"");switch(t.remove(),d){case"rgb(0,0,0)":return 2;case"rgb(255,255,255)":return 1}return 0}_applyBodyHighContrastModeCssClasses(){if(!this._hasCheckedHighContrastMode&&this._platform.isBrowser&&this._document.body){const t=this._document.body.classList;t.remove(Pi),t.remove(gm),t.remove(Im),this._hasCheckedHighContrastMode=!0;const l=this.getHighContrastMode();1===l?(t.add(Pi),t.add(gm)):2===l&&(t.add(Pi),t.add(Im))}}}return n.\u0275fac=function(t){return new(t||n)(h(Fn),h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),B5=(()=>{class n{constructor(t){t._applyBodyHighContrastModeCssClasses()}}return n.\u0275fac=function(t){return new(t||n)(h(fm))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[vi,m5]]}),n})();function _i(n,e,t){for(let l in e)if(e.hasOwnProperty(l)){const V=e[l];V?n.setProperty(l,V,t?.has(l)?"important":""):n.removeProperty(l)}return n}function pd(n,e){const t=e?"":"none";_i(n.style,{"touch-action":e?"":"none","-webkit-user-drag":e?"":"none","-webkit-tap-highlight-color":e?"":"transparent","user-select":t,"-ms-user-select":t,"-webkit-user-select":t,"-moz-user-select":t})}function Lm(n,e,t){_i(n.style,{position:e?"":"fixed",top:e?"":"0",opacity:e?"":"0",left:e?"":"-999em"},t)}function WR(n,e){return e&&"none"!=e?n+" "+e:n}function Cm(n){const e=n.toLowerCase().indexOf("ms")>-1?1:1e3;return parseFloat(n)*e}function qi(n,e){return n.getPropertyValue(e).split(",").map(l=>l.trim())}function Ai(n){const e=n.getBoundingClientRect();return{top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height,x:e.x,y:e.y}}function $i(n,e,t){const{top:l,bottom:V,left:d,right:a}=n;return t>=l&&t<=V&&e>=d&&e<=a}function ga(n,e,t){n.top+=e,n.bottom=n.top+n.height,n.left+=t,n.right=n.left+n.width}function Km(n,e,t,l){const{top:V,right:d,bottom:a,left:U,width:N,height:R}=n,Z=N*e,r=R*e;return l>V-r&&l<a+r&&t>U-Z&&t<d+Z}class Pm{constructor(e,t){this._document=e,this._viewportRuler=t,this.positions=new Map}clear(){this.positions.clear()}cache(e){this.clear(),this.positions.set(this._document,{scrollPosition:this._viewportRuler.getViewportScrollPosition()}),e.forEach(t=>{this.positions.set(t,{scrollPosition:{top:t.scrollTop,left:t.scrollLeft},clientRect:Ai(t)})})}handleScroll(e){const t=At(e),l=this.positions.get(t);if(!l)return null;const V=l.scrollPosition;let d,a;if(t===this._document){const R=this._viewportRuler.getViewportScrollPosition();d=R.top,a=R.left}else d=t.scrollTop,a=t.scrollLeft;const U=V.top-d,N=V.left-a;return this.positions.forEach((R,Z)=>{R.clientRect&&t!==Z&&t.contains(Z)&&ga(R.clientRect,U,N)}),V.top=d,V.left=a,{top:U,left:N}}}function _m(n){const e=n.cloneNode(!0),t=e.querySelectorAll("[id]"),l=n.nodeName.toLowerCase();e.removeAttribute("id");for(let V=0;V<t.length;V++)t[V].removeAttribute("id");return"canvas"===l?$m(n,e):("input"===l||"select"===l||"textarea"===l)&&Am(n,e),qm("canvas",n,e,$m),qm("input, textarea, select",n,e,Am),e}function qm(n,e,t,l){const V=e.querySelectorAll(n);if(V.length){const d=t.querySelectorAll(n);for(let a=0;a<V.length;a++)l(V[a],d[a])}}let w5=0;function Am(n,e){"file"!==e.type&&(e.value=n.value),"radio"===e.type&&e.name&&(e.name=`mat-clone-${e.name}-${w5++}`)}function $m(n,e){const t=e.getContext("2d");if(t)try{t.drawImage(n,0,0)}catch{}}const ep=rV({passive:!0}),tp=rV({passive:!1}),eo=new Set(["position"]);class I5{constructor(e,t,l,V,d,a){this._config=t,this._document=l,this._ngZone=V,this._viewportRuler=d,this._dragDropRegistry=a,this._passiveTransform={x:0,y:0},this._activeTransform={x:0,y:0},this._hasStartedDragging=!1,this._moveEvents=new u,this._pointerMoveSubscription=Fe.EMPTY,this._pointerUpSubscription=Fe.EMPTY,this._scrollSubscription=Fe.EMPTY,this._resizeSubscription=Fe.EMPTY,this._boundaryElement=null,this._nativeInteractionsEnabled=!0,this._handles=[],this._disabledHandles=new Set,this._direction="ltr",this.dragStartDelay=0,this._disabled=!1,this.beforeStarted=new u,this.started=new u,this.released=new u,this.ended=new u,this.entered=new u,this.exited=new u,this.dropped=new u,this.moved=this._moveEvents,this._pointerDown=U=>{if(this.beforeStarted.next(),this._handles.length){const N=this._handles.find(R=>{const Z=At(U);return!!Z&&(Z===R||R.contains(Z))});N&&!this._disabledHandles.has(N)&&!this.disabled&&this._initializeDragSequence(N,U)}else this.disabled||this._initializeDragSequence(this._rootElement,U)},this._pointerMove=U=>{const N=this._getPointerPositionOnPage(U);if(!this._hasStartedDragging){if(Math.abs(N.x-this._pickupPositionOnPage.x)+Math.abs(N.y-this._pickupPositionOnPage.y)>=this._config.dragStartThreshold){const i=Date.now()>=this._dragStartTime+this._getDragStartDelay(U),o=this._dropContainer;if(!i)return void this._endDragSequence(U);(!o||!o.isDragging()&&!o.isReceiving())&&(U.preventDefault(),this._hasStartedDragging=!0,this._ngZone.run(()=>this._startDragSequence(U)))}return}this._boundaryElement&&(!this._previewRect||!this._previewRect.width&&!this._previewRect.height)&&(this._previewRect=(this._preview||this._rootElement).getBoundingClientRect()),U.preventDefault();const R=this._getConstrainedPointerPosition(N);if(this._hasMoved=!0,this._lastKnownPointerPosition=N,this._updatePointerDirectionDelta(R),this._dropContainer)this._updateActiveDropContainer(R,N);else{const Z=this._activeTransform;Z.x=R.x-this._pickupPositionOnPage.x+this._passiveTransform.x,Z.y=R.y-this._pickupPositionOnPage.y+this._passiveTransform.y,this._applyRootElementTransform(Z.x,Z.y)}this._moveEvents.observers.length&&this._ngZone.run(()=>{this._moveEvents.next({source:this,pointerPosition:R,event:U,distance:this._getDragDistance(R),delta:this._pointerDirectionDelta})})},this._pointerUp=U=>{this._endDragSequence(U)},this.withRootElement(e).withParent(t.parentDragRef||null),this._parentPositions=new Pm(l,d),a.registerDragItem(this)}get disabled(){return this._disabled||!(!this._dropContainer||!this._dropContainer.disabled)}set disabled(e){const t=qt(e);t!==this._disabled&&(this._disabled=t,this._toggleNativeDragInteractions(),this._handles.forEach(l=>pd(l,t)))}getPlaceholderElement(){return this._placeholder}getRootElement(){return this._rootElement}getVisibleElement(){return this.isDragging()?this.getPlaceholderElement():this.getRootElement()}withHandles(e){this._handles=e.map(l=>Le(l)),this._handles.forEach(l=>pd(l,this.disabled)),this._toggleNativeDragInteractions();const t=new Set;return this._disabledHandles.forEach(l=>{this._handles.indexOf(l)>-1&&t.add(l)}),this._disabledHandles=t,this}withPreviewTemplate(e){return this._previewTemplate=e,this}withPlaceholderTemplate(e){return this._placeholderTemplate=e,this}withRootElement(e){const t=Le(e);return t!==this._rootElement&&(this._rootElement&&this._removeRootElementListeners(this._rootElement),this._ngZone.runOutsideAngular(()=>{t.addEventListener("mousedown",this._pointerDown,tp),t.addEventListener("touchstart",this._pointerDown,ep)}),this._initialTransform=void 0,this._rootElement=t),typeof SVGElement<"u"&&this._rootElement instanceof SVGElement&&(this._ownerSVGElement=this._rootElement.ownerSVGElement),this}withBoundaryElement(e){return this._boundaryElement=e?Le(e):null,this._resizeSubscription.unsubscribe(),e&&(this._resizeSubscription=this._viewportRuler.change(10).subscribe(()=>this._containInsideBoundaryOnResize())),this}withParent(e){return this._parentDragRef=e,this}dispose(){this._removeRootElementListeners(this._rootElement),this.isDragging()&&this._rootElement?.remove(),this._anchor?.remove(),this._destroyPreview(),this._destroyPlaceholder(),this._dragDropRegistry.removeDragItem(this),this._removeSubscriptions(),this.beforeStarted.complete(),this.started.complete(),this.released.complete(),this.ended.complete(),this.entered.complete(),this.exited.complete(),this.dropped.complete(),this._moveEvents.complete(),this._handles=[],this._disabledHandles.clear(),this._dropContainer=void 0,this._resizeSubscription.unsubscribe(),this._parentPositions.clear(),this._boundaryElement=this._rootElement=this._ownerSVGElement=this._placeholderTemplate=this._previewTemplate=this._anchor=this._parentDragRef=null}isDragging(){return this._hasStartedDragging&&this._dragDropRegistry.isDragging(this)}reset(){this._rootElement.style.transform=this._initialTransform||"",this._activeTransform={x:0,y:0},this._passiveTransform={x:0,y:0}}disableHandle(e){!this._disabledHandles.has(e)&&this._handles.indexOf(e)>-1&&(this._disabledHandles.add(e),pd(e,!0))}enableHandle(e){this._disabledHandles.has(e)&&(this._disabledHandles.delete(e),pd(e,this.disabled))}withDirection(e){return this._direction=e,this}_withDropContainer(e){this._dropContainer=e}getFreeDragPosition(){const e=this.isDragging()?this._activeTransform:this._passiveTransform;return{x:e.x,y:e.y}}setFreeDragPosition(e){return this._activeTransform={x:0,y:0},this._passiveTransform.x=e.x,this._passiveTransform.y=e.y,this._dropContainer||this._applyRootElementTransform(e.x,e.y),this}withPreviewContainer(e){return this._previewContainer=e,this}_sortFromLastPointerPosition(){const e=this._lastKnownPointerPosition;e&&this._dropContainer&&this._updateActiveDropContainer(this._getConstrainedPointerPosition(e),e)}_removeSubscriptions(){this._pointerMoveSubscription.unsubscribe(),this._pointerUpSubscription.unsubscribe(),this._scrollSubscription.unsubscribe()}_destroyPreview(){this._preview?.remove(),this._previewRef?.destroy(),this._preview=this._previewRef=null}_destroyPlaceholder(){this._placeholder?.remove(),this._placeholderRef?.destroy(),this._placeholder=this._placeholderRef=null}_endDragSequence(e){if(this._dragDropRegistry.isDragging(this)&&(this._removeSubscriptions(),this._dragDropRegistry.stopDragging(this),this._toggleNativeDragInteractions(),this._handles&&(this._rootElement.style.webkitTapHighlightColor=this._rootElementTapHighlight),this._hasStartedDragging))if(this.released.next({source:this}),this._dropContainer)this._dropContainer._stopScrolling(),this._animatePreviewToPlaceholder().then(()=>{this._cleanupDragArtifacts(e),this._cleanupCachedDimensions(),this._dragDropRegistry.stopDragging(this)});else{this._passiveTransform.x=this._activeTransform.x;const t=this._getPointerPositionOnPage(e);this._passiveTransform.y=this._activeTransform.y,this._ngZone.run(()=>{this.ended.next({source:this,distance:this._getDragDistance(t),dropPoint:t})}),this._cleanupCachedDimensions(),this._dragDropRegistry.stopDragging(this)}}_startDragSequence(e){Ia(e)&&(this._lastTouchEventTime=Date.now()),this._toggleNativeDragInteractions();const t=this._dropContainer;if(t){const l=this._rootElement,V=l.parentNode,d=this._placeholder=this._createPlaceholderElement(),a=this._anchor=this._anchor||this._document.createComment(""),U=this._getShadowRoot();V.insertBefore(a,l),this._initialTransform=l.style.transform||"",this._preview=this._createPreviewElement(),Lm(l,!1,eo),this._document.body.appendChild(V.replaceChild(d,l)),this._getPreviewInsertionPoint(V,U).appendChild(this._preview),this.started.next({source:this}),t.start(),this._initialContainer=t,this._initialIndex=t.getItemIndex(this)}else this.started.next({source:this}),this._initialContainer=this._initialIndex=void 0;this._parentPositions.cache(t?t.getScrollableParents():[])}_initializeDragSequence(e,t){this._parentDragRef&&t.stopPropagation();const l=this.isDragging(),V=Ia(t),d=!V&&0!==t.button,a=this._rootElement,U=At(t),N=!V&&this._lastTouchEventTime&&this._lastTouchEventTime+800>Date.now(),R=V?Ki(t):Ci(t);if(U&&U.draggable&&"mousedown"===t.type&&t.preventDefault(),l||d||N||R)return;if(this._handles.length){const c=a.style;this._rootElementTapHighlight=c.webkitTapHighlightColor||"",c.webkitTapHighlightColor="transparent"}this._hasStartedDragging=this._hasMoved=!1,this._removeSubscriptions(),this._pointerMoveSubscription=this._dragDropRegistry.pointerMove.subscribe(this._pointerMove),this._pointerUpSubscription=this._dragDropRegistry.pointerUp.subscribe(this._pointerUp),this._scrollSubscription=this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(c=>this._updateOnScroll(c)),this._boundaryElement&&(this._boundaryRect=Ai(this._boundaryElement));const Z=this._previewTemplate;this._pickupPositionInElement=Z&&Z.template&&!Z.matchSize?{x:0,y:0}:this._getPointerPositionInElement(e,t);const r=this._pickupPositionOnPage=this._lastKnownPointerPosition=this._getPointerPositionOnPage(t);this._pointerDirectionDelta={x:0,y:0},this._pointerPositionAtLastDirectionChange={x:r.x,y:r.y},this._dragStartTime=Date.now(),this._dragDropRegistry.startDragging(this,t)}_cleanupDragArtifacts(e){Lm(this._rootElement,!0,eo),this._anchor.parentNode.replaceChild(this._rootElement,this._anchor),this._destroyPreview(),this._destroyPlaceholder(),this._boundaryRect=this._previewRect=this._initialTransform=void 0,this._ngZone.run(()=>{const t=this._dropContainer,l=t.getItemIndex(this),V=this._getPointerPositionOnPage(e),d=this._getDragDistance(V),a=t._isOverContainer(V.x,V.y);this.ended.next({source:this,distance:d,dropPoint:V}),this.dropped.next({item:this,currentIndex:l,previousIndex:this._initialIndex,container:t,previousContainer:this._initialContainer,isPointerOverContainer:a,distance:d,dropPoint:V}),t.drop(this,l,this._initialIndex,this._initialContainer,a,d,V),this._dropContainer=this._initialContainer})}_updateActiveDropContainer({x:e,y:t},{x:l,y:V}){let d=this._initialContainer._getSiblingContainerFromPosition(this,e,t);!d&&this._dropContainer!==this._initialContainer&&this._initialContainer._isOverContainer(e,t)&&(d=this._initialContainer),d&&d!==this._dropContainer&&this._ngZone.run(()=>{this.exited.next({item:this,container:this._dropContainer}),this._dropContainer.exit(this),this._dropContainer=d,this._dropContainer.enter(this,e,t,d===this._initialContainer&&d.sortingDisabled?this._initialIndex:void 0),this.entered.next({item:this,container:d,currentIndex:d.getItemIndex(this)})}),this.isDragging()&&(this._dropContainer._startScrollingIfNecessary(l,V),this._dropContainer._sortItem(this,e,t,this._pointerDirectionDelta),this._applyPreviewTransform(e-this._pickupPositionInElement.x,t-this._pickupPositionInElement.y))}_createPreviewElement(){const e=this._previewTemplate,t=this.previewClass,l=e?e.template:null;let V;if(l&&e){const d=e.matchSize?this._rootElement.getBoundingClientRect():null,a=e.viewContainer.createEmbeddedView(l,e.context);a.detectChanges(),V=lp(a,this._document),this._previewRef=a,e.matchSize?Vp(V,d):V.style.transform=FR(this._pickupPositionOnPage.x,this._pickupPositionOnPage.y)}else{const d=this._rootElement;V=_m(d),Vp(V,d.getBoundingClientRect()),this._initialTransform&&(V.style.transform=this._initialTransform)}return _i(V.style,{"pointer-events":"none",margin:"0",position:"fixed",top:"0",left:"0","z-index":`${this._config.zIndex||1e3}`},eo),pd(V,!1),V.classList.add("cdk-drag-preview"),V.setAttribute("dir",this._direction),t&&(Array.isArray(t)?t.forEach(d=>V.classList.add(d)):V.classList.add(t)),V}_animatePreviewToPlaceholder(){if(!this._hasMoved)return Promise.resolve();const e=this._placeholder.getBoundingClientRect();this._preview.classList.add("cdk-drag-animating"),this._applyPreviewTransform(e.left,e.top);const t=function v5(n){const e=getComputedStyle(n),t=qi(e,"transition-property"),l=t.find(U=>"transform"===U||"all"===U);if(!l)return 0;const V=t.indexOf(l),d=qi(e,"transition-duration"),a=qi(e,"transition-delay");return Cm(d[V])+Cm(a[V])}(this._preview);return 0===t?Promise.resolve():this._ngZone.runOutsideAngular(()=>new Promise(l=>{const V=a=>{(!a||At(a)===this._preview&&"transform"===a.propertyName)&&(this._preview?.removeEventListener("transitionend",V),l(),clearTimeout(d))},d=setTimeout(V,1.5*t);this._preview.addEventListener("transitionend",V)}))}_createPlaceholderElement(){const e=this._placeholderTemplate,t=e?e.template:null;let l;return t?(this._placeholderRef=e.viewContainer.createEmbeddedView(t,e.context),this._placeholderRef.detectChanges(),l=lp(this._placeholderRef,this._document)):l=_m(this._rootElement),l.classList.add("cdk-drag-placeholder"),l}_getPointerPositionInElement(e,t){const l=this._rootElement.getBoundingClientRect(),V=e===this._rootElement?null:e,d=V?V.getBoundingClientRect():l,a=Ia(t)?t.targetTouches[0]:t,U=this._getViewportScrollPosition();return{x:d.left-l.left+(a.pageX-d.left-U.left),y:d.top-l.top+(a.pageY-d.top-U.top)}}_getPointerPositionOnPage(e){const t=this._getViewportScrollPosition(),l=Ia(e)?e.touches[0]||e.changedTouches[0]||{pageX:0,pageY:0}:e,V=l.pageX-t.left,d=l.pageY-t.top;if(this._ownerSVGElement){const a=this._ownerSVGElement.getScreenCTM();if(a){const U=this._ownerSVGElement.createSVGPoint();return U.x=V,U.y=d,U.matrixTransform(a.inverse())}}return{x:V,y:d}}_getConstrainedPointerPosition(e){const t=this._dropContainer?this._dropContainer.lockAxis:null;let{x:l,y:V}=this.constrainPosition?this.constrainPosition(e,this):e;if("x"===this.lockAxis||"x"===t?V=this._pickupPositionOnPage.y:("y"===this.lockAxis||"y"===t)&&(l=this._pickupPositionOnPage.x),this._boundaryRect){const{x:d,y:a}=this._pickupPositionInElement,U=this._boundaryRect,N=this._previewRect,R=U.top+a,Z=U.bottom-(N.height-a);l=np(l,U.left+d,U.right-(N.width-d)),V=np(V,R,Z)}return{x:l,y:V}}_updatePointerDirectionDelta(e){const{x:t,y:l}=e,V=this._pointerDirectionDelta,d=this._pointerPositionAtLastDirectionChange,a=Math.abs(t-d.x),U=Math.abs(l-d.y);return a>this._config.pointerDirectionChangeThreshold&&(V.x=t>d.x?1:-1,d.x=t),U>this._config.pointerDirectionChangeThreshold&&(V.y=l>d.y?1:-1,d.y=l),V}_toggleNativeDragInteractions(){if(!this._rootElement||!this._handles)return;const e=this._handles.length>0||!this.isDragging();e!==this._nativeInteractionsEnabled&&(this._nativeInteractionsEnabled=e,pd(this._rootElement,e))}_removeRootElementListeners(e){e.removeEventListener("mousedown",this._pointerDown,tp),e.removeEventListener("touchstart",this._pointerDown,ep)}_applyRootElementTransform(e,t){const l=FR(e,t),V=this._rootElement.style;null==this._initialTransform&&(this._initialTransform=V.transform&&"none"!=V.transform?V.transform:""),V.transform=WR(l,this._initialTransform)}_applyPreviewTransform(e,t){const l=this._previewTemplate?.template?void 0:this._initialTransform,V=FR(e,t);this._preview.style.transform=WR(V,l)}_getDragDistance(e){const t=this._pickupPositionOnPage;return t?{x:e.x-t.x,y:e.y-t.y}:{x:0,y:0}}_cleanupCachedDimensions(){this._boundaryRect=this._previewRect=void 0,this._parentPositions.clear()}_containInsideBoundaryOnResize(){let{x:e,y:t}=this._passiveTransform;if(0===e&&0===t||this.isDragging()||!this._boundaryElement)return;const l=this._boundaryElement.getBoundingClientRect(),V=this._rootElement.getBoundingClientRect();if(0===l.width&&0===l.height||0===V.width&&0===V.height)return;const d=l.left-V.left,a=V.right-l.right,U=l.top-V.top,N=V.bottom-l.bottom;l.width>V.width?(d>0&&(e+=d),a>0&&(e-=a)):e=0,l.height>V.height?(U>0&&(t+=U),N>0&&(t-=N)):t=0,(e!==this._passiveTransform.x||t!==this._passiveTransform.y)&&this.setFreeDragPosition({y:t,x:e})}_getDragStartDelay(e){const t=this.dragStartDelay;return"number"==typeof t?t:Ia(e)?t.touch:t?t.mouse:0}_updateOnScroll(e){const t=this._parentPositions.handleScroll(e);if(t){const l=At(e);this._boundaryRect&&l!==this._boundaryElement&&l.contains(this._boundaryElement)&&ga(this._boundaryRect,t.top,t.left),this._pickupPositionOnPage.x+=t.left,this._pickupPositionOnPage.y+=t.top,this._dropContainer||(this._activeTransform.x-=t.left,this._activeTransform.y-=t.top,this._applyRootElementTransform(this._activeTransform.x,this._activeTransform.y))}}_getViewportScrollPosition(){const e=this._parentPositions.positions.get(this._document);return e?e.scrollPosition:this._viewportRuler.getViewportScrollPosition()}_getShadowRoot(){return void 0===this._cachedShadowRoot&&(this._cachedShadowRoot=gi(this._rootElement)),this._cachedShadowRoot}_getPreviewInsertionPoint(e,t){const l=this._previewContainer||"global";if("parent"===l)return e;if("global"===l){const V=this._document;return t||V.fullscreenElement||V.webkitFullscreenElement||V.mozFullScreenElement||V.msFullscreenElement||V.body}return Le(l)}}function FR(n,e){return`translate3d(${Math.round(n)}px, ${Math.round(e)}px, 0)`}function np(n,e,t){return Math.max(e,Math.min(t,n))}function Ia(n){return"t"===n.type[0]}function lp(n,e){const t=n.rootNodes;if(1===t.length&&t[0].nodeType===e.ELEMENT_NODE)return t[0];const l=e.createElement("div");return t.forEach(V=>l.appendChild(V)),l}function Vp(n,e){n.style.width=`${e.width}px`,n.style.height=`${e.height}px`,n.style.transform=FR(e.left,e.top)}function dp(n,e,t){const l=fa(e,n.length-1),V=fa(t,n.length-1);if(l===V)return;const d=n[l],a=V<l?-1:1;for(let U=l;U!==V;U+=a)n[U]=n[U+a];n[V]=d}function fa(n,e){return Math.max(0,Math.min(e,n))}class L5{constructor(e,t,l,V,d){this._dragDropRegistry=t,this._ngZone=V,this._viewportRuler=d,this.disabled=!1,this.sortingDisabled=!1,this.autoScrollDisabled=!1,this.autoScrollStep=2,this.enterPredicate=()=>!0,this.sortPredicate=()=>!0,this.beforeStarted=new u,this.entered=new u,this.exited=new u,this.dropped=new u,this.sorted=new u,this._isDragging=!1,this._itemPositions=[],this._previousSwap={drag:null,delta:0,overlaps:!1},this._draggables=[],this._siblings=[],this._orientation="vertical",this._activeSiblings=new Set,this._direction="ltr",this._viewportScrollSubscription=Fe.EMPTY,this._verticalScrollDirection=0,this._horizontalScrollDirection=0,this._stopScrollTimers=new u,this._cachedShadowRoot=null,this._startScrollInterval=()=>{this._stopScrolling(),function O5(n=0,e=oR){return n<0&&(n=0),zm(n,n,e)}(0,Jm).pipe(Jl(this._stopScrollTimers)).subscribe(()=>{const a=this._scrollNode,U=this.autoScrollStep;1===this._verticalScrollDirection?a.scrollBy(0,-U):2===this._verticalScrollDirection&&a.scrollBy(0,U),1===this._horizontalScrollDirection?a.scrollBy(-U,0):2===this._horizontalScrollDirection&&a.scrollBy(U,0)})},this.element=Le(e),this._document=l,this.withScrollableParents([this.element]),t.registerDropContainer(this),this._parentPositions=new Pm(l,d)}dispose(){this._stopScrolling(),this._stopScrollTimers.complete(),this._viewportScrollSubscription.unsubscribe(),this.beforeStarted.complete(),this.entered.complete(),this.exited.complete(),this.dropped.complete(),this.sorted.complete(),this._activeSiblings.clear(),this._scrollNode=null,this._parentPositions.clear(),this._dragDropRegistry.removeDropContainer(this)}isDragging(){return this._isDragging}start(){this._draggingStarted(),this._notifyReceivingSiblings()}enter(e,t,l,V){let d;this._draggingStarted(),null==V?(d=this.sortingDisabled?this._draggables.indexOf(e):-1,-1===d&&(d=this._getItemIndexFromPointerPosition(e,t,l))):d=V;const a=this._activeDraggables,U=a.indexOf(e),N=e.getPlaceholderElement();let R=a[d];if(R===e&&(R=a[d+1]),U>-1&&a.splice(U,1),R&&!this._dragDropRegistry.isDragging(R)){const Z=R.getRootElement();Z.parentElement.insertBefore(N,Z),a.splice(d,0,e)}else if(this._shouldEnterAsFirstChild(t,l)){const Z=a[0].getRootElement();Z.parentNode.insertBefore(N,Z),a.unshift(e)}else Le(this.element).appendChild(N),a.push(e);N.style.transform="",this._cacheItemPositions(),this._cacheParentPositions(),this._notifyReceivingSiblings(),this.entered.next({item:e,container:this,currentIndex:this.getItemIndex(e)})}exit(e){this._reset(),this.exited.next({item:e,container:this})}drop(e,t,l,V,d,a,U){this._reset(),this.dropped.next({item:e,currentIndex:t,previousIndex:l,container:this,previousContainer:V,isPointerOverContainer:d,distance:a,dropPoint:U})}withItems(e){const t=this._draggables;return this._draggables=e,e.forEach(l=>l._withDropContainer(this)),this.isDragging()&&(t.filter(V=>V.isDragging()).every(V=>-1===e.indexOf(V))?this._reset():this._cacheItems()),this}withDirection(e){return this._direction=e,this}connectedTo(e){return this._siblings=e.slice(),this}withOrientation(e){return this._orientation=e,this}withScrollableParents(e){const t=Le(this.element);return this._scrollableElements=-1===e.indexOf(t)?[t,...e]:e.slice(),this}getScrollableParents(){return this._scrollableElements}getItemIndex(e){return this._isDragging?("horizontal"===this._orientation&&"rtl"===this._direction?this._itemPositions.slice().reverse():this._itemPositions).findIndex(l=>l.drag===e):this._draggables.indexOf(e)}isReceiving(){return this._activeSiblings.size>0}_sortItem(e,t,l,V){if(this.sortingDisabled||!this._clientRect||!Km(this._clientRect,.05,t,l))return;const d=this._itemPositions,a=this._getItemIndexFromPointerPosition(e,t,l,V);if(-1===a&&d.length>0)return;const U="horizontal"===this._orientation,N=d.findIndex(T=>T.drag===e),R=d[a],r=R.clientRect,c=N>a?1:-1,i=this._getItemOffsetPx(d[N].clientRect,r,c),o=this._getSiblingOffsetPx(N,d,c),s=d.slice();dp(d,N,a),this.sorted.next({previousIndex:N,currentIndex:a,container:this,item:e}),d.forEach((T,W)=>{if(s[W]===T)return;const p=T.drag===e,F=p?i:o,Y=p?e.getPlaceholderElement():T.drag.getRootElement();T.offset+=F,U?(Y.style.transform=WR(`translate3d(${Math.round(T.offset)}px, 0, 0)`,T.initialTransform),ga(T.clientRect,0,F)):(Y.style.transform=WR(`translate3d(0, ${Math.round(T.offset)}px, 0)`,T.initialTransform),ga(T.clientRect,F,0))}),this._previousSwap.overlaps=$i(r,t,l),this._previousSwap.drag=R.drag,this._previousSwap.delta=U?V.x:V.y}_startScrollingIfNecessary(e,t){if(this.autoScrollDisabled)return;let l,V=0,d=0;if(this._parentPositions.positions.forEach((a,U)=>{U===this._document||!a.clientRect||l||Km(a.clientRect,.05,e,t)&&([V,d]=function C5(n,e,t,l){const V=Np(e,l),d=Rp(e,t);let a=0,U=0;if(V){const N=n.scrollTop;1===V?N>0&&(a=1):n.scrollHeight-N>n.clientHeight&&(a=2)}if(d){const N=n.scrollLeft;1===d?N>0&&(U=1):n.scrollWidth-N>n.clientWidth&&(U=2)}return[a,U]}(U,a.clientRect,e,t),(V||d)&&(l=U))}),!V&&!d){const{width:a,height:U}=this._viewportRuler.getViewportSize(),N={width:a,height:U,top:0,right:a,bottom:U,left:0};V=Np(N,t),d=Rp(N,e),l=window}l&&(V!==this._verticalScrollDirection||d!==this._horizontalScrollDirection||l!==this._scrollNode)&&(this._verticalScrollDirection=V,this._horizontalScrollDirection=d,this._scrollNode=l,(V||d)&&l?this._ngZone.runOutsideAngular(this._startScrollInterval):this._stopScrolling())}_stopScrolling(){this._stopScrollTimers.next()}_draggingStarted(){const e=Le(this.element).style;this.beforeStarted.next(),this._isDragging=!0,this._initialScrollSnap=e.msScrollSnapType||e.scrollSnapType||"",e.scrollSnapType=e.msScrollSnapType="none",this._cacheItems(),this._viewportScrollSubscription.unsubscribe(),this._listenToScrollEvents()}_cacheParentPositions(){const e=Le(this.element);this._parentPositions.cache(this._scrollableElements),this._clientRect=this._parentPositions.positions.get(e).clientRect}_cacheItemPositions(){const e="horizontal"===this._orientation;this._itemPositions=this._activeDraggables.map(t=>{const l=t.getVisibleElement();return{drag:t,offset:0,initialTransform:l.style.transform||"",clientRect:Ai(l)}}).sort((t,l)=>e?t.clientRect.left-l.clientRect.left:t.clientRect.top-l.clientRect.top)}_reset(){this._isDragging=!1;const e=Le(this.element).style;e.scrollSnapType=e.msScrollSnapType=this._initialScrollSnap,this._activeDraggables.forEach(t=>{const l=t.getRootElement();if(l){const V=this._itemPositions.find(d=>d.drag===t)?.initialTransform;l.style.transform=V||""}}),this._siblings.forEach(t=>t._stopReceiving(this)),this._activeDraggables=[],this._itemPositions=[],this._previousSwap.drag=null,this._previousSwap.delta=0,this._previousSwap.overlaps=!1,this._stopScrolling(),this._viewportScrollSubscription.unsubscribe(),this._parentPositions.clear()}_getSiblingOffsetPx(e,t,l){const V="horizontal"===this._orientation,d=t[e].clientRect,a=t[e+-1*l];let U=d[V?"width":"height"]*l;if(a){const N=V?"left":"top",R=V?"right":"bottom";-1===l?U-=a.clientRect[N]-d[R]:U+=d[N]-a.clientRect[R]}return U}_getItemOffsetPx(e,t,l){const V="horizontal"===this._orientation;let d=V?t.left-e.left:t.top-e.top;return-1===l&&(d+=V?t.width-e.width:t.height-e.height),d}_shouldEnterAsFirstChild(e,t){if(!this._activeDraggables.length)return!1;const l=this._itemPositions,V="horizontal"===this._orientation;if(l[0].drag!==this._activeDraggables[0]){const a=l[l.length-1].clientRect;return V?e>=a.right:t>=a.bottom}{const a=l[0].clientRect;return V?e<=a.left:t<=a.top}}_getItemIndexFromPointerPosition(e,t,l,V){const d="horizontal"===this._orientation,a=this._itemPositions.findIndex(({drag:U,clientRect:N})=>{if(U===e)return!1;if(V){const R=d?V.x:V.y;if(U===this._previousSwap.drag&&this._previousSwap.overlaps&&R===this._previousSwap.delta)return!1}return d?t>=Math.floor(N.left)&&t<Math.floor(N.right):l>=Math.floor(N.top)&&l<Math.floor(N.bottom)});return-1!==a&&this.sortPredicate(a,e,this)?a:-1}_cacheItems(){this._activeDraggables=this._draggables.slice(),this._cacheItemPositions(),this._cacheParentPositions()}_isOverContainer(e,t){return null!=this._clientRect&&$i(this._clientRect,e,t)}_getSiblingContainerFromPosition(e,t,l){return this._siblings.find(V=>V._canReceive(e,t,l))}_canReceive(e,t,l){if(!this._clientRect||!$i(this._clientRect,t,l)||!this.enterPredicate(e,this))return!1;const V=this._getShadowRoot().elementFromPoint(t,l);if(!V)return!1;const d=Le(this.element);return V===d||d.contains(V)}_startReceiving(e,t){const l=this._activeSiblings;!l.has(e)&&t.every(V=>this.enterPredicate(V,this)||this._draggables.indexOf(V)>-1)&&(l.add(e),this._cacheParentPositions(),this._listenToScrollEvents())}_stopReceiving(e){this._activeSiblings.delete(e),this._viewportScrollSubscription.unsubscribe()}_listenToScrollEvents(){this._viewportScrollSubscription=this._dragDropRegistry.scrolled(this._getShadowRoot()).subscribe(e=>{if(this.isDragging()){const t=this._parentPositions.handleScroll(e);t&&(this._itemPositions.forEach(({clientRect:l})=>{ga(l,t.top,t.left)}),this._itemPositions.forEach(({drag:l})=>{this._dragDropRegistry.isDragging(l)&&l._sortFromLastPointerPosition()}))}else this.isReceiving()&&this._cacheParentPositions()})}_getShadowRoot(){if(!this._cachedShadowRoot){const e=gi(Le(this.element));this._cachedShadowRoot=e||this._document}return this._cachedShadowRoot}_notifyReceivingSiblings(){const e=this._activeDraggables.filter(t=>t.isDragging());this._siblings.forEach(t=>t._startReceiving(this,e))}}function Np(n,e){const{top:t,bottom:l,height:V}=n,d=.05*V;return e>=t-d&&e<=t+d?1:e>=l-d&&e<=l+d?2:0}function Rp(n,e){const{left:t,right:l,width:V}=n,d=.05*V;return e>=t-d&&e<=t+d?1:e>=l-d&&e<=l+d?2:0}const MR=rV({passive:!1,capture:!0});let K5=(()=>{class n{constructor(t,l){this._ngZone=t,this._dropInstances=new Set,this._dragInstances=new Set,this._activeDragInstances=[],this._globalListeners=new Map,this._draggingPredicate=V=>V.isDragging(),this.pointerMove=new u,this.pointerUp=new u,this.scroll=new u,this._preventDefaultWhileDragging=V=>{this._activeDragInstances.length>0&&V.preventDefault()},this._persistentTouchmoveListener=V=>{this._activeDragInstances.length>0&&(this._activeDragInstances.some(this._draggingPredicate)&&V.preventDefault(),this.pointerMove.next(V))},this._document=l}registerDropContainer(t){this._dropInstances.has(t)||this._dropInstances.add(t)}registerDragItem(t){this._dragInstances.add(t),1===this._dragInstances.size&&this._ngZone.runOutsideAngular(()=>{this._document.addEventListener("touchmove",this._persistentTouchmoveListener,MR)})}removeDropContainer(t){this._dropInstances.delete(t)}removeDragItem(t){this._dragInstances.delete(t),this.stopDragging(t),0===this._dragInstances.size&&this._document.removeEventListener("touchmove",this._persistentTouchmoveListener,MR)}startDragging(t,l){if(!(this._activeDragInstances.indexOf(t)>-1)&&(this._activeDragInstances.push(t),1===this._activeDragInstances.length)){const V=l.type.startsWith("touch");this._globalListeners.set(V?"touchend":"mouseup",{handler:d=>this.pointerUp.next(d),options:!0}).set("scroll",{handler:d=>this.scroll.next(d),options:!0}).set("selectstart",{handler:this._preventDefaultWhileDragging,options:MR}),V||this._globalListeners.set("mousemove",{handler:d=>this.pointerMove.next(d),options:MR}),this._ngZone.runOutsideAngular(()=>{this._globalListeners.forEach((d,a)=>{this._document.addEventListener(a,d.handler,d.options)})})}}stopDragging(t){const l=this._activeDragInstances.indexOf(t);l>-1&&(this._activeDragInstances.splice(l,1),0===this._activeDragInstances.length&&this._clearGlobalListeners())}isDragging(t){return this._activeDragInstances.indexOf(t)>-1}scrolled(t){const l=[this.scroll];return t&&t!==this._document&&l.push(new ie(V=>this._ngZone.runOutsideAngular(()=>{const a=U=>{this._activeDragInstances.length&&V.next(U)};return t.addEventListener("scroll",a,!0),()=>{t.removeEventListener("scroll",a,!0)}}))),pV(...l)}ngOnDestroy(){this._dragInstances.forEach(t=>this.removeDragItem(t)),this._dropInstances.forEach(t=>this.removeDropContainer(t)),this._clearGlobalListeners(),this.pointerMove.complete(),this.pointerUp.complete()}_clearGlobalListeners(){this._globalListeners.forEach((t,l)=>{this._document.removeEventListener(l,t.handler,t.options)}),this._globalListeners.clear()}}return n.\u0275fac=function(t){return new(t||n)(h(_),h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const P5={dragStartThreshold:5,pointerDirectionChangeThreshold:5};let to=(()=>{class n{constructor(t,l,V,d){this._document=t,this._ngZone=l,this._viewportRuler=V,this._dragDropRegistry=d}createDrag(t,l=P5){return new I5(t,l,this._document,this._ngZone,this._viewportRuler,this._dragDropRegistry)}createDropList(t){return new L5(t,this._dragDropRegistry,this._document,this._ngZone,this._viewportRuler)}}return n.\u0275fac=function(t){return new(t||n)(h(w),h(_),h(Li),h(K5))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const Zp=new E("CDK_DRAG_PARENT"),rp=new E("CdkDropListGroup"),cp=new E("CDK_DRAG_CONFIG");let _5=0;const ip=new E("CdkDropList");let op=(()=>{class n{constructor(t,l,V,d,a,U,N){this.element=t,this._changeDetectorRef=V,this._scrollDispatcher=d,this._dir=a,this._group=U,this._destroyed=new u,this.connectedTo=[],this.id="cdk-drop-list-"+_5++,this.enterPredicate=()=>!0,this.sortPredicate=()=>!0,this.dropped=new A,this.entered=new A,this.exited=new A,this.sorted=new A,this._unsortedItems=new Set,this._dropListRef=l.createDropList(t),this._dropListRef.data=this,N&&this._assignDefaults(N),this._dropListRef.enterPredicate=(R,Z)=>this.enterPredicate(R.data,Z.data),this._dropListRef.sortPredicate=(R,Z,r)=>this.sortPredicate(R,Z.data,r.data),this._setupInputSyncSubscription(this._dropListRef),this._handleEvents(this._dropListRef),n._dropLists.push(this),U&&U._items.add(this)}get disabled(){return this._disabled||!!this._group&&this._group.disabled}set disabled(t){this._dropListRef.disabled=this._disabled=qt(t)}addItem(t){this._unsortedItems.add(t),this._dropListRef.isDragging()&&this._syncItemsWithRef()}removeItem(t){this._unsortedItems.delete(t),this._dropListRef.isDragging()&&this._syncItemsWithRef()}getSortedItems(){return Array.from(this._unsortedItems).sort((t,l)=>t._dragRef.getVisibleElement().compareDocumentPosition(l._dragRef.getVisibleElement())&Node.DOCUMENT_POSITION_FOLLOWING?-1:1)}ngOnDestroy(){const t=n._dropLists.indexOf(this);t>-1&&n._dropLists.splice(t,1),this._group&&this._group._items.delete(this),this._unsortedItems.clear(),this._dropListRef.dispose(),this._destroyed.next(),this._destroyed.complete()}_setupInputSyncSubscription(t){this._dir&&this._dir.change.pipe(dV(this._dir.value),Jl(this._destroyed)).subscribe(l=>t.withDirection(l)),t.beforeStarted.subscribe(()=>{const l=Ha(this.connectedTo).map(V=>"string"==typeof V?n._dropLists.find(a=>a.id===V):V);if(this._group&&this._group._items.forEach(V=>{-1===l.indexOf(V)&&l.push(V)}),!this._scrollableParentsResolved){const V=this._scrollDispatcher.getAncestorScrollContainers(this.element).map(d=>d.getElementRef().nativeElement);this._dropListRef.withScrollableParents(V),this._scrollableParentsResolved=!0}t.disabled=this.disabled,t.lockAxis=this.lockAxis,t.sortingDisabled=qt(this.sortingDisabled),t.autoScrollDisabled=qt(this.autoScrollDisabled),t.autoScrollStep=RR(this.autoScrollStep,2),t.connectedTo(l.filter(V=>V&&V!==this).map(V=>V._dropListRef)).withOrientation(this.orientation)})}_handleEvents(t){t.beforeStarted.subscribe(()=>{this._syncItemsWithRef(),this._changeDetectorRef.markForCheck()}),t.entered.subscribe(l=>{this.entered.emit({container:this,item:l.item.data,currentIndex:l.currentIndex})}),t.exited.subscribe(l=>{this.exited.emit({container:this,item:l.item.data}),this._changeDetectorRef.markForCheck()}),t.sorted.subscribe(l=>{this.sorted.emit({previousIndex:l.previousIndex,currentIndex:l.currentIndex,container:this,item:l.item.data})}),t.dropped.subscribe(l=>{this.dropped.emit({previousIndex:l.previousIndex,currentIndex:l.currentIndex,previousContainer:l.previousContainer.data,container:l.container.data,item:l.item.data,isPointerOverContainer:l.isPointerOverContainer,distance:l.distance,dropPoint:l.dropPoint}),this._changeDetectorRef.markForCheck()})}_assignDefaults(t){const{lockAxis:l,draggingDisabled:V,sortingDisabled:d,listAutoScrollDisabled:a,listOrientation:U}=t;this.disabled=V??!1,this.sortingDisabled=d??!1,this.autoScrollDisabled=a??!1,this.orientation=U||"vertical",l&&(this.lockAxis=l)}_syncItemsWithRef(){this._dropListRef.withItems(this.getSortedItems().map(t=>t._dragRef))}}return n._dropLists=[],n.\u0275fac=function(t){return new(t||n)(M(we),M(to),M(Dn),M(Gm),M(fi,8),M(rp,12),M(cp,8))},n.\u0275dir=Me({type:n,selectors:[["","cdkDropList",""],["cdk-drop-list"]],hostAttrs:[1,"cdk-drop-list"],hostVars:7,hostBindings:function(t,l){2&t&&(Ct("id",l.id),Zn("cdk-drop-list-disabled",l.disabled)("cdk-drop-list-dragging",l._dropListRef.isDragging())("cdk-drop-list-receiving",l._dropListRef.isReceiving()))},inputs:{connectedTo:["cdkDropListConnectedTo","connectedTo"],data:["cdkDropListData","data"],orientation:["cdkDropListOrientation","orientation"],id:"id",lockAxis:["cdkDropListLockAxis","lockAxis"],disabled:["cdkDropListDisabled","disabled"],sortingDisabled:["cdkDropListSortingDisabled","sortingDisabled"],enterPredicate:["cdkDropListEnterPredicate","enterPredicate"],sortPredicate:["cdkDropListSortPredicate","sortPredicate"],autoScrollDisabled:["cdkDropListAutoScrollDisabled","autoScrollDisabled"],autoScrollStep:["cdkDropListAutoScrollStep","autoScrollStep"]},outputs:{dropped:"cdkDropListDropped",entered:"cdkDropListEntered",exited:"cdkDropListExited",sorted:"cdkDropListSorted"},exportAs:["cdkDropList"],features:[ql([{provide:rp,useValue:void 0},{provide:ip,useExisting:n}])]}),n})();const sp=new E("CdkDragHandle"),q5=new E("CdkDragPlaceholder"),A5=new E("CdkDragPreview");let ej=(()=>{class n{constructor(t,l,V,d,a,U,N,R,Z,r,c){this.element=t,this.dropContainer=l,this._ngZone=d,this._viewContainerRef=a,this._dir=N,this._changeDetectorRef=Z,this._selfHandle=r,this._parentDrag=c,this._destroyed=new u,this.started=new A,this.released=new A,this.ended=new A,this.entered=new A,this.exited=new A,this.dropped=new A,this.moved=new ie(i=>{const o=this._dragRef.moved.pipe(D(s=>({source:this,pointerPosition:s.pointerPosition,event:s.event,delta:s.delta,distance:s.distance}))).subscribe(i);return()=>{o.unsubscribe()}}),this._dragRef=R.createDrag(t,{dragStartThreshold:U&&null!=U.dragStartThreshold?U.dragStartThreshold:5,pointerDirectionChangeThreshold:U&&null!=U.pointerDirectionChangeThreshold?U.pointerDirectionChangeThreshold:5,zIndex:U?.zIndex}),this._dragRef.data=this,n._dragInstances.push(this),U&&this._assignDefaults(U),l&&(this._dragRef._withDropContainer(l._dropListRef),l.addItem(this)),this._syncInputs(this._dragRef),this._handleEvents(this._dragRef)}get disabled(){return this._disabled||this.dropContainer&&this.dropContainer.disabled}set disabled(t){this._disabled=qt(t),this._dragRef.disabled=this._disabled}getPlaceholderElement(){return this._dragRef.getPlaceholderElement()}getRootElement(){return this._dragRef.getRootElement()}reset(){this._dragRef.reset()}getFreeDragPosition(){return this._dragRef.getFreeDragPosition()}ngAfterViewInit(){this._ngZone.runOutsideAngular(()=>{this._ngZone.onStable.pipe(Wn(1),Jl(this._destroyed)).subscribe(()=>{this._updateRootElement(),this._setupHandlesListener(),this.freeDragPosition&&this._dragRef.setFreeDragPosition(this.freeDragPosition)})})}ngOnChanges(t){const l=t.rootElementSelector,V=t.freeDragPosition;l&&!l.firstChange&&this._updateRootElement(),V&&!V.firstChange&&this.freeDragPosition&&this._dragRef.setFreeDragPosition(this.freeDragPosition)}ngOnDestroy(){this.dropContainer&&this.dropContainer.removeItem(this);const t=n._dragInstances.indexOf(this);t>-1&&n._dragInstances.splice(t,1),this._ngZone.runOutsideAngular(()=>{this._destroyed.next(),this._destroyed.complete(),this._dragRef.dispose()})}_updateRootElement(){const t=this.element.nativeElement;let l=t;this.rootElementSelector&&(l=void 0!==t.closest?t.closest(this.rootElementSelector):t.parentElement?.closest(this.rootElementSelector)),this._dragRef.withRootElement(l||t)}_getBoundaryElement(){const t=this.boundaryElement;return t?"string"==typeof t?this.element.nativeElement.closest(t):Le(t):null}_syncInputs(t){t.beforeStarted.subscribe(()=>{if(!t.isDragging()){const l=this._dir,V=this.dragStartDelay,d=this._placeholderTemplate?{template:this._placeholderTemplate.templateRef,context:this._placeholderTemplate.data,viewContainer:this._viewContainerRef}:null,a=this._previewTemplate?{template:this._previewTemplate.templateRef,context:this._previewTemplate.data,matchSize:this._previewTemplate.matchSize,viewContainer:this._viewContainerRef}:null;t.disabled=this.disabled,t.lockAxis=this.lockAxis,t.dragStartDelay="object"==typeof V&&V?V:RR(V),t.constrainPosition=this.constrainPosition,t.previewClass=this.previewClass,t.withBoundaryElement(this._getBoundaryElement()).withPlaceholderTemplate(d).withPreviewTemplate(a).withPreviewContainer(this.previewContainer||"global"),l&&t.withDirection(l.value)}}),t.beforeStarted.pipe(Wn(1)).subscribe(()=>{if(this._parentDrag)return void t.withParent(this._parentDrag._dragRef);let l=this.element.nativeElement.parentElement;for(;l;){if(l.classList.contains("cdk-drag")){t.withParent(n._dragInstances.find(V=>V.element.nativeElement===l)?._dragRef||null);break}l=l.parentElement}})}_handleEvents(t){t.started.subscribe(()=>{this.started.emit({source:this}),this._changeDetectorRef.markForCheck()}),t.released.subscribe(()=>{this.released.emit({source:this})}),t.ended.subscribe(l=>{this.ended.emit({source:this,distance:l.distance,dropPoint:l.dropPoint}),this._changeDetectorRef.markForCheck()}),t.entered.subscribe(l=>{this.entered.emit({container:l.container.data,item:this,currentIndex:l.currentIndex})}),t.exited.subscribe(l=>{this.exited.emit({container:l.container.data,item:this})}),t.dropped.subscribe(l=>{this.dropped.emit({previousIndex:l.previousIndex,currentIndex:l.currentIndex,previousContainer:l.previousContainer.data,container:l.container.data,isPointerOverContainer:l.isPointerOverContainer,item:this,distance:l.distance,dropPoint:l.dropPoint})})}_assignDefaults(t){const{lockAxis:l,dragStartDelay:V,constrainPosition:d,previewClass:a,boundaryElement:U,draggingDisabled:N,rootElementSelector:R,previewContainer:Z}=t;this.disabled=N??!1,this.dragStartDelay=V||0,l&&(this.lockAxis=l),d&&(this.constrainPosition=d),a&&(this.previewClass=a),U&&(this.boundaryElement=U),R&&(this.rootElementSelector=R),Z&&(this.previewContainer=Z)}_setupHandlesListener(){this._handles.changes.pipe(dV(this._handles),Ye(t=>{const l=t.filter(V=>V._parentDrag===this).map(V=>V.element);this._selfHandle&&this.rootElementSelector&&l.push(this.element),this._dragRef.withHandles(l)}),Xt(t=>pV(...t.map(l=>l._stateChanges.pipe(dV(l))))),Jl(this._destroyed)).subscribe(t=>{const l=this._dragRef,V=t.element.nativeElement;t.disabled?l.disableHandle(V):l.enableHandle(V)})}}return n._dragInstances=[],n.\u0275fac=function(t){return new(t||n)(M(we),M(ip,12),M(w),M(_),M(Mt),M(cp,8),M(fi,8),M(to),M(Dn),M(sp,10),M(Zp,12))},n.\u0275dir=Me({type:n,selectors:[["","cdkDrag",""]],contentQueries:function(t,l,V){if(1&t&&(Ml(V,A5,5),Ml(V,q5,5),Ml(V,sp,5)),2&t){let d;Dt(d=xt())&&(l._previewTemplate=d.first),Dt(d=xt())&&(l._placeholderTemplate=d.first),Dt(d=xt())&&(l._handles=d)}},hostAttrs:[1,"cdk-drag"],hostVars:4,hostBindings:function(t,l){2&t&&Zn("cdk-drag-disabled",l.disabled)("cdk-drag-dragging",l._dragRef.isDragging())},inputs:{data:["cdkDragData","data"],lockAxis:["cdkDragLockAxis","lockAxis"],rootElementSelector:["cdkDragRootElement","rootElementSelector"],boundaryElement:["cdkDragBoundary","boundaryElement"],dragStartDelay:["cdkDragStartDelay","dragStartDelay"],freeDragPosition:["cdkDragFreeDragPosition","freeDragPosition"],disabled:["cdkDragDisabled","disabled"],constrainPosition:["cdkDragConstrainPosition","constrainPosition"],previewClass:["cdkDragPreviewClass","previewClass"],previewContainer:["cdkDragPreviewContainer","previewContainer"]},outputs:{started:"cdkDragStarted",released:"cdkDragReleased",ended:"cdkDragEnded",entered:"cdkDragEntered",exited:"cdkDragExited",dropped:"cdkDragDropped",moved:"cdkDragMoved"},exportAs:["cdkDrag"],features:[ql([{provide:Zp,useExisting:n}]),kn]}),n})(),Tp=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[to],imports:[TR]}),n})();class hp{}class Wp{}class nl{constructor(e){this.normalizedNames=new Map,this.lazyUpdate=null,e?this.lazyInit="string"==typeof e?()=>{this.headers=new Map,e.split("\n").forEach(t=>{const l=t.indexOf(":");if(l>0){const V=t.slice(0,l),d=V.toLowerCase(),a=t.slice(l+1).trim();this.maybeSetNormalizedName(V,d),this.headers.has(d)?this.headers.get(d).push(a):this.headers.set(d,[a])}})}:()=>{this.headers=new Map,Object.keys(e).forEach(t=>{let l=e[t];const V=t.toLowerCase();"string"==typeof l&&(l=[l]),l.length>0&&(this.headers.set(V,l),this.maybeSetNormalizedName(t,V))})}:this.headers=new Map}has(e){return this.init(),this.headers.has(e.toLowerCase())}get(e){this.init();const t=this.headers.get(e.toLowerCase());return t&&t.length>0?t[0]:null}keys(){return this.init(),Array.from(this.normalizedNames.values())}getAll(e){return this.init(),this.headers.get(e.toLowerCase())||null}append(e,t){return this.clone({name:e,value:t,op:"a"})}set(e,t){return this.clone({name:e,value:t,op:"s"})}delete(e,t){return this.clone({name:e,value:t,op:"d"})}maybeSetNormalizedName(e,t){this.normalizedNames.has(t)||this.normalizedNames.set(t,e)}init(){this.lazyInit&&(this.lazyInit instanceof nl?this.copyFrom(this.lazyInit):this.lazyInit(),this.lazyInit=null,this.lazyUpdate&&(this.lazyUpdate.forEach(e=>this.applyUpdate(e)),this.lazyUpdate=null))}copyFrom(e){e.init(),Array.from(e.headers.keys()).forEach(t=>{this.headers.set(t,e.headers.get(t)),this.normalizedNames.set(t,e.normalizedNames.get(t))})}clone(e){const t=new nl;return t.lazyInit=this.lazyInit&&this.lazyInit instanceof nl?this.lazyInit:this,t.lazyUpdate=(this.lazyUpdate||[]).concat([e]),t}applyUpdate(e){const t=e.name.toLowerCase();switch(e.op){case"a":case"s":let l=e.value;if("string"==typeof l&&(l=[l]),0===l.length)return;this.maybeSetNormalizedName(e.name,t);const V=("a"===e.op?this.headers.get(t):void 0)||[];V.push(...l),this.headers.set(t,V);break;case"d":const d=e.value;if(d){let a=this.headers.get(t);if(!a)return;a=a.filter(U=>-1===d.indexOf(U)),0===a.length?(this.headers.delete(t),this.normalizedNames.delete(t)):this.headers.set(t,a)}else this.headers.delete(t),this.normalizedNames.delete(t)}}forEach(e){this.init(),Array.from(this.normalizedNames.keys()).forEach(t=>e(this.normalizedNames.get(t),this.headers.get(t)))}}class tj{encodeKey(e){return Fp(e)}encodeValue(e){return Fp(e)}decodeKey(e){return decodeURIComponent(e)}decodeValue(e){return decodeURIComponent(e)}}const lj=/%(\d[a-f0-9])/gi,Vj={40:"@","3A":":",24:"$","2C":",","3B":";","3D":"=","3F":"?","2F":"/"};function Fp(n){return encodeURIComponent(n).replace(lj,(e,t)=>Vj[t]??e)}function mR(n){return`${n}`}class ll{constructor(e={}){if(this.updates=null,this.cloneFrom=null,this.encoder=e.encoder||new tj,e.fromString){if(e.fromObject)throw new Error("Cannot specify both fromString and fromObject.");this.map=function nj(n,e){const t=new Map;return n.length>0&&n.replace(/^\?/,"").split("&").forEach(V=>{const d=V.indexOf("="),[a,U]=-1==d?[e.decodeKey(V),""]:[e.decodeKey(V.slice(0,d)),e.decodeValue(V.slice(d+1))],N=t.get(a)||[];N.push(U),t.set(a,N)}),t}(e.fromString,this.encoder)}else e.fromObject?(this.map=new Map,Object.keys(e.fromObject).forEach(t=>{const l=e.fromObject[t],V=Array.isArray(l)?l.map(mR):[mR(l)];this.map.set(t,V)})):this.map=null}has(e){return this.init(),this.map.has(e)}get(e){this.init();const t=this.map.get(e);return t?t[0]:null}getAll(e){return this.init(),this.map.get(e)||null}keys(){return this.init(),Array.from(this.map.keys())}append(e,t){return this.clone({param:e,value:t,op:"a"})}appendAll(e){const t=[];return Object.keys(e).forEach(l=>{const V=e[l];Array.isArray(V)?V.forEach(d=>{t.push({param:l,value:d,op:"a"})}):t.push({param:l,value:V,op:"a"})}),this.clone(t)}set(e,t){return this.clone({param:e,value:t,op:"s"})}delete(e,t){return this.clone({param:e,value:t,op:"d"})}toString(){return this.init(),this.keys().map(e=>{const t=this.encoder.encodeKey(e);return this.map.get(e).map(l=>t+"="+this.encoder.encodeValue(l)).join("&")}).filter(e=>""!==e).join("&")}clone(e){const t=new ll({encoder:this.encoder});return t.cloneFrom=this.cloneFrom||this,t.updates=(this.updates||[]).concat(e),t}init(){null===this.map&&(this.map=new Map),null!==this.cloneFrom&&(this.cloneFrom.init(),this.cloneFrom.keys().forEach(e=>this.map.set(e,this.cloneFrom.map.get(e))),this.updates.forEach(e=>{switch(e.op){case"a":case"s":const t=("a"===e.op?this.map.get(e.param):void 0)||[];t.push(mR(e.value)),this.map.set(e.param,t);break;case"d":if(void 0===e.value){this.map.delete(e.param);break}{let l=this.map.get(e.param)||[];const V=l.indexOf(mR(e.value));-1!==V&&l.splice(V,1),l.length>0?this.map.set(e.param,l):this.map.delete(e.param)}}}),this.cloneFrom=this.updates=null)}}class dj{constructor(){this.map=new Map}set(e,t){return this.map.set(e,t),this}get(e){return this.map.has(e)||this.map.set(e,e.defaultValue()),this.map.get(e)}delete(e){return this.map.delete(e),this}has(e){return this.map.has(e)}keys(){return this.map.keys()}}function Mp(n){return typeof ArrayBuffer<"u"&&n instanceof ArrayBuffer}function mp(n){return typeof Blob<"u"&&n instanceof Blob}function pp(n){return typeof FormData<"u"&&n instanceof FormData}class La{constructor(e,t,l,V){let d;if(this.url=t,this.body=null,this.reportProgress=!1,this.withCredentials=!1,this.responseType="json",this.method=e.toUpperCase(),function aj(n){switch(n){case"DELETE":case"GET":case"HEAD":case"OPTIONS":case"JSONP":return!1;default:return!0}}(this.method)||V?(this.body=void 0!==l?l:null,d=V):d=l,d&&(this.reportProgress=!!d.reportProgress,this.withCredentials=!!d.withCredentials,d.responseType&&(this.responseType=d.responseType),d.headers&&(this.headers=d.headers),d.context&&(this.context=d.context),d.params&&(this.params=d.params)),this.headers||(this.headers=new nl),this.context||(this.context=new dj),this.params){const a=this.params.toString();if(0===a.length)this.urlWithParams=t;else{const U=t.indexOf("?");this.urlWithParams=t+(-1===U?"?":U<t.length-1?"&":"")+a}}else this.params=new ll,this.urlWithParams=t}serializeBody(){return null===this.body?null:Mp(this.body)||mp(this.body)||pp(this.body)||function Uj(n){return typeof URLSearchParams<"u"&&n instanceof URLSearchParams}(this.body)||"string"==typeof this.body?this.body:this.body instanceof ll?this.body.toString():"object"==typeof this.body||"boolean"==typeof this.body||Array.isArray(this.body)?JSON.stringify(this.body):this.body.toString()}detectContentTypeHeader(){return null===this.body||pp(this.body)?null:mp(this.body)?this.body.type||null:Mp(this.body)?null:"string"==typeof this.body?"text/plain":this.body instanceof ll?"application/x-www-form-urlencoded;charset=UTF-8":"object"==typeof this.body||"number"==typeof this.body||"boolean"==typeof this.body?"application/json":null}clone(e={}){const t=e.method||this.method,l=e.url||this.url,V=e.responseType||this.responseType,d=void 0!==e.body?e.body:this.body,a=void 0!==e.withCredentials?e.withCredentials:this.withCredentials,U=void 0!==e.reportProgress?e.reportProgress:this.reportProgress;let N=e.headers||this.headers,R=e.params||this.params;const Z=e.context??this.context;return void 0!==e.setHeaders&&(N=Object.keys(e.setHeaders).reduce((r,c)=>r.set(c,e.setHeaders[c]),N)),e.setParams&&(R=Object.keys(e.setParams).reduce((r,c)=>r.set(c,e.setParams[c]),R)),new La(t,l,d,{params:R,headers:N,context:Z,reportProgress:U,responseType:V,withCredentials:a})}}var He=(()=>((He=He||{})[He.Sent=0]="Sent",He[He.UploadProgress=1]="UploadProgress",He[He.ResponseHeader=2]="ResponseHeader",He[He.DownloadProgress=3]="DownloadProgress",He[He.Response=4]="Response",He[He.User=5]="User",He))();class no{constructor(e,t=200,l="OK"){this.headers=e.headers||new nl,this.status=void 0!==e.status?e.status:t,this.statusText=e.statusText||l,this.url=e.url||null,this.ok=this.status>=200&&this.status<300}}class lo extends no{constructor(e={}){super(e),this.type=He.ResponseHeader}clone(e={}){return new lo({headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}}class pR extends no{constructor(e={}){super(e),this.type=He.Response,this.body=void 0!==e.body?e.body:null}clone(e={}){return new pR({body:void 0!==e.body?e.body:this.body,headers:e.headers||this.headers,status:void 0!==e.status?e.status:this.status,statusText:e.statusText||this.statusText,url:e.url||this.url||void 0})}}class kp extends no{constructor(e){super(e,0,"Unknown Error"),this.name="HttpErrorResponse",this.ok=!1,this.message=this.status>=200&&this.status<300?`Http failure during parsing for ${e.url||"(unknown url)"}`:`Http failure response for ${e.url||"(unknown url)"}: ${e.status} ${e.statusText}`,this.error=e.error||null}}function Vo(n,e){return{body:e,headers:n.headers,context:n.context,observe:n.observe,params:n.params,reportProgress:n.reportProgress,responseType:n.responseType,withCredentials:n.withCredentials}}let kR=(()=>{class n{constructor(t){this.handler=t}request(t,l,V={}){let d;if(t instanceof La)d=t;else{let N,R;N=V.headers instanceof nl?V.headers:new nl(V.headers),V.params&&(R=V.params instanceof ll?V.params:new ll({fromObject:V.params})),d=new La(t,l,void 0!==V.body?V.body:null,{headers:N,context:V.context,params:R,reportProgress:V.reportProgress,responseType:V.responseType||"json",withCredentials:V.withCredentials})}const a=b(d).pipe(Sl(N=>this.handler.handle(N)));if(t instanceof La||"events"===V.observe)return a;const U=a.pipe(_e(N=>N instanceof pR));switch(V.observe||"body"){case"body":switch(d.responseType){case"arraybuffer":return U.pipe(D(N=>{if(null!==N.body&&!(N.body instanceof ArrayBuffer))throw new Error("Response is not an ArrayBuffer.");return N.body}));case"blob":return U.pipe(D(N=>{if(null!==N.body&&!(N.body instanceof Blob))throw new Error("Response is not a Blob.");return N.body}));case"text":return U.pipe(D(N=>{if(null!==N.body&&"string"!=typeof N.body)throw new Error("Response is not a string.");return N.body}));default:return U.pipe(D(N=>N.body))}case"response":return U;default:throw new Error(`Unreachable: unhandled observe type ${V.observe}}`)}}delete(t,l={}){return this.request("DELETE",t,l)}get(t,l={}){return this.request("GET",t,l)}head(t,l={}){return this.request("HEAD",t,l)}jsonp(t,l){return this.request("JSONP",t,{params:(new ll).append(l,"JSONP_CALLBACK"),observe:"body",responseType:"json"})}options(t,l={}){return this.request("OPTIONS",t,l)}patch(t,l,V={}){return this.request("PATCH",t,Vo(V,l))}post(t,l,V={}){return this.request("POST",t,Vo(V,l))}put(t,l,V={}){return this.request("PUT",t,Vo(V,l))}}return n.\u0275fac=function(t){return new(t||n)(h(hp))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();class Ep{constructor(e,t){this.next=e,this.interceptor=t}handle(e){return this.interceptor.intercept(e,this.next)}}const ao=new E("HTTP_INTERCEPTORS");let Nj=(()=>{class n{intercept(t,l){return l.handle(t)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const Rj=/^\)\]\}',?\n/;let Sp=(()=>{class n{constructor(t){this.xhrFactory=t}handle(t){if("JSONP"===t.method)throw new Error("Attempted to construct Jsonp request without HttpClientJsonpModule installed.");return new ie(l=>{const V=this.xhrFactory.build();if(V.open(t.method,t.urlWithParams),t.withCredentials&&(V.withCredentials=!0),t.headers.forEach((i,o)=>V.setRequestHeader(i,o.join(","))),t.headers.has("Accept")||V.setRequestHeader("Accept","application/json, text/plain, */*"),!t.headers.has("Content-Type")){const i=t.detectContentTypeHeader();null!==i&&V.setRequestHeader("Content-Type",i)}if(t.responseType){const i=t.responseType.toLowerCase();V.responseType="json"!==i?i:"text"}const d=t.serializeBody();let a=null;const U=()=>{if(null!==a)return a;const i=V.statusText||"OK",o=new nl(V.getAllResponseHeaders()),s=function Zj(n){return"responseURL"in n&&n.responseURL?n.responseURL:/^X-Request-URL:/m.test(n.getAllResponseHeaders())?n.getResponseHeader("X-Request-URL"):null}(V)||t.url;return a=new lo({headers:o,status:V.status,statusText:i,url:s}),a},N=()=>{let{headers:i,status:o,statusText:s,url:T}=U(),W=null;204!==o&&(W=typeof V.response>"u"?V.responseText:V.response),0===o&&(o=W?200:0);let p=o>=200&&o<300;if("json"===t.responseType&&"string"==typeof W){const F=W;W=W.replace(Rj,"");try{W=""!==W?JSON.parse(W):null}catch(Y){W=F,p&&(p=!1,W={error:Y,text:W})}}p?(l.next(new pR({body:W,headers:i,status:o,statusText:s,url:T||void 0})),l.complete()):l.error(new kp({error:W,headers:i,status:o,statusText:s,url:T||void 0}))},R=i=>{const{url:o}=U(),s=new kp({error:i,status:V.status||0,statusText:V.statusText||"Unknown Error",url:o||void 0});l.error(s)};let Z=!1;const r=i=>{Z||(l.next(U()),Z=!0);let o={type:He.DownloadProgress,loaded:i.loaded};i.lengthComputable&&(o.total=i.total),"text"===t.responseType&&!!V.responseText&&(o.partialText=V.responseText),l.next(o)},c=i=>{let o={type:He.UploadProgress,loaded:i.loaded};i.lengthComputable&&(o.total=i.total),l.next(o)};return V.addEventListener("load",N),V.addEventListener("error",R),V.addEventListener("timeout",R),V.addEventListener("abort",R),t.reportProgress&&(V.addEventListener("progress",r),null!==d&&V.upload&&V.upload.addEventListener("progress",c)),V.send(d),l.next({type:He.Sent}),()=>{V.removeEventListener("error",R),V.removeEventListener("abort",R),V.removeEventListener("load",N),V.removeEventListener("timeout",R),t.reportProgress&&(V.removeEventListener("progress",r),null!==d&&V.upload&&V.upload.removeEventListener("progress",c)),V.readyState!==V.DONE&&V.abort()}})}}return n.\u0275fac=function(t){return new(t||n)(h(B1))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const Uo=new E("XSRF_COOKIE_NAME"),No=new E("XSRF_HEADER_NAME");class Yp{}let rj=(()=>{class n{constructor(t,l,V){this.doc=t,this.platform=l,this.cookieName=V,this.lastCookieString="",this.lastToken=null,this.parseCount=0}getToken(){if("server"===this.platform)return null;const t=this.doc.cookie||"";return t!==this.lastCookieString&&(this.parseCount++,this.lastToken=Y1(t,this.cookieName),this.lastCookieString=t),this.lastToken}}return n.\u0275fac=function(t){return new(t||n)(h(w),h(iN),h(Uo))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),Ro=(()=>{class n{constructor(t,l){this.tokenService=t,this.headerName=l}intercept(t,l){const V=t.url.toLowerCase();if("GET"===t.method||"HEAD"===t.method||V.startsWith("http://")||V.startsWith("https://"))return l.handle(t);const d=this.tokenService.getToken();return null!==d&&!t.headers.has(this.headerName)&&(t=t.clone({headers:t.headers.set(this.headerName,d)})),l.handle(t)}}return n.\u0275fac=function(t){return new(t||n)(h(Yp),h(No))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),cj=(()=>{class n{constructor(t,l){this.backend=t,this.injector=l,this.chain=null}handle(t){if(null===this.chain){const l=this.injector.get(ao,[]);this.chain=l.reduceRight((V,d)=>new Ep(V,d),this.backend)}return this.chain.handle(t)}}return n.\u0275fac=function(t){return new(t||n)(h(Wp),h(ge))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),ij=(()=>{class n{static disable(){return{ngModule:n,providers:[{provide:Ro,useClass:Nj}]}}static withOptions(t={}){return{ngModule:n,providers:[t.cookieName?{provide:Uo,useValue:t.cookieName}:[],t.headerName?{provide:No,useValue:t.headerName}:[]]}}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[Ro,{provide:ao,useExisting:Ro,multi:!0},{provide:Yp,useClass:rj},{provide:Uo,useValue:"XSRF-TOKEN"},{provide:No,useValue:"X-XSRF-TOKEN"}]}),n})(),Jp=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[kR,{provide:hp,useClass:cj},Sp,{provide:Wp,useExisting:Sp}],imports:[ij.withOptions({cookieName:"XSRF-TOKEN",headerName:"X-XSRF-TOKEN"})]}),n})();class Zo{attach(e){return this._attachedHost=e,e.attach(this)}detach(){let e=this._attachedHost;null!=e&&(this._attachedHost=null,e.detach())}get isAttached(){return null!=this._attachedHost}setAttachedHost(e){this._attachedHost=e}}class ro extends Zo{constructor(e,t,l,V){super(),this.component=e,this.viewContainerRef=t,this.injector=l,this.componentFactoryResolver=V}}class co extends Zo{constructor(e,t,l){super(),this.templateRef=e,this.viewContainerRef=t,this.context=l}get origin(){return this.templateRef.elementRef}attach(e,t=this.context){return this.context=t,super.attach(e)}detach(){return this.context=void 0,super.detach()}}class oj extends Zo{constructor(e){super(),this.element=e instanceof we?e.nativeElement:e}}class io{constructor(){this._isDisposed=!1,this.attachDomPortal=null}hasAttached(){return!!this._attachedPortal}attach(e){return e instanceof ro?(this._attachedPortal=e,this.attachComponentPortal(e)):e instanceof co?(this._attachedPortal=e,this.attachTemplatePortal(e)):this.attachDomPortal&&e instanceof oj?(this._attachedPortal=e,this.attachDomPortal(e)):void 0}detach(){this._attachedPortal&&(this._attachedPortal.setAttachedHost(null),this._attachedPortal=null),this._invokeDisposeFn()}dispose(){this.hasAttached()&&this.detach(),this._invokeDisposeFn(),this._isDisposed=!0}setDisposeFn(e){this._disposeFn=e}_invokeDisposeFn(){this._disposeFn&&(this._disposeFn(),this._disposeFn=null)}}class sj extends io{constructor(e,t,l,V,d){super(),this.outletElement=e,this._componentFactoryResolver=t,this._appRef=l,this._defaultInjector=V,this.attachDomPortal=a=>{const U=a.element,N=this._document.createComment("dom-portal");U.parentNode.insertBefore(N,U),this.outletElement.appendChild(U),this._attachedPortal=a,super.setDisposeFn(()=>{N.parentNode&&N.parentNode.replaceChild(U,N)})},this._document=d}attachComponentPortal(e){const l=(e.componentFactoryResolver||this._componentFactoryResolver).resolveComponentFactory(e.component);let V;return e.viewContainerRef?(V=e.viewContainerRef.createComponent(l,e.viewContainerRef.length,e.injector||e.viewContainerRef.injector),this.setDisposeFn(()=>V.destroy())):(V=l.create(e.injector||this._defaultInjector),this._appRef.attachView(V.hostView),this.setDisposeFn(()=>{this._appRef.detachView(V.hostView),V.destroy()})),this.outletElement.appendChild(this._getComponentRootNode(V)),this._attachedPortal=e,V}attachTemplatePortal(e){let t=e.viewContainerRef,l=t.createEmbeddedView(e.templateRef,e.context);return l.rootNodes.forEach(V=>this.outletElement.appendChild(V)),l.detectChanges(),this.setDisposeFn(()=>{let V=t.indexOf(l);-1!==V&&t.remove(V)}),this._attachedPortal=e,l}dispose(){super.dispose(),this.outletElement.remove()}_getComponentRootNode(e){return e.hostView.rootNodes[0]}}let oo=(()=>{class n extends io{constructor(t,l,V){super(),this._componentFactoryResolver=t,this._viewContainerRef=l,this._isInitialized=!1,this.attached=new A,this.attachDomPortal=d=>{const a=d.element,U=this._document.createComment("dom-portal");d.setAttachedHost(this),a.parentNode.insertBefore(U,a),this._getRootNode().appendChild(a),this._attachedPortal=d,super.setDisposeFn(()=>{U.parentNode&&U.parentNode.replaceChild(a,U)})},this._document=V}get portal(){return this._attachedPortal}set portal(t){this.hasAttached()&&!t&&!this._isInitialized||(this.hasAttached()&&super.detach(),t&&super.attach(t),this._attachedPortal=t)}get attachedRef(){return this._attachedRef}ngOnInit(){this._isInitialized=!0}ngOnDestroy(){super.dispose(),this._attachedPortal=null,this._attachedRef=null}attachComponentPortal(t){t.setAttachedHost(this);const l=null!=t.viewContainerRef?t.viewContainerRef:this._viewContainerRef,d=(t.componentFactoryResolver||this._componentFactoryResolver).resolveComponentFactory(t.component),a=l.createComponent(d,l.length,t.injector||l.injector);return l!==this._viewContainerRef&&this._getRootNode().appendChild(a.hostView.rootNodes[0]),super.setDisposeFn(()=>a.destroy()),this._attachedPortal=t,this._attachedRef=a,this.attached.emit(a),a}attachTemplatePortal(t){t.setAttachedHost(this);const l=this._viewContainerRef.createEmbeddedView(t.templateRef,t.context);return super.setDisposeFn(()=>this._viewContainerRef.clear()),this._attachedPortal=t,this._attachedRef=l,this.attached.emit(l),l}_getRootNode(){const t=this._viewContainerRef.element.nativeElement;return t.nodeType===t.ELEMENT_NODE?t:t.parentNode}}return n.\u0275fac=function(t){return new(t||n)(M(fn),M(Mt),M(w))},n.\u0275dir=Me({type:n,selectors:[["","cdkPortalOutlet",""]],inputs:{portal:["cdkPortalOutlet","portal"]},outputs:{attached:"attached"},exportAs:["cdkPortalOutlet"],features:[Pn]}),n})(),so=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})();const Qp=Ky();class Tj{constructor(e,t){this._viewportRuler=e,this._previousHTMLStyles={top:"",left:""},this._isEnabled=!1,this._document=t}attach(){}enable(){if(this._canBeEnabled()){const e=this._document.documentElement;this._previousScrollPosition=this._viewportRuler.getViewportScrollPosition(),this._previousHTMLStyles.left=e.style.left||"",this._previousHTMLStyles.top=e.style.top||"",e.style.left=je(-this._previousScrollPosition.left),e.style.top=je(-this._previousScrollPosition.top),e.classList.add("cdk-global-scrollblock"),this._isEnabled=!0}}disable(){if(this._isEnabled){const e=this._document.documentElement,l=e.style,V=this._document.body.style,d=l.scrollBehavior||"",a=V.scrollBehavior||"";this._isEnabled=!1,l.left=this._previousHTMLStyles.left,l.top=this._previousHTMLStyles.top,e.classList.remove("cdk-global-scrollblock"),Qp&&(l.scrollBehavior=V.scrollBehavior="auto"),window.scroll(this._previousScrollPosition.left,this._previousScrollPosition.top),Qp&&(l.scrollBehavior=d,V.scrollBehavior=a)}}_canBeEnabled(){if(this._document.documentElement.classList.contains("cdk-global-scrollblock")||this._isEnabled)return!1;const t=this._document.body,l=this._viewportRuler.getViewportSize();return t.scrollHeight>l.height||t.scrollWidth>l.width}}class hj{constructor(e,t,l,V){this._scrollDispatcher=e,this._ngZone=t,this._viewportRuler=l,this._config=V,this._scrollSubscription=null,this._detach=()=>{this.disable(),this._overlayRef.hasAttached()&&this._ngZone.run(()=>this._overlayRef.detach())}}attach(e){this._overlayRef=e}enable(){if(this._scrollSubscription)return;const e=this._scrollDispatcher.scrolled(0);this._config&&this._config.threshold&&this._config.threshold>1?(this._initialScrollPosition=this._viewportRuler.getViewportScrollPosition().top,this._scrollSubscription=e.subscribe(()=>{const t=this._viewportRuler.getViewportScrollPosition().top;Math.abs(t-this._initialScrollPosition)>this._config.threshold?this._detach():this._overlayRef.updatePosition()})):this._scrollSubscription=e.subscribe(this._detach)}disable(){this._scrollSubscription&&(this._scrollSubscription.unsubscribe(),this._scrollSubscription=null)}detach(){this.disable(),this._overlayRef=null}}class zp{enable(){}disable(){}attach(){}}function To(n,e){return e.some(t=>n.bottom<t.top||n.top>t.bottom||n.right<t.left||n.left>t.right)}function bp(n,e){return e.some(t=>n.top<t.top||n.bottom>t.bottom||n.left<t.left||n.right>t.right)}class Wj{constructor(e,t,l,V){this._scrollDispatcher=e,this._viewportRuler=t,this._ngZone=l,this._config=V,this._scrollSubscription=null}attach(e){this._overlayRef=e}enable(){this._scrollSubscription||(this._scrollSubscription=this._scrollDispatcher.scrolled(this._config?this._config.scrollThrottle:0).subscribe(()=>{if(this._overlayRef.updatePosition(),this._config&&this._config.autoClose){const t=this._overlayRef.overlayElement.getBoundingClientRect(),{width:l,height:V}=this._viewportRuler.getViewportSize();To(t,[{width:l,height:V,bottom:V,right:l,top:0,left:0}])&&(this.disable(),this._ngZone.run(()=>this._overlayRef.detach()))}}))}disable(){this._scrollSubscription&&(this._scrollSubscription.unsubscribe(),this._scrollSubscription=null)}detach(){this.disable(),this._overlayRef=null}}let Fj=(()=>{class n{constructor(t,l,V,d){this._scrollDispatcher=t,this._viewportRuler=l,this._ngZone=V,this.noop=()=>new zp,this.close=a=>new hj(this._scrollDispatcher,this._ngZone,this._viewportRuler,a),this.block=()=>new Tj(this._viewportRuler,this._document),this.reposition=a=>new Wj(this._scrollDispatcher,this._viewportRuler,this._ngZone,a),this._document=d}}return n.\u0275fac=function(t){return new(t||n)(h(Gm),h(Li),h(_),h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();class up{constructor(e){if(this.scrollStrategy=new zp,this.panelClass="",this.hasBackdrop=!1,this.backdropClass="cdk-overlay-dark-backdrop",this.disposeOnNavigation=!1,e){const t=Object.keys(e);for(const l of t)void 0!==e[l]&&(this[l]=e[l])}}}class Mj{constructor(e,t,l,V,d){this.offsetX=l,this.offsetY=V,this.panelClass=d,this.originX=e.originX,this.originY=e.originY,this.overlayX=t.overlayX,this.overlayY=t.overlayY}}class mj{}let pj=(()=>{let n=class{constructor(t,l){this.connectionPair=t,this.scrollableViewProperties=l}};return n=function iE(n,e,t,l){var a,V=arguments.length,d=V<3?e:null===l?l=Object.getOwnPropertyDescriptor(e,t):l;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)d=Reflect.decorate(n,e,t,l);else for(var U=n.length-1;U>=0;U--)(a=n[U])&&(d=(V<3?a(d):V>3?a(e,t,d):a(e,t))||d);return V>3&&d&&Object.defineProperty(e,t,d),d}([oE(1,gn()),sE("design:paramtypes",[Mj,mj])],n),n})(),Gp=(()=>{class n{constructor(t){this._attachedOverlays=[],this._document=t}ngOnDestroy(){this.detach()}add(t){this.remove(t),this._attachedOverlays.push(t)}remove(t){const l=this._attachedOverlays.indexOf(t);l>-1&&this._attachedOverlays.splice(l,1),0===this._attachedOverlays.length&&this.detach()}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),kj=(()=>{class n extends Gp{constructor(t){super(t),this._keydownListener=l=>{const V=this._attachedOverlays;for(let d=V.length-1;d>-1;d--)if(V[d]._keydownEvents.observers.length>0){V[d]._keydownEvents.next(l);break}}}add(t){super.add(t),this._isAttached||(this._document.body.addEventListener("keydown",this._keydownListener),this._isAttached=!0)}detach(){this._isAttached&&(this._document.body.removeEventListener("keydown",this._keydownListener),this._isAttached=!1)}}return n.\u0275fac=function(t){return new(t||n)(h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),Ej=(()=>{class n extends Gp{constructor(t,l){super(t),this._platform=l,this._cursorStyleIsSet=!1,this._pointerDownListener=V=>{this._pointerDownEventTarget=At(V)},this._clickListener=V=>{const d=At(V),a="click"===V.type&&this._pointerDownEventTarget?this._pointerDownEventTarget:d;this._pointerDownEventTarget=null;const U=this._attachedOverlays.slice();for(let N=U.length-1;N>-1;N--){const R=U[N];if(!(R._outsidePointerEvents.observers.length<1)&&R.hasAttached()){if(R.overlayElement.contains(d)||R.overlayElement.contains(a))break;R._outsidePointerEvents.next(V)}}}}add(t){if(super.add(t),!this._isAttached){const l=this._document.body;l.addEventListener("pointerdown",this._pointerDownListener,!0),l.addEventListener("click",this._clickListener,!0),l.addEventListener("auxclick",this._clickListener,!0),l.addEventListener("contextmenu",this._clickListener,!0),this._platform.IOS&&!this._cursorStyleIsSet&&(this._cursorOriginalValue=l.style.cursor,l.style.cursor="pointer",this._cursorStyleIsSet=!0),this._isAttached=!0}}detach(){if(this._isAttached){const t=this._document.body;t.removeEventListener("pointerdown",this._pointerDownListener,!0),t.removeEventListener("click",this._clickListener,!0),t.removeEventListener("auxclick",this._clickListener,!0),t.removeEventListener("contextmenu",this._clickListener,!0),this._platform.IOS&&this._cursorStyleIsSet&&(t.style.cursor=this._cursorOriginalValue,this._cursorStyleIsSet=!1),this._isAttached=!1}}}return n.\u0275fac=function(t){return new(t||n)(h(w),h(Fn))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),Dp=(()=>{class n{constructor(t,l){this._platform=l,this._document=t}ngOnDestroy(){this._containerElement?.remove()}getContainerElement(){return this._containerElement||this._createContainer(),this._containerElement}_createContainer(){const t="cdk-overlay-container";if(this._platform.isBrowser||Ii()){const V=this._document.querySelectorAll(`.${t}[platform="server"], .${t}[platform="test"]`);for(let d=0;d<V.length;d++)V[d].remove()}const l=this._document.createElement("div");l.classList.add(t),Ii()?l.setAttribute("platform","test"):this._platform.isBrowser||l.setAttribute("platform","server"),this._document.body.appendChild(l),this._containerElement=l}}return n.\u0275fac=function(t){return new(t||n)(h(w),h(Fn))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();class Sj{constructor(e,t,l,V,d,a,U,N,R){this._portalOutlet=e,this._host=t,this._pane=l,this._config=V,this._ngZone=d,this._keyboardDispatcher=a,this._document=U,this._location=N,this._outsideClickDispatcher=R,this._backdropElement=null,this._backdropClick=new u,this._attachments=new u,this._detachments=new u,this._locationChanges=Fe.EMPTY,this._backdropClickHandler=Z=>this._backdropClick.next(Z),this._keydownEvents=new u,this._outsidePointerEvents=new u,V.scrollStrategy&&(this._scrollStrategy=V.scrollStrategy,this._scrollStrategy.attach(this)),this._positionStrategy=V.positionStrategy}get overlayElement(){return this._pane}get backdropElement(){return this._backdropElement}get hostElement(){return this._host}attach(e){let t=this._portalOutlet.attach(e);return!this._host.parentElement&&this._previousHostParent&&this._previousHostParent.appendChild(this._host),this._positionStrategy&&this._positionStrategy.attach(this),this._updateStackingOrder(),this._updateElementSize(),this._updateElementDirection(),this._scrollStrategy&&this._scrollStrategy.enable(),this._ngZone.onStable.pipe(Wn(1)).subscribe(()=>{this.hasAttached()&&this.updatePosition()}),this._togglePointerEvents(!0),this._config.hasBackdrop&&this._attachBackdrop(),this._config.panelClass&&this._toggleClasses(this._pane,this._config.panelClass,!0),this._attachments.next(),this._keyboardDispatcher.add(this),this._config.disposeOnNavigation&&(this._locationChanges=this._location.subscribe(()=>this.dispose())),this._outsideClickDispatcher.add(this),t}detach(){if(!this.hasAttached())return;this.detachBackdrop(),this._togglePointerEvents(!1),this._positionStrategy&&this._positionStrategy.detach&&this._positionStrategy.detach(),this._scrollStrategy&&this._scrollStrategy.disable();const e=this._portalOutlet.detach();return this._detachments.next(),this._keyboardDispatcher.remove(this),this._detachContentWhenStable(),this._locationChanges.unsubscribe(),this._outsideClickDispatcher.remove(this),e}dispose(){const e=this.hasAttached();this._positionStrategy&&this._positionStrategy.dispose(),this._disposeScrollStrategy(),this._disposeBackdrop(this._backdropElement),this._locationChanges.unsubscribe(),this._keyboardDispatcher.remove(this),this._portalOutlet.dispose(),this._attachments.complete(),this._backdropClick.complete(),this._keydownEvents.complete(),this._outsidePointerEvents.complete(),this._outsideClickDispatcher.remove(this),this._host?.remove(),this._previousHostParent=this._pane=this._host=null,e&&this._detachments.next(),this._detachments.complete()}hasAttached(){return this._portalOutlet.hasAttached()}backdropClick(){return this._backdropClick}attachments(){return this._attachments}detachments(){return this._detachments}keydownEvents(){return this._keydownEvents}outsidePointerEvents(){return this._outsidePointerEvents}getConfig(){return this._config}updatePosition(){this._positionStrategy&&this._positionStrategy.apply()}updatePositionStrategy(e){e!==this._positionStrategy&&(this._positionStrategy&&this._positionStrategy.dispose(),this._positionStrategy=e,this.hasAttached()&&(e.attach(this),this.updatePosition()))}updateSize(e){this._config={...this._config,...e},this._updateElementSize()}setDirection(e){this._config={...this._config,direction:e},this._updateElementDirection()}addPanelClass(e){this._pane&&this._toggleClasses(this._pane,e,!0)}removePanelClass(e){this._pane&&this._toggleClasses(this._pane,e,!1)}getDirection(){const e=this._config.direction;return e?"string"==typeof e?e:e.value:"ltr"}updateScrollStrategy(e){e!==this._scrollStrategy&&(this._disposeScrollStrategy(),this._scrollStrategy=e,this.hasAttached()&&(e.attach(this),e.enable()))}_updateElementDirection(){this._host.setAttribute("dir",this.getDirection())}_updateElementSize(){if(!this._pane)return;const e=this._pane.style;e.width=je(this._config.width),e.height=je(this._config.height),e.minWidth=je(this._config.minWidth),e.minHeight=je(this._config.minHeight),e.maxWidth=je(this._config.maxWidth),e.maxHeight=je(this._config.maxHeight)}_togglePointerEvents(e){this._pane.style.pointerEvents=e?"":"none"}_attachBackdrop(){const e="cdk-overlay-backdrop-showing";this._backdropElement=this._document.createElement("div"),this._backdropElement.classList.add("cdk-overlay-backdrop"),this._config.backdropClass&&this._toggleClasses(this._backdropElement,this._config.backdropClass,!0),this._host.parentElement.insertBefore(this._backdropElement,this._host),this._backdropElement.addEventListener("click",this._backdropClickHandler),typeof requestAnimationFrame<"u"?this._ngZone.runOutsideAngular(()=>{requestAnimationFrame(()=>{this._backdropElement&&this._backdropElement.classList.add(e)})}):this._backdropElement.classList.add(e)}_updateStackingOrder(){this._host.nextSibling&&this._host.parentNode.appendChild(this._host)}detachBackdrop(){const e=this._backdropElement;if(!e)return;let t;const l=()=>{e&&(e.removeEventListener("click",this._backdropClickHandler),e.removeEventListener("transitionend",l),this._disposeBackdrop(e)),this._config.backdropClass&&this._toggleClasses(e,this._config.backdropClass,!1),clearTimeout(t)};e.classList.remove("cdk-overlay-backdrop-showing"),this._ngZone.runOutsideAngular(()=>{e.addEventListener("transitionend",l)}),e.style.pointerEvents="none",t=this._ngZone.runOutsideAngular(()=>setTimeout(l,500))}_toggleClasses(e,t,l){const V=Ha(t||[]).filter(d=>!!d);V.length&&(l?e.classList.add(...V):e.classList.remove(...V))}_detachContentWhenStable(){this._ngZone.runOutsideAngular(()=>{const e=this._ngZone.onStable.pipe(Jl(pV(this._attachments,this._detachments))).subscribe(()=>{(!this._pane||!this._host||0===this._pane.children.length)&&(this._pane&&this._config.panelClass&&this._toggleClasses(this._pane,this._config.panelClass,!1),this._host&&this._host.parentElement&&(this._previousHostParent=this._host.parentElement,this._host.remove()),e.unsubscribe())})})}_disposeScrollStrategy(){const e=this._scrollStrategy;e&&(e.disable(),e.detach&&e.detach())}_disposeBackdrop(e){e&&(e.remove(),this._backdropElement===e&&(this._backdropElement=null))}}const xp="cdk-overlay-connected-position-bounding-box",Yj=/([A-Za-z%]+)$/;class Jj{constructor(e,t,l,V,d){this._viewportRuler=t,this._document=l,this._platform=V,this._overlayContainer=d,this._lastBoundingBoxSize={width:0,height:0},this._isPushed=!1,this._canPush=!0,this._growAfterOpen=!1,this._hasFlexibleDimensions=!0,this._positionLocked=!1,this._viewportMargin=0,this._scrollables=[],this._preferredPositions=[],this._positionChanges=new u,this._resizeSubscription=Fe.EMPTY,this._offsetX=0,this._offsetY=0,this._appliedPanelClasses=[],this.positionChanges=this._positionChanges,this.setOrigin(e)}get positions(){return this._preferredPositions}attach(e){this._validatePositions(),e.hostElement.classList.add(xp),this._overlayRef=e,this._boundingBox=e.hostElement,this._pane=e.overlayElement,this._isDisposed=!1,this._isInitialRender=!0,this._lastPosition=null,this._resizeSubscription.unsubscribe(),this._resizeSubscription=this._viewportRuler.change().subscribe(()=>{this._isInitialRender=!0,this.apply()})}apply(){if(this._isDisposed||!this._platform.isBrowser)return;if(!this._isInitialRender&&this._positionLocked&&this._lastPosition)return void this.reapplyLastPosition();this._clearPanelClasses(),this._resetOverlayElementStyles(),this._resetBoundingBoxStyles(),this._viewportRect=this._getNarrowedViewportRect(),this._originRect=this._getOriginRect(),this._overlayRect=this._pane.getBoundingClientRect();const e=this._originRect,t=this._overlayRect,l=this._viewportRect,V=[];let d;for(let a of this._preferredPositions){let U=this._getOriginPoint(e,a),N=this._getOverlayPoint(U,t,a),R=this._getOverlayFit(N,t,l,a);if(R.isCompletelyWithinViewport)return this._isPushed=!1,void this._applyPosition(a,U);this._canFitWithFlexibleDimensions(R,N,l)?V.push({position:a,origin:U,overlayRect:t,boundingBoxRect:this._calculateBoundingBoxRect(U,a)}):(!d||d.overlayFit.visibleArea<R.visibleArea)&&(d={overlayFit:R,overlayPoint:N,originPoint:U,position:a,overlayRect:t})}if(V.length){let a=null,U=-1;for(const N of V){const R=N.boundingBoxRect.width*N.boundingBoxRect.height*(N.position.weight||1);R>U&&(U=R,a=N)}return this._isPushed=!1,void this._applyPosition(a.position,a.origin)}if(this._canPush)return this._isPushed=!0,void this._applyPosition(d.position,d.originPoint);this._applyPosition(d.position,d.originPoint)}detach(){this._clearPanelClasses(),this._lastPosition=null,this._previousPushAmount=null,this._resizeSubscription.unsubscribe()}dispose(){this._isDisposed||(this._boundingBox&&iV(this._boundingBox.style,{top:"",left:"",right:"",bottom:"",height:"",width:"",alignItems:"",justifyContent:""}),this._pane&&this._resetOverlayElementStyles(),this._overlayRef&&this._overlayRef.hostElement.classList.remove(xp),this.detach(),this._positionChanges.complete(),this._overlayRef=this._boundingBox=null,this._isDisposed=!0)}reapplyLastPosition(){if(!this._isDisposed&&(!this._platform||this._platform.isBrowser)){this._originRect=this._getOriginRect(),this._overlayRect=this._pane.getBoundingClientRect(),this._viewportRect=this._getNarrowedViewportRect();const e=this._lastPosition||this._preferredPositions[0],t=this._getOriginPoint(this._originRect,e);this._applyPosition(e,t)}}withScrollableContainers(e){return this._scrollables=e,this}withPositions(e){return this._preferredPositions=e,-1===e.indexOf(this._lastPosition)&&(this._lastPosition=null),this._validatePositions(),this}withViewportMargin(e){return this._viewportMargin=e,this}withFlexibleDimensions(e=!0){return this._hasFlexibleDimensions=e,this}withGrowAfterOpen(e=!0){return this._growAfterOpen=e,this}withPush(e=!0){return this._canPush=e,this}withLockedPosition(e=!0){return this._positionLocked=e,this}setOrigin(e){return this._origin=e,this}withDefaultOffsetX(e){return this._offsetX=e,this}withDefaultOffsetY(e){return this._offsetY=e,this}withTransformOriginOn(e){return this._transformOriginSelector=e,this}_getOriginPoint(e,t){let l,V;if("center"==t.originX)l=e.left+e.width/2;else{const d=this._isRtl()?e.right:e.left,a=this._isRtl()?e.left:e.right;l="start"==t.originX?d:a}return V="center"==t.originY?e.top+e.height/2:"top"==t.originY?e.top:e.bottom,{x:l,y:V}}_getOverlayPoint(e,t,l){let V,d;return V="center"==l.overlayX?-t.width/2:"start"===l.overlayX?this._isRtl()?-t.width:0:this._isRtl()?0:-t.width,d="center"==l.overlayY?-t.height/2:"top"==l.overlayY?0:-t.height,{x:e.x+V,y:e.y+d}}_getOverlayFit(e,t,l,V){const d=yp(t);let{x:a,y:U}=e,N=this._getOffset(V,"x"),R=this._getOffset(V,"y");N&&(a+=N),R&&(U+=R);let c=0-U,i=U+d.height-l.height,o=this._subtractOverflows(d.width,0-a,a+d.width-l.width),s=this._subtractOverflows(d.height,c,i),T=o*s;return{visibleArea:T,isCompletelyWithinViewport:d.width*d.height===T,fitsInViewportVertically:s===d.height,fitsInViewportHorizontally:o==d.width}}_canFitWithFlexibleDimensions(e,t,l){if(this._hasFlexibleDimensions){const V=l.bottom-t.y,d=l.right-t.x,a=Xp(this._overlayRef.getConfig().minHeight),U=Xp(this._overlayRef.getConfig().minWidth),R=e.fitsInViewportHorizontally||null!=U&&U<=d;return(e.fitsInViewportVertically||null!=a&&a<=V)&&R}return!1}_pushOverlayOnScreen(e,t,l){if(this._previousPushAmount&&this._positionLocked)return{x:e.x+this._previousPushAmount.x,y:e.y+this._previousPushAmount.y};const V=yp(t),d=this._viewportRect,a=Math.max(e.x+V.width-d.width,0),U=Math.max(e.y+V.height-d.height,0),N=Math.max(d.top-l.top-e.y,0),R=Math.max(d.left-l.left-e.x,0);let Z=0,r=0;return Z=V.width<=d.width?R||-a:e.x<this._viewportMargin?d.left-l.left-e.x:0,r=V.height<=d.height?N||-U:e.y<this._viewportMargin?d.top-l.top-e.y:0,this._previousPushAmount={x:Z,y:r},{x:e.x+Z,y:e.y+r}}_applyPosition(e,t){if(this._setTransformOrigin(e),this._setOverlayElementStyles(t,e),this._setBoundingBoxStyles(t,e),e.panelClass&&this._addPanelClasses(e.panelClass),this._lastPosition=e,this._positionChanges.observers.length){const l=this._getScrollVisibility(),V=new pj(e,l);this._positionChanges.next(V)}this._isInitialRender=!1}_setTransformOrigin(e){if(!this._transformOriginSelector)return;const t=this._boundingBox.querySelectorAll(this._transformOriginSelector);let l,V=e.overlayY;l="center"===e.overlayX?"center":this._isRtl()?"start"===e.overlayX?"right":"left":"start"===e.overlayX?"left":"right";for(let d=0;d<t.length;d++)t[d].style.transformOrigin=`${l} ${V}`}_calculateBoundingBoxRect(e,t){const l=this._viewportRect,V=this._isRtl();let d,a,U,Z,r,c;if("top"===t.overlayY)a=e.y,d=l.height-a+this._viewportMargin;else if("bottom"===t.overlayY)U=l.height-e.y+2*this._viewportMargin,d=l.height-U+this._viewportMargin;else{const i=Math.min(l.bottom-e.y+l.top,e.y),o=this._lastBoundingBoxSize.height;d=2*i,a=e.y-i,d>o&&!this._isInitialRender&&!this._growAfterOpen&&(a=e.y-o/2)}if("end"===t.overlayX&&!V||"start"===t.overlayX&&V)c=l.width-e.x+this._viewportMargin,Z=e.x-this._viewportMargin;else if("start"===t.overlayX&&!V||"end"===t.overlayX&&V)r=e.x,Z=l.right-e.x;else{const i=Math.min(l.right-e.x+l.left,e.x),o=this._lastBoundingBoxSize.width;Z=2*i,r=e.x-i,Z>o&&!this._isInitialRender&&!this._growAfterOpen&&(r=e.x-o/2)}return{top:a,left:r,bottom:U,right:c,width:Z,height:d}}_setBoundingBoxStyles(e,t){const l=this._calculateBoundingBoxRect(e,t);!this._isInitialRender&&!this._growAfterOpen&&(l.height=Math.min(l.height,this._lastBoundingBoxSize.height),l.width=Math.min(l.width,this._lastBoundingBoxSize.width));const V={};if(this._hasExactPosition())V.top=V.left="0",V.bottom=V.right=V.maxHeight=V.maxWidth="",V.width=V.height="100%";else{const d=this._overlayRef.getConfig().maxHeight,a=this._overlayRef.getConfig().maxWidth;V.height=je(l.height),V.top=je(l.top),V.bottom=je(l.bottom),V.width=je(l.width),V.left=je(l.left),V.right=je(l.right),V.alignItems="center"===t.overlayX?"center":"end"===t.overlayX?"flex-end":"flex-start",V.justifyContent="center"===t.overlayY?"center":"bottom"===t.overlayY?"flex-end":"flex-start",d&&(V.maxHeight=je(d)),a&&(V.maxWidth=je(a))}this._lastBoundingBoxSize=l,iV(this._boundingBox.style,V)}_resetBoundingBoxStyles(){iV(this._boundingBox.style,{top:"0",left:"0",right:"0",bottom:"0",height:"",width:"",alignItems:"",justifyContent:""})}_resetOverlayElementStyles(){iV(this._pane.style,{top:"",left:"",bottom:"",right:"",position:"",transform:""})}_setOverlayElementStyles(e,t){const l={},V=this._hasExactPosition(),d=this._hasFlexibleDimensions,a=this._overlayRef.getConfig();if(V){const Z=this._viewportRuler.getViewportScrollPosition();iV(l,this._getExactOverlayY(t,e,Z)),iV(l,this._getExactOverlayX(t,e,Z))}else l.position="static";let U="",N=this._getOffset(t,"x"),R=this._getOffset(t,"y");N&&(U+=`translateX(${N}px) `),R&&(U+=`translateY(${R}px)`),l.transform=U.trim(),a.maxHeight&&(V?l.maxHeight=je(a.maxHeight):d&&(l.maxHeight="")),a.maxWidth&&(V?l.maxWidth=je(a.maxWidth):d&&(l.maxWidth="")),iV(this._pane.style,l)}_getExactOverlayY(e,t,l){let V={top:"",bottom:""},d=this._getOverlayPoint(t,this._overlayRect,e);this._isPushed&&(d=this._pushOverlayOnScreen(d,this._overlayRect,l));let a=this._overlayContainer.getContainerElement().getBoundingClientRect().top;return d.y-=a,"bottom"===e.overlayY?V.bottom=this._document.documentElement.clientHeight-(d.y+this._overlayRect.height)+"px":V.top=je(d.y),V}_getExactOverlayX(e,t,l){let a,V={left:"",right:""},d=this._getOverlayPoint(t,this._overlayRect,e);return this._isPushed&&(d=this._pushOverlayOnScreen(d,this._overlayRect,l)),a=this._isRtl()?"end"===e.overlayX?"left":"right":"end"===e.overlayX?"right":"left","right"===a?V.right=this._document.documentElement.clientWidth-(d.x+this._overlayRect.width)+"px":V.left=je(d.x),V}_getScrollVisibility(){const e=this._getOriginRect(),t=this._pane.getBoundingClientRect(),l=this._scrollables.map(V=>V.getElementRef().nativeElement.getBoundingClientRect());return{isOriginClipped:bp(e,l),isOriginOutsideView:To(e,l),isOverlayClipped:bp(t,l),isOverlayOutsideView:To(t,l)}}_subtractOverflows(e,...t){return t.reduce((l,V)=>l-Math.max(V,0),e)}_getNarrowedViewportRect(){const e=this._document.documentElement.clientWidth,t=this._document.documentElement.clientHeight,l=this._viewportRuler.getViewportScrollPosition();return{top:l.top+this._viewportMargin,left:l.left+this._viewportMargin,right:l.left+e-this._viewportMargin,bottom:l.top+t-this._viewportMargin,width:e-2*this._viewportMargin,height:t-2*this._viewportMargin}}_isRtl(){return"rtl"===this._overlayRef.getDirection()}_hasExactPosition(){return!this._hasFlexibleDimensions||this._isPushed}_getOffset(e,t){return"x"===t?e.offsetX??this._offsetX:e.offsetY??this._offsetY}_validatePositions(){}_addPanelClasses(e){this._pane&&Ha(e).forEach(t=>{""!==t&&-1===this._appliedPanelClasses.indexOf(t)&&(this._appliedPanelClasses.push(t),this._pane.classList.add(t))})}_clearPanelClasses(){this._pane&&(this._appliedPanelClasses.forEach(e=>{this._pane.classList.remove(e)}),this._appliedPanelClasses=[])}_getOriginRect(){const e=this._origin;if(e instanceof we)return e.nativeElement.getBoundingClientRect();if(e instanceof Element)return e.getBoundingClientRect();const t=e.width||0,l=e.height||0;return{top:e.y,bottom:e.y+l,left:e.x,right:e.x+t,height:l,width:t}}}function iV(n,e){for(let t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}function Xp(n){if("number"!=typeof n&&null!=n){const[e,t]=n.split(Yj);return t&&"px"!==t?null:parseFloat(e)}return n||null}function yp(n){return{top:Math.floor(n.top),right:Math.floor(n.right),bottom:Math.floor(n.bottom),left:Math.floor(n.left),width:Math.floor(n.width),height:Math.floor(n.height)}}const jp="cdk-global-overlay-wrapper";class Qj{constructor(){this._cssPosition="static",this._topOffset="",this._bottomOffset="",this._leftOffset="",this._rightOffset="",this._alignItems="",this._justifyContent="",this._width="",this._height=""}attach(e){const t=e.getConfig();this._overlayRef=e,this._width&&!t.width&&e.updateSize({width:this._width}),this._height&&!t.height&&e.updateSize({height:this._height}),e.hostElement.classList.add(jp),this._isDisposed=!1}top(e=""){return this._bottomOffset="",this._topOffset=e,this._alignItems="flex-start",this}left(e=""){return this._rightOffset="",this._leftOffset=e,this._justifyContent="flex-start",this}bottom(e=""){return this._topOffset="",this._bottomOffset=e,this._alignItems="flex-end",this}right(e=""){return this._leftOffset="",this._rightOffset=e,this._justifyContent="flex-end",this}width(e=""){return this._overlayRef?this._overlayRef.updateSize({width:e}):this._width=e,this}height(e=""){return this._overlayRef?this._overlayRef.updateSize({height:e}):this._height=e,this}centerHorizontally(e=""){return this.left(e),this._justifyContent="center",this}centerVertically(e=""){return this.top(e),this._alignItems="center",this}apply(){if(!this._overlayRef||!this._overlayRef.hasAttached())return;const e=this._overlayRef.overlayElement.style,t=this._overlayRef.hostElement.style,l=this._overlayRef.getConfig(),{width:V,height:d,maxWidth:a,maxHeight:U}=l,N=!("100%"!==V&&"100vw"!==V||a&&"100%"!==a&&"100vw"!==a),R=!("100%"!==d&&"100vh"!==d||U&&"100%"!==U&&"100vh"!==U);e.position=this._cssPosition,e.marginLeft=N?"0":this._leftOffset,e.marginTop=R?"0":this._topOffset,e.marginBottom=this._bottomOffset,e.marginRight=this._rightOffset,N?t.justifyContent="flex-start":"center"===this._justifyContent?t.justifyContent="center":"rtl"===this._overlayRef.getConfig().direction?"flex-start"===this._justifyContent?t.justifyContent="flex-end":"flex-end"===this._justifyContent&&(t.justifyContent="flex-start"):t.justifyContent=this._justifyContent,t.alignItems=R?"flex-start":this._alignItems}dispose(){if(this._isDisposed||!this._overlayRef)return;const e=this._overlayRef.overlayElement.style,t=this._overlayRef.hostElement,l=t.style;t.classList.remove(jp),l.justifyContent=l.alignItems=e.marginTop=e.marginBottom=e.marginLeft=e.marginRight=e.position="",this._overlayRef=null,this._isDisposed=!0}}let zj=(()=>{class n{constructor(t,l,V,d){this._viewportRuler=t,this._document=l,this._platform=V,this._overlayContainer=d}global(){return new Qj}flexibleConnectedTo(t){return new Jj(t,this._viewportRuler,this._document,this._platform,this._overlayContainer)}}return n.\u0275fac=function(t){return new(t||n)(h(Li),h(w),h(Fn),h(Dp))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),bj=0,ER=(()=>{class n{constructor(t,l,V,d,a,U,N,R,Z,r,c){this.scrollStrategies=t,this._overlayContainer=l,this._componentFactoryResolver=V,this._positionBuilder=d,this._keyboardDispatcher=a,this._injector=U,this._ngZone=N,this._document=R,this._directionality=Z,this._location=r,this._outsideClickDispatcher=c}create(t){const l=this._createHostElement(),V=this._createPaneElement(l),d=this._createPortalOutlet(V),a=new up(t);return a.direction=a.direction||this._directionality.value,new Sj(d,l,V,a,this._ngZone,this._keyboardDispatcher,this._document,this._location,this._outsideClickDispatcher)}position(){return this._positionBuilder}_createPaneElement(t){const l=this._document.createElement("div");return l.id="cdk-overlay-"+bj++,l.classList.add("cdk-overlay-pane"),t.appendChild(l),l}_createHostElement(){const t=this._document.createElement("div");return this._overlayContainer.getContainerElement().appendChild(t),t}_createPortalOutlet(t){return this._appRef||(this._appRef=this._injector.get(tV)),new sj(t,this._componentFactoryResolver,this._appRef,this._injector,this._document)}}return n.\u0275fac=function(t){return new(t||n)(h(Fj),h(Dp),h(fn),h(zj),h(kj),h(ge),h(_),h(w),h(fi),h(MN),h(Ej))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();const Dj={provide:new E("cdk-connected-overlay-scroll-strategy"),deps:[ER],useFactory:function Gj(n){return()=>n.scrollStrategies.reposition()}};let Hp=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[ER,Dj],imports:[[wa,so,Dm],Dm]}),n})();const Bp=new ol("13.0.0"),Op=new ol("13.0.0"),Xj=new E("mat-sanity-checks",{providedIn:"root",factory:function xj(){return!0}});let ct=(()=>{class n{constructor(t,l,V){this._hasDoneGlobalChecks=!1,this._document=V,t._applyBodyHighContrastModeCssClasses(),this._sanityChecks=l,this._hasDoneGlobalChecks||(this._checkDoctypeIsDefined(),this._checkThemeIsPresent(),this._checkCdkVersionMatch(),this._hasDoneGlobalChecks=!0)}_checkIsEnabled(t){return!(!function wb(){return t1=!0,e1}()||Ii())&&("boolean"==typeof this._sanityChecks?this._sanityChecks:!!this._sanityChecks[t])}_checkDoctypeIsDefined(){this._checkIsEnabled("doctype")&&!this._document.doctype&&console.warn("Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.")}_checkThemeIsPresent(){if(!this._checkIsEnabled("theme")||!this._document.body||"function"!=typeof getComputedStyle)return;const t=this._document.createElement("div");t.classList.add("mat-theme-loaded-marker"),this._document.body.appendChild(t);const l=getComputedStyle(t);l&&"none"!==l.display&&console.warn("Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming"),t.remove()}_checkCdkVersionMatch(){this._checkIsEnabled("version")&&Op.full!==Bp.full&&console.warn("The Angular Material version ("+Op.full+") does not match the Angular CDK version ("+Bp.full+").\nPlease ensure the versions of these two packages exactly match.")}}return n.\u0275fac=function(t){return new(t||n)(h(fm),h(Xj,8),h(w))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[wa],wa]}),n})();function yj(n){return class extends n{constructor(...e){super(...e),this._disabled=!1}get disabled(){return this._disabled}set disabled(e){this._disabled=qt(e)}}}function vp(n,e){return class extends n{constructor(...t){super(...t),this.defaultColor=e,this.color=e}get color(){return this._color}set color(t){const l=t||this.defaultColor;l!==this._color&&(this._color&&this._elementRef.nativeElement.classList.remove(`mat-${this._color}`),l&&this._elementRef.nativeElement.classList.add(`mat-${l}`),this._color=l)}}}function jj(n){return class extends n{constructor(...e){super(...e),this._disableRipple=!1}get disableRipple(){return this._disableRipple}set disableRipple(e){this._disableRipple=qt(e)}}}function Hj(n,e=0){return class extends n{constructor(...t){super(...t),this._tabIndex=e,this.defaultTabIndex=e}get tabIndex(){return this.disabled?-1:this._tabIndex}set tabIndex(t){this._tabIndex=null!=t?RR(t):this.defaultTabIndex}}}class Oj{constructor(e,t,l){this._renderer=e,this.element=t,this.config=l,this.state=3}fadeOut(){this._renderer.fadeOutRipple(this)}}const wp={enterDuration:225,exitDuration:150},ho=rV({passive:!0}),gp=["mousedown","touchstart"],Ip=["mouseup","mouseleave","touchend","touchcancel"];class wj{constructor(e,t,l,V){this._target=e,this._ngZone=t,this._isPointerDown=!1,this._activeRipples=new Set,this._pointerUpEventsRegistered=!1,V.isBrowser&&(this._containerElement=Le(l))}fadeInRipple(e,t,l={}){const V=this._containerRect=this._containerRect||this._containerElement.getBoundingClientRect(),d={...wp,...l.animation};l.centered&&(e=V.left+V.width/2,t=V.top+V.height/2);const a=l.radius||function Ij(n,e,t){const l=Math.max(Math.abs(n-t.left),Math.abs(n-t.right)),V=Math.max(Math.abs(e-t.top),Math.abs(e-t.bottom));return Math.sqrt(l*l+V*V)}(e,t,V),U=e-V.left,N=t-V.top,R=d.enterDuration,Z=document.createElement("div");Z.classList.add("mat-ripple-element"),Z.style.left=U-a+"px",Z.style.top=N-a+"px",Z.style.height=2*a+"px",Z.style.width=2*a+"px",null!=l.color&&(Z.style.backgroundColor=l.color),Z.style.transitionDuration=`${R}ms`,this._containerElement.appendChild(Z),function gj(n){window.getComputedStyle(n).getPropertyValue("opacity")}(Z),Z.style.transform="scale(1)";const r=new Oj(this,Z,l);return r.state=0,this._activeRipples.add(r),l.persistent||(this._mostRecentTransientRipple=r),this._runTimeoutOutsideZone(()=>{const c=r===this._mostRecentTransientRipple;r.state=1,!l.persistent&&(!c||!this._isPointerDown)&&r.fadeOut()},R),r}fadeOutRipple(e){const t=this._activeRipples.delete(e);if(e===this._mostRecentTransientRipple&&(this._mostRecentTransientRipple=null),this._activeRipples.size||(this._containerRect=null),!t)return;const l=e.element,V={...wp,...e.config.animation};l.style.transitionDuration=`${V.exitDuration}ms`,l.style.opacity="0",e.state=2,this._runTimeoutOutsideZone(()=>{e.state=3,l.remove()},V.exitDuration)}fadeOutAll(){this._activeRipples.forEach(e=>e.fadeOut())}fadeOutAllNonPersistent(){this._activeRipples.forEach(e=>{e.config.persistent||e.fadeOut()})}setupTriggerEvents(e){const t=Le(e);!t||t===this._triggerElement||(this._removeTriggerEvents(),this._triggerElement=t,this._registerEvents(gp))}handleEvent(e){"mousedown"===e.type?this._onMousedown(e):"touchstart"===e.type?this._onTouchStart(e):this._onPointerUp(),this._pointerUpEventsRegistered||(this._registerEvents(Ip),this._pointerUpEventsRegistered=!0)}_onMousedown(e){const t=Ci(e),l=this._lastTouchStartEvent&&Date.now()<this._lastTouchStartEvent+800;!this._target.rippleDisabled&&!t&&!l&&(this._isPointerDown=!0,this.fadeInRipple(e.clientX,e.clientY,this._target.rippleConfig))}_onTouchStart(e){if(!this._target.rippleDisabled&&!Ki(e)){this._lastTouchStartEvent=Date.now(),this._isPointerDown=!0;const t=e.changedTouches;for(let l=0;l<t.length;l++)this.fadeInRipple(t[l].clientX,t[l].clientY,this._target.rippleConfig)}}_onPointerUp(){!this._isPointerDown||(this._isPointerDown=!1,this._activeRipples.forEach(e=>{!e.config.persistent&&(1===e.state||e.config.terminateOnPointerUp&&0===e.state)&&e.fadeOut()}))}_runTimeoutOutsideZone(e,t=0){this._ngZone.runOutsideAngular(()=>setTimeout(e,t))}_registerEvents(e){this._ngZone.runOutsideAngular(()=>{e.forEach(t=>{this._triggerElement.addEventListener(t,this,ho)})})}_removeTriggerEvents(){this._triggerElement&&(gp.forEach(e=>{this._triggerElement.removeEventListener(e,this,ho)}),this._pointerUpEventsRegistered&&Ip.forEach(e=>{this._triggerElement.removeEventListener(e,this,ho)}))}}const fj=new E("mat-ripple-global-options");let fp=(()=>{class n{constructor(t,l,V,d,a){this._elementRef=t,this._animationMode=a,this.radius=0,this._disabled=!1,this._isInitialized=!1,this._globalOptions=d||{},this._rippleRenderer=new wj(this,l,t,V)}get disabled(){return this._disabled}set disabled(t){t&&this.fadeOutAllNonPersistent(),this._disabled=t,this._setupTriggerEventsIfEnabled()}get trigger(){return this._trigger||this._elementRef.nativeElement}set trigger(t){this._trigger=t,this._setupTriggerEventsIfEnabled()}ngOnInit(){this._isInitialized=!0,this._setupTriggerEventsIfEnabled()}ngOnDestroy(){this._rippleRenderer._removeTriggerEvents()}fadeOutAll(){this._rippleRenderer.fadeOutAll()}fadeOutAllNonPersistent(){this._rippleRenderer.fadeOutAllNonPersistent()}get rippleConfig(){return{centered:this.centered,radius:this.radius,color:this.color,animation:{...this._globalOptions.animation,..."NoopAnimations"===this._animationMode?{enterDuration:0,exitDuration:0}:{},...this.animation},terminateOnPointerUp:this._globalOptions.terminateOnPointerUp}}get rippleDisabled(){return this.disabled||!!this._globalOptions.disabled}_setupTriggerEventsIfEnabled(){!this.disabled&&this._isInitialized&&this._rippleRenderer.setupTriggerEvents(this.trigger)}launch(t,l=0,V){return"number"==typeof t?this._rippleRenderer.fadeInRipple(t,l,{...this.rippleConfig,...V}):this._rippleRenderer.fadeInRipple(0,0,{...this.rippleConfig,...t})}}return n.\u0275fac=function(t){return new(t||n)(M(we),M(_),M(Fn),M(fj,8),M(eV,8))},n.\u0275dir=Me({type:n,selectors:[["","mat-ripple",""],["","matRipple",""]],hostAttrs:[1,"mat-ripple"],hostVars:2,hostBindings:function(t,l){2&t&&Zn("mat-ripple-unbounded",l.unbounded)},inputs:{color:["matRippleColor","color"],unbounded:["matRippleUnbounded","unbounded"],centered:["matRippleCentered","centered"],radius:["matRippleRadius","radius"],animation:["matRippleAnimation","animation"],disabled:["matRippleDisabled","disabled"],trigger:["matRippleTrigger","trigger"]},exportAs:["matRipple"]}),n})(),Lj=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[ct,vi],ct]}),n})();const Cj=["mat-button",""],Kj=["*"],_j=["mat-button","mat-flat-button","mat-icon-button","mat-raised-button","mat-stroked-button","mat-mini-fab","mat-fab"],qj=vp(yj(jj(class{constructor(n){this._elementRef=n}})));let Lp=(()=>{class n extends qj{constructor(t,l,V){super(t),this._focusMonitor=l,this._animationMode=V,this.isRoundButton=this._hasHostAttributes("mat-fab","mat-mini-fab"),this.isIconButton=this._hasHostAttributes("mat-icon-button");for(const d of _j)this._hasHostAttributes(d)&&this._getHostElement().classList.add(d);t.nativeElement.classList.add("mat-button-base"),this.isRoundButton&&(this.color="accent")}ngAfterViewInit(){this._focusMonitor.monitor(this._elementRef,!0)}ngOnDestroy(){this._focusMonitor.stopMonitoring(this._elementRef)}focus(t,l){t?this._focusMonitor.focusVia(this._getHostElement(),t,l):this._getHostElement().focus(l)}_getHostElement(){return this._elementRef.nativeElement}_isRippleDisabled(){return this.disableRipple||this.disabled}_hasHostAttributes(...t){return t.some(l=>this._getHostElement().hasAttribute(l))}}return n.\u0275fac=function(t){return new(t||n)(M(we),M(wm),M(eV,8))},n.\u0275cmp=Et({type:n,selectors:[["button","mat-button",""],["button","mat-raised-button",""],["button","mat-icon-button",""],["button","mat-fab",""],["button","mat-mini-fab",""],["button","mat-stroked-button",""],["button","mat-flat-button",""]],viewQuery:function(t,l){if(1&t&&Nd(fp,5),2&t){let V;Dt(V=xt())&&(l.ripple=V.first)}},hostAttrs:[1,"mat-focus-indicator"],hostVars:5,hostBindings:function(t,l){2&t&&(Ct("disabled",l.disabled||null),Zn("_mat-animation-noopable","NoopAnimations"===l._animationMode)("mat-button-disabled",l.disabled))},inputs:{disabled:"disabled",disableRipple:"disableRipple",color:"color"},exportAs:["matButton"],features:[Pn],attrs:Cj,ngContentSelectors:Kj,decls:4,vars:5,consts:[[1,"mat-button-wrapper"],["matRipple","",1,"mat-button-ripple",3,"matRippleDisabled","matRippleCentered","matRippleTrigger"],[1,"mat-button-focus-overlay"]],template:function(t,l){1&t&&($U(),re(0,"span",0),Wl(1),ce(),Wt(2,"span",1)(3,"span",2)),2&t&&(q(2),Zn("mat-button-ripple-round",l.isRoundButton||l.isIconButton),Ze("matRippleDisabled",l._isRippleDisabled())("matRippleCentered",l.isIconButton)("matRippleTrigger",l._getHostElement()))},dependencies:[fp],styles:[".mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{opacity:0}.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:.04}@media(hover: none){.mat-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay,.mat-stroked-button:hover:not(.mat-button-disabled) .mat-button-focus-overlay{opacity:0}}.mat-button,.mat-icon-button,.mat-stroked-button,.mat-flat-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-button.mat-button-disabled,.mat-icon-button.mat-button-disabled,.mat-stroked-button.mat-button-disabled,.mat-flat-button.mat-button-disabled{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner{border:0}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button.mat-button-disabled{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-raised-button::-moz-focus-inner{border:0}._mat-animation-noopable.mat-raised-button{transition:none;animation:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button .mat-button-ripple.mat-ripple,.mat-stroked-button .mat-button-focus-overlay{top:-1px;left:-1px;right:-1px;bottom:-1px}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab::-moz-focus-inner{border:0}.mat-fab.mat-button-disabled{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-fab{transition:none;animation:none}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:64px;line-height:36px;padding:0 16px;border-radius:4px;overflow:visible;transform:translate3d(0, 0, 0);transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab.mat-button-disabled{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:.12}.mat-mini-fab::-moz-focus-inner{border:0}._mat-animation-noopable.mat-mini-fab{transition:none;animation:none}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button i,.mat-icon-button .mat-icon{line-height:24px}.mat-button-ripple.mat-ripple,.mat-button-focus-overlay{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit}.mat-button-ripple.mat-ripple:not(:empty){transform:translateZ(0)}.mat-button-focus-overlay{opacity:0;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1),background-color 200ms cubic-bezier(0.35, 0, 0.25, 1)}._mat-animation-noopable .mat-button-focus-overlay{transition:none}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:inline-flex;justify-content:center;align-items:center;font-size:inherit;width:2.5em;height:2.5em}.cdk-high-contrast-active .mat-button,.cdk-high-contrast-active .mat-flat-button,.cdk-high-contrast-active .mat-raised-button,.cdk-high-contrast-active .mat-icon-button,.cdk-high-contrast-active .mat-fab,.cdk-high-contrast-active .mat-mini-fab{outline:solid 1px}.cdk-high-contrast-active .mat-button-base.cdk-keyboard-focused,.cdk-high-contrast-active .mat-button-base.cdk-program-focused{outline:solid 3px}\n"],encapsulation:2,changeDetection:0}),n})(),Wo=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[Lj,ct],ct]}),n})();class Cp{}const Vl="*";function SR(n,e){return{type:7,name:n,definitions:e,options:{}}}function kd(n,e=null){return{type:4,styles:e,timings:n}}function Kp(n,e=null){return{type:2,steps:n,options:e}}function it(n){return{type:6,styles:n,offset:null}}function Ql(n,e,t){return{type:0,name:n,styles:e,options:t}}function Ed(n,e,t=null){return{type:1,expr:n,animation:e,options:t}}function Pp(n){Promise.resolve().then(n)}class Ka{constructor(e=0,t=0){this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._originalOnDoneFns=[],this._originalOnStartFns=[],this._started=!1,this._destroyed=!1,this._finished=!1,this._position=0,this.parentPlayer=null,this.totalTime=e+t}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(e=>e()),this._onDoneFns=[])}onStart(e){this._originalOnStartFns.push(e),this._onStartFns.push(e)}onDone(e){this._originalOnDoneFns.push(e),this._onDoneFns.push(e)}onDestroy(e){this._onDestroyFns.push(e)}hasStarted(){return this._started}init(){}play(){this.hasStarted()||(this._onStart(),this.triggerMicrotask()),this._started=!0}triggerMicrotask(){Pp(()=>this._onFinish())}_onStart(){this._onStartFns.forEach(e=>e()),this._onStartFns=[]}pause(){}restart(){}finish(){this._onFinish()}destroy(){this._destroyed||(this._destroyed=!0,this.hasStarted()||this._onStart(),this.finish(),this._onDestroyFns.forEach(e=>e()),this._onDestroyFns=[])}reset(){this._started=!1,this._finished=!1,this._onStartFns=this._originalOnStartFns,this._onDoneFns=this._originalOnDoneFns}setPosition(e){this._position=this.totalTime?e*this.totalTime:1}getPosition(){return this.totalTime?this._position/this.totalTime:1}triggerCallback(e){const t="start"==e?this._onStartFns:this._onDoneFns;t.forEach(l=>l()),t.length=0}}class _p{constructor(e){this._onDoneFns=[],this._onStartFns=[],this._finished=!1,this._started=!1,this._destroyed=!1,this._onDestroyFns=[],this.parentPlayer=null,this.totalTime=0,this.players=e;let t=0,l=0,V=0;const d=this.players.length;0==d?Pp(()=>this._onFinish()):this.players.forEach(a=>{a.onDone(()=>{++t==d&&this._onFinish()}),a.onDestroy(()=>{++l==d&&this._onDestroy()}),a.onStart(()=>{++V==d&&this._onStart()})}),this.totalTime=this.players.reduce((a,U)=>Math.max(a,U.totalTime),0)}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(e=>e()),this._onDoneFns=[])}init(){this.players.forEach(e=>e.init())}onStart(e){this._onStartFns.push(e)}_onStart(){this.hasStarted()||(this._started=!0,this._onStartFns.forEach(e=>e()),this._onStartFns=[])}onDone(e){this._onDoneFns.push(e)}onDestroy(e){this._onDestroyFns.push(e)}hasStarted(){return this._started}play(){this.parentPlayer||this.init(),this._onStart(),this.players.forEach(e=>e.play())}pause(){this.players.forEach(e=>e.pause())}restart(){this.players.forEach(e=>e.restart())}finish(){this._onFinish(),this.players.forEach(e=>e.finish())}destroy(){this._onDestroy()}_onDestroy(){this._destroyed||(this._destroyed=!0,this._onFinish(),this.players.forEach(e=>e.destroy()),this._onDestroyFns.forEach(e=>e()),this._onDestroyFns=[])}reset(){this.players.forEach(e=>e.reset()),this._destroyed=!1,this._finished=!1,this._started=!1}setPosition(e){const t=e*this.totalTime;this.players.forEach(l=>{const V=l.totalTime?Math.min(1,t/l.totalTime):1;l.setPosition(V)})}getPosition(){const e=this.players.reduce((t,l)=>null===t||l.totalTime>t.totalTime?l:t,null);return null!=e?e.getPosition():0}beforeDestroy(){this.players.forEach(e=>{e.beforeDestroy&&e.beforeDestroy()})}triggerCallback(e){const t="start"==e?this._onStartFns:this._onDoneFns;t.forEach(l=>l()),t.length=0}}const qp=new Set;let Sd,eH=(()=>{class n{constructor(t){this._platform=t,this._matchMedia=this._platform.isBrowser&&window.matchMedia?window.matchMedia.bind(window):nH}matchMedia(t){return(this._platform.WEBKIT||this._platform.BLINK)&&function tH(n){if(!qp.has(n))try{Sd||(Sd=document.createElement("style"),Sd.setAttribute("type","text/css"),document.head.appendChild(Sd)),Sd.sheet&&(Sd.sheet.insertRule(`@media ${n} {body{ }}`,0),qp.add(n))}catch(e){console.error(e)}}(t),this._matchMedia(t)}}return n.\u0275fac=function(t){return new(t||n)(h(Fn))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();function nH(n){return{matches:"all"===n||""===n,media:n,addListener:()=>{},removeListener:()=>{}}}let lH=(()=>{class n{constructor(t,l){this._mediaMatcher=t,this._zone=l,this._queries=new Map,this._destroySubject=new u}ngOnDestroy(){this._destroySubject.next(),this._destroySubject.complete()}isMatched(t){return Ap(Ha(t)).some(V=>this._registerQuery(V).mql.matches)}observe(t){let d=BN(Ap(Ha(t)).map(a=>this._registerQuery(a).observable));return d=ON(d.pipe(Wn(1)),d.pipe(ym(1),Xm(0))),d.pipe(D(a=>{const U={matches:!1,breakpoints:{}};return a.forEach(({matches:N,query:R})=>{U.matches=U.matches||N,U.breakpoints[R]=N}),U}))}_registerQuery(t){if(this._queries.has(t))return this._queries.get(t);const l=this._mediaMatcher.matchMedia(t),d={observable:new ie(a=>{const U=N=>this._zone.run(()=>a.next(N));return l.addListener(U),()=>{l.removeListener(U)}}).pipe(dV(l),D(({matches:a})=>({query:t,matches:a})),Jl(this._destroySubject)),mql:l};return this._queries.set(t,d),d}}return n.\u0275fac=function(t){return new(t||n)(h(eH),h(_))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();function Ap(n){return n.map(e=>e.split(",")).reduce((e,t)=>e.concat(t)).map(e=>e.trim())}function dH(n,e){if(1&n){const t=Vd();re(0,"div",1)(1,"button",2),Rn("click",function(){return Ol(t),vl(Ft().action())}),un(2),ce()()}if(2&n){const t=Ft();q(2),Fl(t.data.action)}}function aH(n,e){}const $p=new E("MatSnackBarData");class YR{constructor(){this.politeness="assertive",this.announcementMessage="",this.duration=0,this.data=null,this.horizontalPosition="center",this.verticalPosition="bottom"}}const UH=Math.pow(2,31)-1;class Mo{constructor(e,t){this._overlayRef=t,this._afterDismissed=new u,this._afterOpened=new u,this._onAction=new u,this._dismissedByAction=!1,this.containerInstance=e,this.onAction().subscribe(()=>this.dismiss()),e._onExit.subscribe(()=>this._finishDismiss())}dismiss(){this._afterDismissed.closed||this.containerInstance.exit(),clearTimeout(this._durationTimeoutId)}dismissWithAction(){this._onAction.closed||(this._dismissedByAction=!0,this._onAction.next(),this._onAction.complete()),clearTimeout(this._durationTimeoutId)}closeWithAction(){this.dismissWithAction()}_dismissAfter(e){this._durationTimeoutId=setTimeout(()=>this.dismiss(),Math.min(e,UH))}_open(){this._afterOpened.closed||(this._afterOpened.next(),this._afterOpened.complete())}_finishDismiss(){this._overlayRef.dispose(),this._onAction.closed||this._onAction.complete(),this._afterDismissed.next({dismissedByAction:this._dismissedByAction}),this._afterDismissed.complete(),this._dismissedByAction=!1}afterDismissed(){return this._afterDismissed}afterOpened(){return this.containerInstance._onEnter}onAction(){return this._onAction}}let NH=(()=>{class n{constructor(t,l){this.snackBarRef=t,this.data=l}action(){this.snackBarRef.dismissWithAction()}get hasAction(){return!!this.data.action}}return n.\u0275fac=function(t){return new(t||n)(M(Mo),M($p))},n.\u0275cmp=Et({type:n,selectors:[["simple-snack-bar"]],hostAttrs:[1,"mat-simple-snackbar"],decls:3,vars:2,consts:[["class","mat-simple-snackbar-action",4,"ngIf"],[1,"mat-simple-snackbar-action"],["mat-button","",3,"click"]],template:function(t,l){1&t&&(re(0,"span"),un(1),ce(),Rt(2,dH,3,1,"div",0)),2&t&&(q(1),Fl(l.data.message),q(1),Ze("ngIf",l.hasAction))},dependencies:[Lp,ma],styles:[".mat-simple-snackbar{display:flex;justify-content:space-between;align-items:center;line-height:20px;opacity:1}.mat-simple-snackbar-action{flex-shrink:0;margin:-8px -8px -8px 8px}.mat-simple-snackbar-action button{max-height:36px;min-width:0}[dir=rtl] .mat-simple-snackbar-action{margin-left:-8px;margin-right:8px}\n"],encapsulation:2,changeDetection:0}),n})();const RH={snackBarState:SR("state",[Ql("void, hidden",it({transform:"scale(0.8)",opacity:0})),Ql("visible",it({transform:"scale(1)",opacity:1})),Ed("* => visible",kd("150ms cubic-bezier(0, 0, 0.2, 1)")),Ed("* => void, * => hidden",kd("75ms cubic-bezier(0.4, 0.0, 1, 1)",it({opacity:0})))])};let ZH=(()=>{class n extends io{constructor(t,l,V,d,a){super(),this._ngZone=t,this._elementRef=l,this._changeDetectorRef=V,this._platform=d,this.snackBarConfig=a,this._announceDelay=150,this._destroyed=!1,this._onAnnounce=new u,this._onExit=new u,this._onEnter=new u,this._animationState="void",this.attachDomPortal=U=>(this._assertNotAttached(),this._applySnackBarClasses(),this._portalOutlet.attachDomPortal(U)),this._live="assertive"!==a.politeness||a.announcementMessage?"off"===a.politeness?"off":"polite":"assertive",this._platform.FIREFOX&&("polite"===this._live&&(this._role="status"),"assertive"===this._live&&(this._role="alert"))}attachComponentPortal(t){return this._assertNotAttached(),this._applySnackBarClasses(),this._portalOutlet.attachComponentPortal(t)}attachTemplatePortal(t){return this._assertNotAttached(),this._applySnackBarClasses(),this._portalOutlet.attachTemplatePortal(t)}onAnimationEnd(t){const{fromState:l,toState:V}=t;if(("void"===V&&"void"!==l||"hidden"===V)&&this._completeExit(),"visible"===V){const d=this._onEnter;this._ngZone.run(()=>{d.next(),d.complete()})}}enter(){this._destroyed||(this._animationState="visible",this._changeDetectorRef.detectChanges(),this._screenReaderAnnounce())}exit(){return this._animationState="hidden",this._elementRef.nativeElement.setAttribute("mat-exit",""),clearTimeout(this._announceTimeoutId),this._onExit}ngOnDestroy(){this._destroyed=!0,this._completeExit()}_completeExit(){this._ngZone.onMicrotaskEmpty.pipe(Wn(1)).subscribe(()=>{this._onExit.next(),this._onExit.complete()})}_applySnackBarClasses(){const t=this._elementRef.nativeElement,l=this.snackBarConfig.panelClass;l&&(Array.isArray(l)?l.forEach(V=>t.classList.add(V)):t.classList.add(l)),"center"===this.snackBarConfig.horizontalPosition&&t.classList.add("mat-snack-bar-center"),"top"===this.snackBarConfig.verticalPosition&&t.classList.add("mat-snack-bar-top")}_assertNotAttached(){this._portalOutlet.hasAttached()}_screenReaderAnnounce(){this._announceTimeoutId||this._ngZone.runOutsideAngular(()=>{this._announceTimeoutId=setTimeout(()=>{const t=this._elementRef.nativeElement.querySelector("[aria-hidden]"),l=this._elementRef.nativeElement.querySelector("[aria-live]");if(t&&l){let V=null;this._platform.isBrowser&&document.activeElement instanceof HTMLElement&&t.contains(document.activeElement)&&(V=document.activeElement),t.removeAttribute("aria-hidden"),l.appendChild(t),V?.focus(),this._onAnnounce.next(),this._onAnnounce.complete()}},this._announceDelay)})}}return n.\u0275fac=function(t){return new(t||n)(M(_),M(we),M(Dn),M(Fn),M(YR))},n.\u0275cmp=Et({type:n,selectors:[["snack-bar-container"]],viewQuery:function(t,l){if(1&t&&Nd(oo,7),2&t){let V;Dt(V=xt())&&(l._portalOutlet=V.first)}},hostAttrs:[1,"mat-snack-bar-container"],hostVars:1,hostBindings:function(t,l){1&t&&_r("@state.done",function(d){return l.onAnimationEnd(d)}),2&t&&ec("@state",l._animationState)},features:[Pn],decls:3,vars:2,consts:[["aria-hidden","true"],["cdkPortalOutlet",""]],template:function(t,l){1&t&&(re(0,"div",0),Rt(1,aH,0,0,"ng-template",1),ce(),Wt(2,"div")),2&t&&(q(2),Ct("aria-live",l._live)("role",l._role))},dependencies:[oo],styles:[".mat-snack-bar-container{border-radius:4px;box-sizing:border-box;display:block;margin:24px;max-width:33vw;min-width:344px;padding:14px 16px;min-height:48px;transform-origin:center}.cdk-high-contrast-active .mat-snack-bar-container{border:solid 1px}.mat-snack-bar-handset{width:100%}.mat-snack-bar-handset .mat-snack-bar-container{margin:8px;max-width:100%;min-width:0;width:100%}\n"],encapsulation:2,data:{animation:[RH.snackBarState]}}),n})(),mo=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[Hp,so,VV,Wo,ct],ct]}),n})();const rH=new E("mat-snack-bar-default-options",{providedIn:"root",factory:function cH(){return new YR}});let iH=(()=>{class n{constructor(t,l,V,d,a,U){this._overlay=t,this._live=l,this._injector=V,this._breakpointObserver=d,this._parentSnackBar=a,this._defaultConfig=U,this._snackBarRefAtThisLevel=null,this.simpleSnackBarComponent=NH,this.snackBarContainerComponent=ZH,this.handsetCssClass="mat-snack-bar-handset"}get _openedSnackBarRef(){const t=this._parentSnackBar;return t?t._openedSnackBarRef:this._snackBarRefAtThisLevel}set _openedSnackBarRef(t){this._parentSnackBar?this._parentSnackBar._openedSnackBarRef=t:this._snackBarRefAtThisLevel=t}openFromComponent(t,l){return this._attach(t,l)}openFromTemplate(t,l){return this._attach(t,l)}open(t,l="",V){const d={...this._defaultConfig,...V};return d.data={message:t,action:l},d.announcementMessage===t&&(d.announcementMessage=void 0),this.openFromComponent(this.simpleSnackBarComponent,d)}dismiss(){this._openedSnackBarRef&&this._openedSnackBarRef.dismiss()}ngOnDestroy(){this._snackBarRefAtThisLevel&&this._snackBarRefAtThisLevel.dismiss()}_attachSnackBarContainer(t,l){const d=ge.create({parent:l&&l.viewContainerRef&&l.viewContainerRef.injector||this._injector,providers:[{provide:YR,useValue:l}]}),a=new ro(this.snackBarContainerComponent,l.viewContainerRef,d),U=t.attach(a);return U.instance.snackBarConfig=l,U.instance}_attach(t,l){const V={...new YR,...this._defaultConfig,...l},d=this._createOverlay(V),a=this._attachSnackBarContainer(d,V),U=new Mo(a,d);if(t instanceof on){const N=new co(t,null,{$implicit:V.data,snackBarRef:U});U.instance=a.attachTemplatePortal(N)}else{const N=this._createInjector(V,U),R=new ro(t,void 0,N),Z=a.attachComponentPortal(R);U.instance=Z.instance}return this._breakpointObserver.observe("(max-width: 599.98px) and (orientation: portrait)").pipe(Jl(d.detachments())).subscribe(N=>{d.overlayElement.classList.toggle(this.handsetCssClass,N.matches)}),V.announcementMessage&&a._onAnnounce.subscribe(()=>{this._live.announce(V.announcementMessage,V.politeness)}),this._animateSnackBar(U,V),this._openedSnackBarRef=U,this._openedSnackBarRef}_animateSnackBar(t,l){t.afterDismissed().subscribe(()=>{this._openedSnackBarRef==t&&(this._openedSnackBarRef=null),l.announcementMessage&&this._live.clear()}),this._openedSnackBarRef?(this._openedSnackBarRef.afterDismissed().subscribe(()=>{t.containerInstance.enter()}),this._openedSnackBarRef.dismiss()):t.containerInstance.enter(),l.duration&&l.duration>0&&t.afterOpened().subscribe(()=>t._dismissAfter(l.duration))}_createOverlay(t){const l=new up;l.direction=t.direction;let V=this._overlay.position().global();const d="rtl"===t.direction,a="left"===t.horizontalPosition||"start"===t.horizontalPosition&&!d||"end"===t.horizontalPosition&&d,U=!a&&"center"!==t.horizontalPosition;return a?V.left("0"):U?V.right("0"):V.centerHorizontally(),"top"===t.verticalPosition?V.top("0"):V.bottom("0"),l.positionStrategy=V,this._overlay.create(l)}_createInjector(t,l){return ge.create({parent:t&&t.viewContainerRef&&t.viewContainerRef.injector||this._injector,providers:[{provide:Mo,useValue:l},{provide:$p,useValue:t.data}]})}}return n.\u0275fac=function(t){return new(t||n)(h(ER),h(j5),h(ge),h(lH),h(n,12),h(rH))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:mo}),n})();var dl=(()=>{return(n=dl||(dl={}))[n.SUCCESS=0]="SUCCESS",n[n.ERROR=1]="ERROR",dl;var n})();let oH=(()=>{class n{constructor(t,l){this.http=t,this._snackBar=l}getListTypeDefinitionById(t){return this.http.get(`/o/headless-admin-list-type/v1.0/list-type-definitions/${t}`)}getListTypeDefinitionByExternalReferenceCode(t){return this.http.get(`/o/headless-admin-list-type/v1.0/list-type-definitions/by-external-reference-code/${t}`)}getTickets(){return this.http.get("/o/c/tickets/")}updateTicket(t){return this.http.put("/o/c/tickets/"+t.id,t)}assignTicketToMe(t){return this.http.put(`/o/c/tickets/${t}/object-actions/assignTicketToMe`,{})}getUsers(){return this.http.get("/o/headless-admin-user/v1.0/user-accounts").pipe(D(t=>t.items))}showToast(t,l){this._snackBar.open(t||(l==dl.SUCCESS?"Your request was done successfully":"Something went wrong"),void 0,{duration:5e3,panelClass:l==dl.SUCCESS?"notification-success":"notification-error",verticalPosition:"top",horizontalPosition:"end"})}}return n.\u0275fac=function(t){return new(t||n)(h(kR),h(iH))},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})();const sH=["primaryValueBar"],TH=vp(class{constructor(n){this._elementRef=n}},"primary"),hH=new E("mat-progress-bar-location",{providedIn:"root",factory:function WH(){const n=me(w),e=n?n.location:null;return{getPathname:()=>e?e.pathname+e.search:""}}}),FH=new E("MAT_PROGRESS_BAR_DEFAULT_OPTIONS");let MH=0,mH=(()=>{class n extends TH{constructor(t,l,V,d,a){super(t),this._ngZone=l,this._animationMode=V,this._isNoopAnimation=!1,this._value=0,this._bufferValue=0,this.animationEnd=new A,this._animationEndSubscription=Fe.EMPTY,this.mode="determinate",this.progressbarId="mat-progress-bar-"+MH++;const U=d?d.getPathname().split("#")[0]:"";this._rectangleFillValue=`url('${U}#${this.progressbarId}')`,this._isNoopAnimation="NoopAnimations"===V,a&&(a.color&&(this.color=this.defaultColor=a.color),this.mode=a.mode||this.mode)}get value(){return this._value}set value(t){this._value=ek(RR(t)||0)}get bufferValue(){return this._bufferValue}set bufferValue(t){this._bufferValue=ek(t||0)}_primaryTransform(){return{transform:`scale3d(${this.value/100}, 1, 1)`}}_bufferTransform(){return"buffer"===this.mode?{transform:`scale3d(${this.bufferValue/100}, 1, 1)`}:null}ngAfterViewInit(){this._ngZone.runOutsideAngular(()=>{const t=this._primaryValueBar.nativeElement;this._animationEndSubscription=ZR(t,"transitionend").pipe(_e(l=>l.target===t)).subscribe(()=>{("determinate"===this.mode||"buffer"===this.mode)&&this._ngZone.run(()=>this.animationEnd.next({value:this.value}))})})}ngOnDestroy(){this._animationEndSubscription.unsubscribe()}}return n.\u0275fac=function(t){return new(t||n)(M(we),M(_),M(eV,8),M(hH,8),M(FH,8))},n.\u0275cmp=Et({type:n,selectors:[["mat-progress-bar"]],viewQuery:function(t,l){if(1&t&&Nd(sH,5),2&t){let V;Dt(V=xt())&&(l._primaryValueBar=V.first)}},hostAttrs:["role","progressbar","aria-valuemin","0","aria-valuemax","100","tabindex","-1",1,"mat-progress-bar"],hostVars:4,hostBindings:function(t,l){2&t&&(Ct("aria-valuenow","indeterminate"===l.mode||"query"===l.mode?null:l.value)("mode",l.mode),Zn("_mat-animation-noopable",l._isNoopAnimation))},inputs:{color:"color",value:"value",bufferValue:"bufferValue",mode:"mode"},outputs:{animationEnd:"animationEnd"},exportAs:["matProgressBar"],features:[Pn],decls:10,vars:4,consts:[["aria-hidden","true"],["width","100%","height","4","focusable","false",1,"mat-progress-bar-background","mat-progress-bar-element"],["x","4","y","0","width","8","height","4","patternUnits","userSpaceOnUse",3,"id"],["cx","2","cy","2","r","2"],["width","100%","height","100%"],[1,"mat-progress-bar-buffer","mat-progress-bar-element",3,"ngStyle"],[1,"mat-progress-bar-primary","mat-progress-bar-fill","mat-progress-bar-element",3,"ngStyle"],["primaryValueBar",""],[1,"mat-progress-bar-secondary","mat-progress-bar-fill","mat-progress-bar-element"]],template:function(t,l){1&t&&(re(0,"div",0),function _s(){B.lFrame.currentNamespace="svg"}(),re(1,"svg",1)(2,"defs")(3,"pattern",2),Wt(4,"circle",3),ce()(),Wt(5,"rect",4),ce(),function qs(){!function YS(){B.lFrame.currentNamespace=null}()}(),Wt(6,"div",5)(7,"div",6,7)(9,"div",8),ce()),2&t&&(q(3),Ze("id",l.progressbarId),q(2),Ct("fill",l._rectangleFillValue),q(1),Ze("ngStyle",l._bufferTransform()),q(1),Ze("ngStyle",l._primaryTransform()))},dependencies:[x1],styles:['.mat-progress-bar{display:block;height:4px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}._mat-animation-noopable.mat-progress-bar{transition:none;animation:none}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-background{display:none}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-buffer{border-top:solid 5px;opacity:.5}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.cdk-high-contrast-active .mat-progress-bar .mat-progress-bar-fill{border-top:solid 4px}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:"";display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2000ms infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2000ms infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2000ms infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear;display:block}.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-buffer,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar._mat-animation-noopable .mat-progress-bar-background{animation:none;transition-duration:1ms}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(83.67142%)}100%{transform:translateX(200.611057%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(0.08)}36.65%{animation-timing-function:cubic-bezier(0.334731, 0.12482, 0.785844, 1);transform:scaleX(0.08)}69.15%{animation-timing-function:cubic-bezier(0.06, 0.11, 0.6, 1);transform:scaleX(0.661479)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:translateX(37.651913%)}48.35%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:translateX(84.386165%)}100%{transform:translateX(160.277782%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(0.15, 0, 0.515058, 0.409685);transform:scaleX(0.08)}19.15%{animation-timing-function:cubic-bezier(0.31033, 0.284058, 0.8, 0.733712);transform:scaleX(0.457104)}44.15%{animation-timing-function:cubic-bezier(0.4, 0.627035, 0.6, 0.902026);transform:scaleX(0.72796)}100%{transform:scaleX(0.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-8px)}}\n'],encapsulation:2,changeDetection:0}),n})();function ek(n,e=0,t=100){return Math.max(e,Math.min(t,n))}let tk=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[VV,ct],ct]}),n})(),pH=(()=>{class n{constructor(){}ngOnInit(){}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275cmp=Et({type:n,selectors:[["app-loading"]],decls:2,vars:0,consts:[[1,"loading-container"],["color","accent","mode","indeterminate"]],template:function(t,l){1&t&&(re(0,"div",0),Wt(1,"mat-progress-bar",1),ce())},dependencies:[mH],styles:[".loading-container[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;background-color:#cccccca8;opacity:.8}"]}),n})();const oV_none="",oV_carl="";let nk=(()=>{class n{constructor(){this._listeners=[]}notify(t,l){for(let V of this._listeners)V(t,l)}listen(t){return this._listeners.push(t),()=>{this._listeners=this._listeners.filter(l=>t!==l)}}ngOnDestroy(){this._listeners=[]}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac,providedIn:"root"}),n})(),kH=0;const po=new E("CdkAccordion");let EH=(()=>{class n{constructor(){this._stateChanges=new u,this._openCloseAllActions=new u,this.id="cdk-accordion-"+kH++,this._multi=!1}get multi(){return this._multi}set multi(t){this._multi=qt(t)}openAll(){this._multi&&this._openCloseAllActions.next(!0)}closeAll(){this._openCloseAllActions.next(!1)}ngOnChanges(t){this._stateChanges.next(t)}ngOnDestroy(){this._stateChanges.complete(),this._openCloseAllActions.complete()}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275dir=Me({type:n,selectors:[["cdk-accordion"],["","cdkAccordion",""]],inputs:{multi:"multi"},exportAs:["cdkAccordion"],features:[ql([{provide:po,useExisting:n}]),kn]}),n})(),SH=0,YH=(()=>{class n{constructor(t,l,V){this.accordion=t,this._changeDetectorRef=l,this._expansionDispatcher=V,this._openCloseAllSubscription=Fe.EMPTY,this.closed=new A,this.opened=new A,this.destroyed=new A,this.expandedChange=new A,this.id="cdk-accordion-child-"+SH++,this._expanded=!1,this._disabled=!1,this._removeUniqueSelectionListener=()=>{},this._removeUniqueSelectionListener=V.listen((d,a)=>{this.accordion&&!this.accordion.multi&&this.accordion.id===a&&this.id!==d&&(this.expanded=!1)}),this.accordion&&(this._openCloseAllSubscription=this._subscribeToOpenCloseAllActions())}get expanded(){return this._expanded}set expanded(t){t=qt(t),this._expanded!==t&&(this._expanded=t,this.expandedChange.emit(t),t?(this.opened.emit(),this._expansionDispatcher.notify(this.id,this.accordion?this.accordion.id:this.id)):this.closed.emit(),this._changeDetectorRef.markForCheck())}get disabled(){return this._disabled}set disabled(t){this._disabled=qt(t)}ngOnDestroy(){this.opened.complete(),this.closed.complete(),this.destroyed.emit(),this.destroyed.complete(),this._removeUniqueSelectionListener(),this._openCloseAllSubscription.unsubscribe()}toggle(){this.disabled||(this.expanded=!this.expanded)}close(){this.disabled||(this.expanded=!1)}open(){this.disabled||(this.expanded=!0)}_subscribeToOpenCloseAllActions(){return this.accordion._openCloseAllActions.subscribe(t=>{this.disabled||(this.expanded=t)})}}return n.\u0275fac=function(t){return new(t||n)(M(po,12),M(Dn),M(nk))},n.\u0275dir=Me({type:n,selectors:[["cdk-accordion-item"],["","cdkAccordionItem",""]],inputs:{expanded:"expanded",disabled:"disabled"},outputs:{closed:"closed",opened:"opened",destroyed:"destroyed",expandedChange:"expandedChange"},exportAs:["cdkAccordionItem"],features:[ql([{provide:po,useValue:void 0}])]}),n})(),JH=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({}),n})();const QH=["body"];function zH(n,e){}const bH=[[["mat-expansion-panel-header"]],"*",[["mat-action-row"]]],uH=["mat-expansion-panel-header","*","mat-action-row"];function GH(n,e){1&n&&Wt(0,"span",2),2&n&&Ze("@indicatorRotate",Ft()._getExpandedState())}const DH=[[["mat-panel-title"]],[["mat-panel-description"]],"*"],xH=["mat-panel-title","mat-panel-description","*"],ko=new E("MAT_ACCORDION"),lk="225ms cubic-bezier(0.4,0.0,0.2,1)",Vk={indicatorRotate:SR("indicatorRotate",[Ql("collapsed, void",it({transform:"rotate(0deg)"})),Ql("expanded",it({transform:"rotate(180deg)"})),Ed("expanded <=> collapsed, void => collapsed",kd(lk))]),bodyExpansion:SR("bodyExpansion",[Ql("collapsed, void",it({height:"0px",visibility:"hidden"})),Ql("expanded",it({height:"*",visibility:"visible"})),Ed("expanded <=> collapsed, void => collapsed",kd(lk))])};let XH=(()=>{class n{constructor(t){this._template=t}}return n.\u0275fac=function(t){return new(t||n)(M(on))},n.\u0275dir=Me({type:n,selectors:[["ng-template","matExpansionPanelContent",""]]}),n})(),yH=0;const dk=new E("MAT_EXPANSION_PANEL_DEFAULT_OPTIONS");let ak=(()=>{class n extends YH{constructor(t,l,V,d,a,U,N){super(t,l,V),this._viewContainerRef=d,this._animationMode=U,this._hideToggle=!1,this.afterExpand=new A,this.afterCollapse=new A,this._inputChanges=new u,this._headerId="mat-expansion-panel-header-"+yH++,this._bodyAnimationDone=new u,this.accordion=t,this._document=a,this._bodyAnimationDone.pipe(jm((R,Z)=>R.fromState===Z.fromState&&R.toState===Z.toState)).subscribe(R=>{"void"!==R.fromState&&("expanded"===R.toState?this.afterExpand.emit():"collapsed"===R.toState&&this.afterCollapse.emit())}),N&&(this.hideToggle=N.hideToggle)}get hideToggle(){return this._hideToggle||this.accordion&&this.accordion.hideToggle}set hideToggle(t){this._hideToggle=qt(t)}get togglePosition(){return this._togglePosition||this.accordion&&this.accordion.togglePosition}set togglePosition(t){this._togglePosition=t}_hasSpacing(){return!!this.accordion&&this.expanded&&"default"===this.accordion.displayMode}_getExpandedState(){return this.expanded?"expanded":"collapsed"}toggle(){this.expanded=!this.expanded}close(){this.expanded=!1}open(){this.expanded=!0}ngAfterContentInit(){this._lazyContent&&this.opened.pipe(dV(null),_e(()=>this.expanded&&!this._portal),Wn(1)).subscribe(()=>{this._portal=new co(this._lazyContent._template,this._viewContainerRef)})}ngOnChanges(t){this._inputChanges.next(t)}ngOnDestroy(){super.ngOnDestroy(),this._bodyAnimationDone.complete(),this._inputChanges.complete()}_containsFocus(){if(this._body){const t=this._document.activeElement,l=this._body.nativeElement;return t===l||l.contains(t)}return!1}}return n.\u0275fac=function(t){return new(t||n)(M(ko,12),M(Dn),M(nk),M(Mt),M(w),M(eV,8),M(dk,8))},n.\u0275cmp=Et({type:n,selectors:[["mat-expansion-panel"]],contentQueries:function(t,l,V){if(1&t&&Ml(V,XH,5),2&t){let d;Dt(d=xt())&&(l._lazyContent=d.first)}},viewQuery:function(t,l){if(1&t&&Nd(QH,5),2&t){let V;Dt(V=xt())&&(l._body=V.first)}},hostAttrs:[1,"mat-expansion-panel"],hostVars:6,hostBindings:function(t,l){2&t&&Zn("mat-expanded",l.expanded)("_mat-animation-noopable","NoopAnimations"===l._animationMode)("mat-expansion-panel-spacing",l._hasSpacing())},inputs:{disabled:"disabled",expanded:"expanded",hideToggle:"hideToggle",togglePosition:"togglePosition"},outputs:{opened:"opened",closed:"closed",expandedChange:"expandedChange",afterExpand:"afterExpand",afterCollapse:"afterCollapse"},exportAs:["matExpansionPanel"],features:[ql([{provide:ko,useValue:void 0}]),Pn,kn],ngContentSelectors:uH,decls:7,vars:4,consts:[["role","region",1,"mat-expansion-panel-content",3,"id"],["body",""],[1,"mat-expansion-panel-body"],[3,"cdkPortalOutlet"]],template:function(t,l){1&t&&($U(bH),Wl(0),re(1,"div",0,1),Rn("@bodyExpansion.done",function(d){return l._bodyAnimationDone.next(d)}),re(3,"div",2),Wl(4,1),Rt(5,zH,0,0,"ng-template",3),ce(),Wl(6,2),ce()),2&t&&(q(1),Ze("@bodyExpansion",l._getExpandedState())("id",l.id),Ct("aria-labelledby",l._headerId),q(4),Ze("cdkPortalOutlet",l._portal))},dependencies:[oo],styles:[".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base,.mat-action-row button.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base,[dir=rtl] .mat-action-row button.mat-mdc-button-base{margin-left:0;margin-right:8px}\n"],encapsulation:2,data:{animation:[Vk.bodyExpansion]},changeDetection:0}),n})();class jH{}const HH=Hj(jH);let Uk=(()=>{class n extends HH{constructor(t,l,V,d,a,U,N){super(),this.panel=t,this._element=l,this._focusMonitor=V,this._changeDetectorRef=d,this._animationMode=U,this._parentChangeSubscription=Fe.EMPTY;const R=t.accordion?t.accordion._stateChanges.pipe(_e(Z=>!(!Z.hideToggle&&!Z.togglePosition))):pn;this.tabIndex=parseInt(N||"")||0,this._parentChangeSubscription=pV(t.opened,t.closed,R,t._inputChanges.pipe(_e(Z=>!!(Z.hideToggle||Z.disabled||Z.togglePosition)))).subscribe(()=>this._changeDetectorRef.markForCheck()),t.closed.pipe(_e(()=>t._containsFocus())).subscribe(()=>V.focusVia(l,"program")),a&&(this.expandedHeight=a.expandedHeight,this.collapsedHeight=a.collapsedHeight)}get disabled(){return this.panel.disabled}_toggle(){this.disabled||this.panel.toggle()}_isExpanded(){return this.panel.expanded}_getExpandedState(){return this.panel._getExpandedState()}_getPanelId(){return this.panel.id}_getTogglePosition(){return this.panel.togglePosition}_showToggle(){return!this.panel.hideToggle&&!this.panel.disabled}_getHeaderHeight(){const t=this._isExpanded();return t&&this.expandedHeight?this.expandedHeight:!t&&this.collapsedHeight?this.collapsedHeight:null}_keydown(t){switch(t.keyCode){case 32:case 13:xm(t)||(t.preventDefault(),this._toggle());break;default:return void(this.panel.accordion&&this.panel.accordion._handleHeaderKeydown(t))}}focus(t,l){t?this._focusMonitor.focusVia(this._element,t,l):this._element.nativeElement.focus(l)}ngAfterViewInit(){this._focusMonitor.monitor(this._element).subscribe(t=>{t&&this.panel.accordion&&this.panel.accordion._handleHeaderFocus(this)})}ngOnDestroy(){this._parentChangeSubscription.unsubscribe(),this._focusMonitor.stopMonitoring(this._element)}}return n.\u0275fac=function(t){return new(t||n)(M(ak,1),M(we),M(wm),M(Dn),M(dk,8),M(eV,8),DV("tabindex"))},n.\u0275cmp=Et({type:n,selectors:[["mat-expansion-panel-header"]],hostAttrs:["role","button",1,"mat-expansion-panel-header","mat-focus-indicator"],hostVars:15,hostBindings:function(t,l){1&t&&Rn("click",function(){return l._toggle()})("keydown",function(d){return l._keydown(d)}),2&t&&(Ct("id",l.panel._headerId)("tabindex",l.tabIndex)("aria-controls",l._getPanelId())("aria-expanded",l._isExpanded())("aria-disabled",l.panel.disabled),Ar("height",l._getHeaderHeight()),Zn("mat-expanded",l._isExpanded())("mat-expansion-toggle-indicator-after","after"===l._getTogglePosition())("mat-expansion-toggle-indicator-before","before"===l._getTogglePosition())("_mat-animation-noopable","NoopAnimations"===l._animationMode))},inputs:{tabIndex:"tabIndex",expandedHeight:"expandedHeight",collapsedHeight:"collapsedHeight"},features:[Pn],ngContentSelectors:xH,decls:5,vars:1,consts:[[1,"mat-content"],["class","mat-expansion-indicator",4,"ngIf"],[1,"mat-expansion-indicator"]],template:function(t,l){1&t&&($U(DH),re(0,"span",0),Wl(1),Wl(2,1),Wl(3,2),ce(),Rt(4,GH,1,1,"span",1)),2&t&&(q(4),Ze("ngIf",l._showToggle()))},dependencies:[ma],styles:['.mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:"";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-keyboard-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel .mat-expansion-panel-header.cdk-program-focused:not([aria-disabled=true])::before,.cdk-high-contrast-active .mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:hover:not([aria-disabled=true])::before{top:0;left:0;right:0;bottom:0;position:absolute;box-sizing:border-box;pointer-events:none;border:3px solid;border-radius:4px;content:""}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\n'],encapsulation:2,data:{animation:[Vk.indicatorRotate]},changeDetection:0}),n})(),BH=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275dir=Me({type:n,selectors:[["mat-panel-title"]],hostAttrs:[1,"mat-expansion-panel-header-title"]}),n})(),OH=(()=>{class n extends EH{constructor(){super(...arguments),this._ownHeaders=new $l,this._hideToggle=!1,this.displayMode="default",this.togglePosition="after"}get hideToggle(){return this._hideToggle}set hideToggle(t){this._hideToggle=qt(t)}ngAfterContentInit(){this._headers.changes.pipe(dV(this._headers)).subscribe(t=>{this._ownHeaders.reset(t.filter(l=>l.panel.accordion===this)),this._ownHeaders.notifyOnChanges()}),this._keyManager=new S5(this._ownHeaders).withWrap().withHomeAndEnd()}_handleHeaderKeydown(t){this._keyManager.onKeydown(t)}_handleHeaderFocus(t){this._keyManager.updateActiveItem(t)}ngOnDestroy(){super.ngOnDestroy(),this._ownHeaders.destroy()}}return n.\u0275fac=function(){let e;return function(l){return(e||(e=function rT(n){return Rl(()=>{const e=n.prototype.constructor,t=e[Bn]||uZ(e),l=Object.prototype;let V=Object.getPrototypeOf(n.prototype).constructor;for(;V&&V!==l;){const d=V[Bn]||uZ(V);if(d&&d!==t)return d;V=Object.getPrototypeOf(V)}return d=>new d})}(n)))(l||n)}}(),n.\u0275dir=Me({type:n,selectors:[["mat-accordion"]],contentQueries:function(t,l,V){if(1&t&&Ml(V,Uk,5),2&t){let d;Dt(d=xt())&&(l._headers=d)}},hostAttrs:[1,"mat-accordion"],hostVars:2,hostBindings:function(t,l){2&t&&Zn("mat-accordion-multi",l.multi)},inputs:{multi:"multi",hideToggle:"hideToggle",displayMode:"displayMode",togglePosition:"togglePosition"},exportAs:["matAccordion"],features:[ql([{provide:ko,useExisting:n}]),Pn]}),n})(),Nk=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[VV,ct,JH,so]]}),n})();function vH(n,e){if(1&n&&(re(0,"div",9),Wt(1,"img",10),re(2,"p",11),un(3),ce()()),2&n){const t=Ft(2);q(1),Ze("src","data:image/svg+xml;base64, "+t.ticket.assigne_picture,ta),q(2),Fl(t.ticket.assigneeViewName)}}function wH(n,e){if(1&n&&(re(0,"div",9),Wt(1,"img",10),re(2,"p",12),un(3),ce()()),2&n){const t=Ft(2);q(1),Ze("src","data:image/svg+xml;base64, "+t.ticket.assigne_picture,ta),q(2),Fl(t.ticket.assigneeViewName)}}function gH(n,e){if(1&n){const t=Vd();re(0,"button",13),Rn("click",function(){Ol(t);const V=Ft(2);return vl(V.assign(V.ticket))}),un(1,"Assign to me"),ce()}}const IH=function(n,e){return{"increase-height":n,"reduce-height":e}},fH=function(n){return{"overflow-hidden":n}},LH=function(n){return{"text-truncate":n}};function CH(n,e){if(1&n){const t=Vd();Kl(0),re(1,"mat-accordion",2)(2,"mat-expansion-panel",3),Rn("opened",function(){return Ol(t),vl(Ft().opened())})("closed",function(){return Ol(t),vl(Ft().closed())}),re(3,"mat-expansion-panel-header",4)(4,"mat-panel-title",4)(5,"p",5),un(6),ce(),Rt(7,vH,4,2,"div",6),ce()(),re(8,"p",7),un(9),ce(),Rt(10,wH,4,2,"div",6),Rt(11,gH,2,0,"button",8),ce()(),Pl()}if(2&n){const t=Ft();q(3),Ze("ngClass",tM(8,IH,"closed"==t.state,"open"==t.state)),q(1),Ze("ngClass",UN(11,fH,"closed"==t.state)),q(1),Ze("ngClass",UN(13,LH,"closed"==t.state)),q(1),Fl(t.ticket.subject),q(1),Ze("ngIf","closed"==t.state),q(2),Fl(t.ticket.descriptionRawText),q(1),Ze("ngIf","open"==t.state),q(1),Ze("ngIf",0==t.ticket.r_assignee_userId&&t.ticket.canAssignToSelf)}}let KH=(()=>{class n{constructor(){this.none=oV_carl,this.assignEvent=new A,this.state="closed"}ngOnInit(){if(0==this.ticket.r_assignee_userId)this.ticket.assigne_picture=oV_none;else{let t=this.users.find(l=>l.id==this.ticket.r_assignee_userId);if(t)switch(t.emailAddress){case"admin.adam@liferay.com":this.ticket.assigne_picture="";break;case"customer.carl@liferay.com":this.ticket.assigne_picture=oV_carl;break;case"support.sam@liferay.com":this.ticket.assigne_picture="";break;default:this.ticket.assigne_picture=oV_none}else this.ticket.assigne_picture=oV_none}}assign(t){this.assignEvent.emit(t)}opened(){this.state="open"}closed(){this.state="closed"}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275cmp=Et({type:n,selectors:[["app-ticket-preview"]],inputs:{ticket:"ticket",users:"users"},outputs:{assignEvent:"assignEvent"},decls:2,vars:1,consts:[[1,"ticket-accordion"],[4,"ngIf"],[1,"bg-neutral-1"],[1,"border","border-neutral-2",3,"opened","closed"],[3,"ngClass"],[1,"text-neutral-10",3,"ngClass"],["class","d-flex justify-content-start mt-2",4,"ngIf"],[1,"text-paragraph-s","text-neutral-8"],["class","mt-2 w-100 text-neutral-8","mat-stroked-button","",3,"click",4,"ngIf"],[1,"d-flex","justify-content-start","mt-2"],[2,"width","24px","border-radius","999px",3,"src"],[1,"ml-2","text-paragraph-xs"],[1,"ml-2","mb-0","text-paragraph-xs"],["mat-stroked-button","",1,"mt-2","w-100","text-neutral-8",3,"click"]],template:function(t,l){1&t&&(re(0,"div",0),Rt(1,CH,12,15,"ng-container",1),ce()),2&t&&(q(1),Ze("ngIf",l.ticket))},dependencies:[J1,ma,Lp,OH,ak,Uk,BH],styles:["mat-expansion-panel-header[_ngcontent-%COMP%]{padding:10px}mat-expansion-panel-header[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0}mat-panel-title[_ngcontent-%COMP%]{flex-direction:column}.increase-height[_ngcontent-%COMP%]{height:90px}.reduce-height[_ngcontent-%COMP%]{height:unset}.mat-expansion-panel[_ngcontent-%COMP%]:not(.mat-expanded)   .mat-expansion-panel-header[_ngcontent-%COMP%]:hover:not([aria-disabled=true]){background:var(--color-brand-primary-lighten-6)}.mat-expansion-panel[_ngcontent-%COMP%]:not([class*=mat-elevation-z]){box-shadow:none}.mat-expansion-panel-header[_ngcontent-%COMP%]{align-items:start}"]}),n})();function PH(n,e){if(1&n){const t=Vd();re(0,"div",9)(1,"app-ticket-preview",10),Rn("assignEvent",function(){const d=Ol(t).$implicit;return vl(Ft(4).assign(d))}),ce()()}if(2&n){const t=e.$implicit,l=Ft(4);Ct("data-ticket-id",t.id),q(1),Ze("users",l.users)("ticket",t)}}function _H(n,e){if(1&n&&(Kl(0),Rt(1,PH,2,3,"div",8),Pl()),2&n){const t=Ft().$implicit;q(1),Ze("ngForOf",t.tickets)}}function qH(n,e){1&n&&(Kl(0),re(1,"div",11),un(2," No tickets are available. "),ce(),Pl())}const AH=function(n){return[n]};function $H(n,e){if(1&n){const t=Vd();re(0,"div",4)(1,"h6",5),un(2),ce(),re(3,"div",6,7),Rn("cdkDropListDropped",function(V){return Ol(t),vl(Ft(2).drop(V))}),Rt(5,_H,2,1,"ng-container",1),Rt(6,qH,3,0,"ng-container",1),ce()()}if(2&n){const t=e.$implicit;q(2),tN("",t.name," Tickets"),q(1),Ze("id",t.listName)("cdkDropListData",t.tickets)("cdkDropListConnectedTo",UN(7,AH,t.connectedLists)),Ct("data-container-id",t.key),q(2),Ze("ngIf",t.tickets.length>0),q(1),Ze("ngIf",0==t.tickets.length)}}function eB(n,e){if(1&n&&(Kl(0),re(1,"div",2),Rt(2,$H,7,9,"div",3),ce(),Pl()),2&n){const t=e.ngIf;q(2),Ze("ngForOf",t)}}function tB(n,e){1&n&&Wt(0,"app-loading")}let nB=(()=>{class n{constructor(t){this.sharedService=t,this.lists=new $l,this.statusListERC="STATUS",this.isLoading=!0,this.tickets=[],this.statusList=[],this.users=[],this.subscriptions=[],this.isLoading$=new yt(!0),this.statusList$=this.sharedService.getListTypeDefinitionByExternalReferenceCode(this.statusListERC).pipe(D(l=>l.listTypeEntries),D(l=>l.map(V=>({...V,listName:V.key+"List"})))),this.ticketsList$=this.sharedService.getTickets().pipe(D(l=>l.items)),this.vm$=this.isLoading$.pipe(Ye(()=>this.isLoading=!0),Xt(()=>BN([0==this.statusList.length?this.statusList$:b(this.statusList),this.ticketsList$,0==this.users.length?this.sharedService.getUsers():b(this.users)]).pipe(Ye(([l,V,d])=>{this.statusList=l,this.tickets=V,this.users=d,this.isLoading=!1}),D(([l,V,d])=>l.map(a=>({...a,listName:a.key+"List",connectedLists:this.lists.filter(U=>U.id!=a.key+"List"),tickets:V.filter(U=>U.wFStatus.key==a.key).map(U=>{const N=d.find(r=>r.id==U.r_assignee_userId);U.assigneeViewName=N?N.givenName+" "+N.familyName:"Not Assigned";const R=window.Liferay.ThemeDisplay.getUserId(),Z=d.find(r=>r.id==R);return Z&&(U.canAssignToSelf=Z.roleBriefs.filter(r=>"Administrator"==r.name||"Ticket_solvers"==r.name).length>0),U})}))))))}ngAfterViewInit(){this.subscriptions.push(this.lists.changes.subscribe(t=>{this.lists.forEach(l=>{l.connectedTo=this.lists.filter(V=>V.id!=l.id)})}))}ngOnDestroy(){this.subscriptions.forEach(t=>{t.unsubscribe()})}drop(t){if(t.container.element.nativeElement.id==t.previousContainer.element.nativeElement.id)return;this.isLoading$.next(!1);const l=t.item.element.nativeElement.dataset.ticketId,V=t.container.element.nativeElement.dataset.containerId,d=this.tickets.find(a=>a.id==l);d.wFStatus.key=V,t.previousContainer===t.container?dp(t.container.data,t.previousIndex,t.currentIndex):function f5(n,e,t,l){const V=fa(t,n.length-1),d=fa(l,e.length);n.length&&e.splice(d,0,n.splice(V,1)[0])}(t.previousContainer.data,t.container.data,t.previousIndex,t.currentIndex),delete d.actions,delete d.creator,delete d.status,d.attachment&&(d.attachment=d.attachment.id),"0"==d.attachment&&delete d.attachment,this.sharedService.updateTicket(d).subscribe({next:a=>{this.sharedService.showToast("",dl.SUCCESS),this.isLoading$.next(!0)},error:a=>{this.sharedService.showToast(a.error.title,dl.ERROR),this.isLoading$.next(!0)}})}assign(t){this.isLoading$.next(!1),delete t.actions,delete t.creator,delete t.status,t.attachment&&(t.attachment=t.attachment.id),"0"==t.attachment&&delete t.attachment,this.sharedService.assignTicketToMe(t.id).subscribe({next:l=>{this.sharedService.showToast("",dl.SUCCESS),this.isLoading$.next(!0)},error:l=>{this.sharedService.showToast(l.error.title,dl.ERROR),this.isLoading$.next(!0)}})}}return n.\u0275fac=function(t){return new(t||n)(M(oH))},n.\u0275cmp=Et({type:n,selectors:[["app-tickets"]],viewQuery:function(t,l){if(1&t&&Nd(op,5),2&t){let V;Dt(V=xt())&&(l.lists=V)}},decls:4,vars:4,consts:[[1,"container","custom-container"],[4,"ngIf"],[1,"d-flex","flex-wrap","justify-content-between"],["class","custom-col mt-1 py-3 bg-neutral-1 rounded",4,"ngFor","ngForOf"],[1,"custom-col","mt-1","py-3","bg-neutral-1","rounded"],[1,"ml-3","mb-4","text-neutral-10"],["cdkDropList","",1,"example-list","px-3",3,"id","cdkDropListData","cdkDropListConnectedTo","cdkDropListDropped"],["[{{status.listName}}]","cdkDropList"],["class","mb-3","cdkDrag","",4,"ngFor","ngForOf"],["cdkDrag","",1,"mb-3"],[3,"users","ticket","assignEvent"],[1,""]],template:function(t,l){1&t&&(re(0,"div",0),Rt(1,eB,3,1,"ng-container",1),function UM(n,e){const t=ee();let l;const V=n+22;t.firstCreatePass?(l=function jz(n,e){if(e)for(let t=e.length-1;t>=0;t--){const l=e[t];if(n===l.name)return l}}(e,t.pipeRegistry),t.data[V]=l,l.onDestroy&&(t.destroyHooks||(t.destroyHooks=[])).push(V,l.onDestroy)):l=t.data[V];const d=l.factory||(l.factory=Bl(l.type)),a=gt(M);try{const U=mU(!1),N=d();return mU(U),function b3(n,e,t,l){t>=n.data.length&&(n.data[t]=null,n.blueprint[t]=null),e[t]=l}(t,m(),V,N),N}finally{gt(a)}}(2,"async"),Rt(3,tB,1,0,"app-loading",1),ce()),2&t&&(q(1),Ze("ngIf",function NM(n,e,t){const l=n+22,V=m(),d=function QV(n,e){return n[e]}(V,l);return function sa(n,e){return n[1].data[e].pure}(V,l)?nM(V,at(),e,d.transform,t,d):d.transform(t)}(2,2,l.vm$)),q(2),Ze("ngIf",l.isLoading))},dependencies:[b1,ma,op,ej,pH,KH,X1],styles:[".custom-col[_ngcontent-%COMP%]{width:280px;min-height:70vh}mat-panel-title[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{margin:0!important}"]}),n})(),lB=(()=>{class n{constructor(t){this.elm=t,this.title="remoteApps",this.listId="",this.listId=this.elm.nativeElement.getAttribute("listId")}}return n.\u0275fac=function(t){return new(t||n)(M(we))},n.\u0275cmp=Et({type:n,selectors:[["app-root"]],decls:1,vars:0,template:function(t,l){1&t&&Wt(0,"app-tickets")},dependencies:[nB]}),n})();function Rk(n){return new k(3e3,!1)}function HB(){return typeof window<"u"&&typeof window.document<"u"}function Eo(){return typeof process<"u"&&"[object process]"==={}.toString.call(process)}function zl(n){switch(n.length){case 0:return new Ka;case 1:return n[0];default:return new _p(n)}}function Zk(n,e,t,l,V=new Map,d=new Map){const a=[],U=[];let N=-1,R=null;if(l.forEach(Z=>{const r=Z.get("offset"),c=r==N,i=c&&R||new Map;Z.forEach((o,s)=>{let T=s,W=o;if("offset"!==s)switch(T=e.normalizePropertyName(T,a),W){case"!":W=V.get(s);break;case Vl:W=d.get(s);break;default:W=e.normalizeStyleValue(s,T,W,a)}i.set(T,W)}),c||U.push(i),R=i,N=r}),a.length)throw function YB(n){return new k(3502,!1)}();return U}function So(n,e,t,l){switch(e){case"start":n.onStart(()=>l(t&&Yo(t,"start",n)));break;case"done":n.onDone(()=>l(t&&Yo(t,"done",n)));break;case"destroy":n.onDestroy(()=>l(t&&Yo(t,"destroy",n)))}}function Yo(n,e,t){const d=Jo(n.element,n.triggerName,n.fromState,n.toState,e||n.phaseName,t.totalTime??n.totalTime,!!t.disabled),a=n._data;return null!=a&&(d._data=a),d}function Jo(n,e,t,l,V="",d=0,a){return{element:n,triggerName:e,fromState:t,toState:l,phaseName:V,totalTime:d,disabled:!!a}}function jt(n,e,t){let l=n.get(e);return l||n.set(e,l=t),l}function rk(n){const e=n.indexOf(":");return[n.substring(1,e),n.slice(e+1)]}let Qo=(n,e)=>!1,ck=(n,e,t)=>[],ik=null;function zo(n){const e=n.parentNode||n.host;return e===ik?null:e}(Eo()||typeof Element<"u")&&(HB()?(ik=(()=>document.documentElement)(),Qo=(n,e)=>{for(;e;){if(e===n)return!0;e=zo(e)}return!1}):Qo=(n,e)=>n.contains(e),ck=(n,e,t)=>{if(t)return Array.from(n.querySelectorAll(e));const l=n.querySelector(e);return l?[l]:[]});let sV=null,ok=!1;const sk=Qo,Tk=ck;let hk=(()=>{class n{validateStyleProperty(t){return function OB(n){sV||(sV=function vB(){return typeof document<"u"?document.body:null}()||{},ok=!!sV.style&&"WebkitAppearance"in sV.style);let e=!0;return sV.style&&!function BB(n){return"ebkit"==n.substring(1,6)}(n)&&(e=n in sV.style,!e&&ok&&(e="Webkit"+n.charAt(0).toUpperCase()+n.slice(1)in sV.style)),e}(t)}matchesElement(t,l){return!1}containsElement(t,l){return sk(t,l)}getParentElement(t){return zo(t)}query(t,l,V){return Tk(t,l,V)}computeStyle(t,l,V){return V||""}animate(t,l,V,d,a,U=[],N){return new Ka(V,d)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),bo=(()=>{class n{}return n.NOOP=new hk,n})();const uo="ng-enter",JR="ng-leave",QR="ng-trigger",zR=".ng-trigger",Fk="ng-animating",Go=".ng-animating";function al(n){if("number"==typeof n)return n;const e=n.match(/^(-?[\.\d]+)(m?s)/);return!e||e.length<2?0:Do(parseFloat(e[1]),e[2])}function Do(n,e){return"s"===e?1e3*n:n}function bR(n,e,t){return n.hasOwnProperty("duration")?n:function IB(n,e,t){let V,d=0,a="";if("string"==typeof n){const U=n.match(/^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i);if(null===U)return e.push(Rk()),{duration:0,delay:0,easing:""};V=Do(parseFloat(U[1]),U[2]);const N=U[3];null!=N&&(d=Do(parseFloat(N),U[4]));const R=U[5];R&&(a=R)}else V=n;if(!t){let U=!1,N=e.length;V<0&&(e.push(function VB(){return new k(3100,!1)}()),U=!0),d<0&&(e.push(function dB(){return new k(3101,!1)}()),U=!0),U&&e.splice(N,0,Rk())}return{duration:V,delay:d,easing:a}}(n,e,t)}function Pa(n,e={}){return Object.keys(n).forEach(t=>{e[t]=n[t]}),e}function Mk(n){const e=new Map;return Object.keys(n).forEach(t=>{e.set(t,n[t])}),e}function bl(n,e=new Map,t){if(t)for(let[l,V]of t)e.set(l,V);for(let[l,V]of n)e.set(l,V);return e}function pk(n,e,t){return t?e+":"+t+";":""}function kk(n){let e="";for(let t=0;t<n.style.length;t++){const l=n.style.item(t);e+=pk(0,l,n.style.getPropertyValue(l))}for(const t in n.style)n.style.hasOwnProperty(t)&&!t.startsWith("_")&&(e+=pk(0,KB(t),n.style[t]));n.setAttribute("style",e)}function Xn(n,e,t){n.style&&(e.forEach((l,V)=>{const d=Xo(V);t&&!t.has(V)&&t.set(V,n.style[d]),n.style[d]=l}),Eo()&&kk(n))}function TV(n,e){n.style&&(e.forEach((t,l)=>{const V=Xo(l);n.style[V]=""}),Eo()&&kk(n))}function _a(n){return Array.isArray(n)?1==n.length?n[0]:Kp(n):n}const xo=new RegExp("{{\\s*(.+?)\\s*}}","g");function Ek(n){let e=[];if("string"==typeof n){let t;for(;t=xo.exec(n);)e.push(t[1]);xo.lastIndex=0}return e}function qa(n,e,t){const l=n.toString(),V=l.replace(xo,(d,a)=>{let U=e[a];return null==U&&(t.push(function UB(n){return new k(3003,!1)}()),U=""),U.toString()});return V==l?n:V}function uR(n){const e=[];let t=n.next();for(;!t.done;)e.push(t.value),t=n.next();return e}const CB=/-+([a-z0-9])/g;function Xo(n){return n.replace(CB,(...e)=>e[1].toUpperCase())}function KB(n){return n.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Ht(n,e,t){switch(e.type){case 7:return n.visitTrigger(e,t);case 0:return n.visitState(e,t);case 1:return n.visitTransition(e,t);case 2:return n.visitSequence(e,t);case 3:return n.visitGroup(e,t);case 4:return n.visitAnimate(e,t);case 5:return n.visitKeyframes(e,t);case 6:return n.visitStyle(e,t);case 8:return n.visitReference(e,t);case 9:return n.visitAnimateChild(e,t);case 10:return n.visitAnimateRef(e,t);case 11:return n.visitQuery(e,t);case 12:return n.visitStagger(e,t);default:throw function NB(n){return new k(3004,!1)}()}}function Sk(n,e){return window.getComputedStyle(n)[e]}function eO(n,e){const t=[];return"string"==typeof n?n.split(/\s*,\s*/).forEach(l=>function tO(n,e,t){if(":"==n[0]){const N=function nO(n,e){switch(n){case":enter":return"void => *";case":leave":return"* => void";case":increment":return(t,l)=>parseFloat(l)>parseFloat(t);case":decrement":return(t,l)=>parseFloat(l)<parseFloat(t);default:return e.push(function pB(n){return new k(3016,!1)}()),"* => *"}}(n,t);if("function"==typeof N)return void e.push(N);n=N}const l=n.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);if(null==l||l.length<4)return t.push(function mB(n){return new k(3015,!1)}()),e;const V=l[1],d=l[2],a=l[3];e.push(Yk(V,a));"<"==d[0]&&!("*"==V&&"*"==a)&&e.push(Yk(a,V))}(l,t,e)):t.push(n),t}const XR=new Set(["true","1"]),yR=new Set(["false","0"]);function Yk(n,e){const t=XR.has(n)||yR.has(n),l=XR.has(e)||yR.has(e);return(V,d)=>{let a="*"==n||n==V,U="*"==e||e==d;return!a&&t&&"boolean"==typeof V&&(a=V?XR.has(n):yR.has(n)),!U&&l&&"boolean"==typeof d&&(U=d?XR.has(e):yR.has(e)),a&&U}}const lO=new RegExp("s*:selfs*,?","g");function yo(n,e,t,l){return new VO(n).build(e,t,l)}class VO{constructor(e){this._driver=e}build(e,t,l){const V=new UO(t);return this._resetContextStyleTimingState(V),Ht(this,_a(e),V)}_resetContextStyleTimingState(e){e.currentQuerySelector="",e.collectedStyles=new Map,e.collectedStyles.set("",new Map),e.currentTime=0}visitTrigger(e,t){let l=t.queryCount=0,V=t.depCount=0;const d=[],a=[];return"@"==e.name.charAt(0)&&t.errors.push(function ZB(){return new k(3006,!1)}()),e.definitions.forEach(U=>{if(this._resetContextStyleTimingState(t),0==U.type){const N=U,R=N.name;R.toString().split(/\s*,\s*/).forEach(Z=>{N.name=Z,d.push(this.visitState(N,t))}),N.name=R}else if(1==U.type){const N=this.visitTransition(U,t);l+=N.queryCount,V+=N.depCount,a.push(N)}else t.errors.push(function rB(){return new k(3007,!1)}())}),{type:7,name:e.name,states:d,transitions:a,queryCount:l,depCount:V,options:null}}visitState(e,t){const l=this.visitStyle(e.styles,t),V=e.options&&e.options.params||null;if(l.containsDynamicStyles){const d=new Set,a=V||{};l.styles.forEach(U=>{U instanceof Map&&U.forEach(N=>{Ek(N).forEach(R=>{a.hasOwnProperty(R)||d.add(R)})})}),d.size&&(uR(d.values()),t.errors.push(function cB(n,e){return new k(3008,!1)}()))}return{type:0,name:e.name,style:l,options:V?{params:V}:null}}visitTransition(e,t){t.queryCount=0,t.depCount=0;const l=Ht(this,_a(e.animation),t);return{type:1,matchers:eO(e.expr,t.errors),animation:l,queryCount:t.queryCount,depCount:t.depCount,options:hV(e.options)}}visitSequence(e,t){return{type:2,steps:e.steps.map(l=>Ht(this,l,t)),options:hV(e.options)}}visitGroup(e,t){const l=t.currentTime;let V=0;const d=e.steps.map(a=>{t.currentTime=l;const U=Ht(this,a,t);return V=Math.max(V,t.currentTime),U});return t.currentTime=V,{type:3,steps:d,options:hV(e.options)}}visitAnimate(e,t){const l=function RO(n,e){if(n.hasOwnProperty("duration"))return n;if("number"==typeof n)return jo(bR(n,e).duration,0,"");const t=n;if(t.split(/\s+/).some(d=>"{"==d.charAt(0)&&"{"==d.charAt(1))){const d=jo(0,0,"");return d.dynamic=!0,d.strValue=t,d}const V=bR(t,e);return jo(V.duration,V.delay,V.easing)}(e.timings,t.errors);t.currentAnimateTimings=l;let V,d=e.styles?e.styles:it({});if(5==d.type)V=this.visitKeyframes(d,t);else{let a=e.styles,U=!1;if(!a){U=!0;const R={};l.easing&&(R.easing=l.easing),a=it(R)}t.currentTime+=l.duration+l.delay;const N=this.visitStyle(a,t);N.isEmptyStep=U,V=N}return t.currentAnimateTimings=null,{type:4,timings:l,style:V,options:null}}visitStyle(e,t){const l=this._makeStyleAst(e,t);return this._validateStyleAst(l,t),l}_makeStyleAst(e,t){const l=[],V=Array.isArray(e.styles)?e.styles:[e.styles];for(let U of V)"string"==typeof U?U===Vl?l.push(U):t.errors.push(new k(3002,!1)):l.push(Mk(U));let d=!1,a=null;return l.forEach(U=>{if(U instanceof Map&&(U.has("easing")&&(a=U.get("easing"),U.delete("easing")),!d))for(let N of U.values())if(N.toString().indexOf("{{")>=0){d=!0;break}}),{type:6,styles:l,easing:a,offset:e.offset,containsDynamicStyles:d,options:null}}_validateStyleAst(e,t){const l=t.currentAnimateTimings;let V=t.currentTime,d=t.currentTime;l&&d>0&&(d-=l.duration+l.delay),e.styles.forEach(a=>{"string"!=typeof a&&a.forEach((U,N)=>{const R=t.collectedStyles.get(t.currentQuerySelector),Z=R.get(N);let r=!0;Z&&(d!=V&&d>=Z.startTime&&V<=Z.endTime&&(t.errors.push(function oB(n,e,t,l,V){return new k(3010,!1)}()),r=!1),d=Z.startTime),r&&R.set(N,{startTime:d,endTime:V}),t.options&&function LB(n,e,t){const l=e.params||{},V=Ek(n);V.length&&V.forEach(d=>{l.hasOwnProperty(d)||t.push(function aB(n){return new k(3001,!1)}())})}(U,t.options,t.errors)})})}visitKeyframes(e,t){const l={type:5,styles:[],options:null};if(!t.currentAnimateTimings)return t.errors.push(function sB(){return new k(3011,!1)}()),l;let d=0;const a=[];let U=!1,N=!1,R=0;const Z=e.steps.map(W=>{const p=this._makeStyleAst(W,t);let F=null!=p.offset?p.offset:function NO(n){if("string"==typeof n)return null;let e=null;if(Array.isArray(n))n.forEach(t=>{if(t instanceof Map&&t.has("offset")){const l=t;e=parseFloat(l.get("offset")),l.delete("offset")}});else if(n instanceof Map&&n.has("offset")){const t=n;e=parseFloat(t.get("offset")),t.delete("offset")}return e}(p.styles),Y=0;return null!=F&&(d++,Y=p.offset=F),N=N||Y<0||Y>1,U=U||Y<R,R=Y,a.push(Y),p});N&&t.errors.push(function TB(){return new k(3012,!1)}()),U&&t.errors.push(function hB(){return new k(3200,!1)}());const r=e.steps.length;let c=0;d>0&&d<r?t.errors.push(function WB(){return new k(3202,!1)}()):0==d&&(c=1/(r-1));const i=r-1,o=t.currentTime,s=t.currentAnimateTimings,T=s.duration;return Z.forEach((W,p)=>{const F=c>0?p==i?1:c*p:a[p],Y=F*T;t.currentTime=o+s.delay+Y,s.duration=Y,this._validateStyleAst(W,t),W.offset=F,l.styles.push(W)}),l}visitReference(e,t){return{type:8,animation:Ht(this,_a(e.animation),t),options:hV(e.options)}}visitAnimateChild(e,t){return t.depCount++,{type:9,options:hV(e.options)}}visitAnimateRef(e,t){return{type:10,animation:this.visitReference(e.animation,t),options:hV(e.options)}}visitQuery(e,t){const l=t.currentQuerySelector,V=e.options||{};t.queryCount++,t.currentQuery=e;const[d,a]=function dO(n){const e=!!n.split(/\s*,\s*/).find(t=>":self"==t);return e&&(n=n.replace(lO,"")),n=n.replace(/@\*/g,zR).replace(/@\w+/g,t=>zR+"-"+t.slice(1)).replace(/:animating/g,Go),[n,e]}(e.selector);t.currentQuerySelector=l.length?l+" "+d:d,jt(t.collectedStyles,t.currentQuerySelector,new Map);const U=Ht(this,_a(e.animation),t);return t.currentQuery=null,t.currentQuerySelector=l,{type:11,selector:d,limit:V.limit||0,optional:!!V.optional,includeSelf:a,animation:U,originalSelector:e.selector,options:hV(e.options)}}visitStagger(e,t){t.currentQuery||t.errors.push(function FB(){return new k(3013,!1)}());const l="full"===e.timings?{duration:0,delay:0,easing:"full"}:bR(e.timings,t.errors,!0);return{type:12,animation:Ht(this,_a(e.animation),t),timings:l,options:null}}}class UO{constructor(e){this.errors=e,this.queryCount=0,this.depCount=0,this.currentTransition=null,this.currentQuery=null,this.currentQuerySelector=null,this.currentAnimateTimings=null,this.currentTime=0,this.collectedStyles=new Map,this.options=null,this.unsupportedCSSPropertiesFound=new Set}}function hV(n){return n?(n=Pa(n)).params&&(n.params=function aO(n){return n?Pa(n):null}(n.params)):n={},n}function jo(n,e,t){return{duration:n,delay:e,easing:t}}function Ho(n,e,t,l,V,d,a=null,U=!1){return{type:1,element:n,keyframes:e,preStyleProps:t,postStyleProps:l,duration:V,delay:d,totalTime:V+d,easing:a,subTimeline:U}}class jR{constructor(){this._map=new Map}get(e){return this._map.get(e)||[]}append(e,t){let l=this._map.get(e);l||this._map.set(e,l=[]),l.push(...t)}has(e){return this._map.has(e)}clear(){this._map.clear()}}const cO=new RegExp(":enter","g"),oO=new RegExp(":leave","g");function Bo(n,e,t,l,V,d=new Map,a=new Map,U,N,R=[]){return(new sO).buildKeyframes(n,e,t,l,V,d,a,U,N,R)}class sO{buildKeyframes(e,t,l,V,d,a,U,N,R,Z=[]){R=R||new jR;const r=new Oo(e,t,R,V,d,Z,[]);r.options=N;const c=N.delay?al(N.delay):0;r.currentTimeline.delayNextStep(c),r.currentTimeline.setStyles([a],null,r.errors,N),Ht(this,l,r);const i=r.timelines.filter(o=>o.containsAnimation());if(i.length&&U.size){let o;for(let s=i.length-1;s>=0;s--){const T=i[s];if(T.element===t){o=T;break}}o&&!o.allowOnlyTimelineStyles()&&o.setStyles([U],null,r.errors,N)}return i.length?i.map(o=>o.buildKeyframes()):[Ho(t,[],[],[],0,c,"",!1)]}visitTrigger(e,t){}visitState(e,t){}visitTransition(e,t){}visitAnimateChild(e,t){const l=t.subInstructions.get(t.element);if(l){const V=t.createSubContext(e.options),d=t.currentTimeline.currentTime,a=this._visitSubInstructions(l,V,V.options);d!=a&&t.transformIntoNewTimeline(a)}t.previousNode=e}visitAnimateRef(e,t){const l=t.createSubContext(e.options);l.transformIntoNewTimeline(),this._applyAnimationRefDelays([e.options,e.animation.options],t,l),this.visitReference(e.animation,l),t.transformIntoNewTimeline(l.currentTimeline.currentTime),t.previousNode=e}_applyAnimationRefDelays(e,t,l){for(const V of e){const d=V?.delay;if(d){const a="number"==typeof d?d:al(qa(d,V?.params??{},t.errors));l.delayNextStep(a)}}}_visitSubInstructions(e,t,l){let d=t.currentTimeline.currentTime;const a=null!=l.duration?al(l.duration):null,U=null!=l.delay?al(l.delay):null;return 0!==a&&e.forEach(N=>{const R=t.appendInstructionToTimeline(N,a,U);d=Math.max(d,R.duration+R.delay)}),d}visitReference(e,t){t.updateOptions(e.options,!0),Ht(this,e.animation,t),t.previousNode=e}visitSequence(e,t){const l=t.subContextCount;let V=t;const d=e.options;if(d&&(d.params||d.delay)&&(V=t.createSubContext(d),V.transformIntoNewTimeline(),null!=d.delay)){6==V.previousNode.type&&(V.currentTimeline.snapshotCurrentStyles(),V.previousNode=HR);const a=al(d.delay);V.delayNextStep(a)}e.steps.length&&(e.steps.forEach(a=>Ht(this,a,V)),V.currentTimeline.applyStylesToKeyframe(),V.subContextCount>l&&V.transformIntoNewTimeline()),t.previousNode=e}visitGroup(e,t){const l=[];let V=t.currentTimeline.currentTime;const d=e.options&&e.options.delay?al(e.options.delay):0;e.steps.forEach(a=>{const U=t.createSubContext(e.options);d&&U.delayNextStep(d),Ht(this,a,U),V=Math.max(V,U.currentTimeline.currentTime),l.push(U.currentTimeline)}),l.forEach(a=>t.currentTimeline.mergeTimelineCollectedStyles(a)),t.transformIntoNewTimeline(V),t.previousNode=e}_visitTiming(e,t){if(e.dynamic){const l=e.strValue;return bR(t.params?qa(l,t.params,t.errors):l,t.errors)}return{duration:e.duration,delay:e.delay,easing:e.easing}}visitAnimate(e,t){const l=t.currentAnimateTimings=this._visitTiming(e.timings,t),V=t.currentTimeline;l.delay&&(t.incrementTime(l.delay),V.snapshotCurrentStyles());const d=e.style;5==d.type?this.visitKeyframes(d,t):(t.incrementTime(l.duration),this.visitStyle(d,t),V.applyStylesToKeyframe()),t.currentAnimateTimings=null,t.previousNode=e}visitStyle(e,t){const l=t.currentTimeline,V=t.currentAnimateTimings;!V&&l.hasCurrentStyleProperties()&&l.forwardFrame();const d=V&&V.easing||e.easing;e.isEmptyStep?l.applyEmptyStep(d):l.setStyles(e.styles,d,t.errors,t.options),t.previousNode=e}visitKeyframes(e,t){const l=t.currentAnimateTimings,V=t.currentTimeline.duration,d=l.duration,U=t.createSubContext().currentTimeline;U.easing=l.easing,e.styles.forEach(N=>{U.forwardTime((N.offset||0)*d),U.setStyles(N.styles,N.easing,t.errors,t.options),U.applyStylesToKeyframe()}),t.currentTimeline.mergeTimelineCollectedStyles(U),t.transformIntoNewTimeline(V+d),t.previousNode=e}visitQuery(e,t){const l=t.currentTimeline.currentTime,V=e.options||{},d=V.delay?al(V.delay):0;d&&(6===t.previousNode.type||0==l&&t.currentTimeline.hasCurrentStyleProperties())&&(t.currentTimeline.snapshotCurrentStyles(),t.previousNode=HR);let a=l;const U=t.invokeQuery(e.selector,e.originalSelector,e.limit,e.includeSelf,!!V.optional,t.errors);t.currentQueryTotal=U.length;let N=null;U.forEach((R,Z)=>{t.currentQueryIndex=Z;const r=t.createSubContext(e.options,R);d&&r.delayNextStep(d),R===t.element&&(N=r.currentTimeline),Ht(this,e.animation,r),r.currentTimeline.applyStylesToKeyframe(),a=Math.max(a,r.currentTimeline.currentTime)}),t.currentQueryIndex=0,t.currentQueryTotal=0,t.transformIntoNewTimeline(a),N&&(t.currentTimeline.mergeTimelineCollectedStyles(N),t.currentTimeline.snapshotCurrentStyles()),t.previousNode=e}visitStagger(e,t){const l=t.parentContext,V=t.currentTimeline,d=e.timings,a=Math.abs(d.duration),U=a*(t.currentQueryTotal-1);let N=a*t.currentQueryIndex;switch(d.duration<0?"reverse":d.easing){case"reverse":N=U-N;break;case"full":N=l.currentStaggerTime}const Z=t.currentTimeline;N&&Z.delayNextStep(N);const r=Z.currentTime;Ht(this,e.animation,t),t.previousNode=e,l.currentStaggerTime=V.currentTime-r+(V.startTime-l.currentTimeline.startTime)}}const HR={};class Oo{constructor(e,t,l,V,d,a,U,N){this._driver=e,this.element=t,this.subInstructions=l,this._enterClassName=V,this._leaveClassName=d,this.errors=a,this.timelines=U,this.parentContext=null,this.currentAnimateTimings=null,this.previousNode=HR,this.subContextCount=0,this.options={},this.currentQueryIndex=0,this.currentQueryTotal=0,this.currentStaggerTime=0,this.currentTimeline=N||new BR(this._driver,t,0),U.push(this.currentTimeline)}get params(){return this.options.params}updateOptions(e,t){if(!e)return;const l=e;let V=this.options;null!=l.duration&&(V.duration=al(l.duration)),null!=l.delay&&(V.delay=al(l.delay));const d=l.params;if(d){let a=V.params;a||(a=this.options.params={}),Object.keys(d).forEach(U=>{(!t||!a.hasOwnProperty(U))&&(a[U]=qa(d[U],a,this.errors))})}}_copyOptions(){const e={};if(this.options){const t=this.options.params;if(t){const l=e.params={};Object.keys(t).forEach(V=>{l[V]=t[V]})}}return e}createSubContext(e=null,t,l){const V=t||this.element,d=new Oo(this._driver,V,this.subInstructions,this._enterClassName,this._leaveClassName,this.errors,this.timelines,this.currentTimeline.fork(V,l||0));return d.previousNode=this.previousNode,d.currentAnimateTimings=this.currentAnimateTimings,d.options=this._copyOptions(),d.updateOptions(e),d.currentQueryIndex=this.currentQueryIndex,d.currentQueryTotal=this.currentQueryTotal,d.parentContext=this,this.subContextCount++,d}transformIntoNewTimeline(e){return this.previousNode=HR,this.currentTimeline=this.currentTimeline.fork(this.element,e),this.timelines.push(this.currentTimeline),this.currentTimeline}appendInstructionToTimeline(e,t,l){const V={duration:t??e.duration,delay:this.currentTimeline.currentTime+(l??0)+e.delay,easing:""},d=new TO(this._driver,e.element,e.keyframes,e.preStyleProps,e.postStyleProps,V,e.stretchStartingKeyframe);return this.timelines.push(d),V}incrementTime(e){this.currentTimeline.forwardTime(this.currentTimeline.duration+e)}delayNextStep(e){e>0&&this.currentTimeline.delayNextStep(e)}invokeQuery(e,t,l,V,d,a){let U=[];if(V&&U.push(this.element),e.length>0){e=(e=e.replace(cO,"."+this._enterClassName)).replace(oO,"."+this._leaveClassName);let R=this._driver.query(this.element,e,1!=l);0!==l&&(R=l<0?R.slice(R.length+l,R.length):R.slice(0,l)),U.push(...R)}return!d&&0==U.length&&a.push(function MB(n){return new k(3014,!1)}()),U}}class BR{constructor(e,t,l,V){this._driver=e,this.element=t,this.startTime=l,this._elementTimelineStylesLookup=V,this.duration=0,this._previousKeyframe=new Map,this._currentKeyframe=new Map,this._keyframes=new Map,this._styleSummary=new Map,this._localTimelineStyles=new Map,this._pendingStyles=new Map,this._backFill=new Map,this._currentEmptyStepKeyframe=null,this._elementTimelineStylesLookup||(this._elementTimelineStylesLookup=new Map),this._globalTimelineStyles=this._elementTimelineStylesLookup.get(t),this._globalTimelineStyles||(this._globalTimelineStyles=this._localTimelineStyles,this._elementTimelineStylesLookup.set(t,this._localTimelineStyles)),this._loadKeyframe()}containsAnimation(){switch(this._keyframes.size){case 0:return!1;case 1:return this.hasCurrentStyleProperties();default:return!0}}hasCurrentStyleProperties(){return this._currentKeyframe.size>0}get currentTime(){return this.startTime+this.duration}delayNextStep(e){const t=1===this._keyframes.size&&this._pendingStyles.size;this.duration||t?(this.forwardTime(this.currentTime+e),t&&this.snapshotCurrentStyles()):this.startTime+=e}fork(e,t){return this.applyStylesToKeyframe(),new BR(this._driver,e,t||this.currentTime,this._elementTimelineStylesLookup)}_loadKeyframe(){this._currentKeyframe&&(this._previousKeyframe=this._currentKeyframe),this._currentKeyframe=this._keyframes.get(this.duration),this._currentKeyframe||(this._currentKeyframe=new Map,this._keyframes.set(this.duration,this._currentKeyframe))}forwardFrame(){this.duration+=1,this._loadKeyframe()}forwardTime(e){this.applyStylesToKeyframe(),this.duration=e,this._loadKeyframe()}_updateStyle(e,t){this._localTimelineStyles.set(e,t),this._globalTimelineStyles.set(e,t),this._styleSummary.set(e,{time:this.currentTime,value:t})}allowOnlyTimelineStyles(){return this._currentEmptyStepKeyframe!==this._currentKeyframe}applyEmptyStep(e){e&&this._previousKeyframe.set("easing",e);for(let[t,l]of this._globalTimelineStyles)this._backFill.set(t,l||Vl),this._currentKeyframe.set(t,Vl);this._currentEmptyStepKeyframe=this._currentKeyframe}setStyles(e,t,l,V){t&&this._previousKeyframe.set("easing",t);const d=V&&V.params||{},a=function hO(n,e){const t=new Map;let l;return n.forEach(V=>{if("*"===V){l=l||e.keys();for(let d of l)t.set(d,Vl)}else bl(V,t)}),t}(e,this._globalTimelineStyles);for(let[U,N]of a){const R=qa(N,d,l);this._pendingStyles.set(U,R),this._localTimelineStyles.has(U)||this._backFill.set(U,this._globalTimelineStyles.get(U)??Vl),this._updateStyle(U,R)}}applyStylesToKeyframe(){0!=this._pendingStyles.size&&(this._pendingStyles.forEach((e,t)=>{this._currentKeyframe.set(t,e)}),this._pendingStyles.clear(),this._localTimelineStyles.forEach((e,t)=>{this._currentKeyframe.has(t)||this._currentKeyframe.set(t,e)}))}snapshotCurrentStyles(){for(let[e,t]of this._localTimelineStyles)this._pendingStyles.set(e,t),this._updateStyle(e,t)}getFinalKeyframe(){return this._keyframes.get(this.duration)}get properties(){const e=[];for(let t in this._currentKeyframe)e.push(t);return e}mergeTimelineCollectedStyles(e){e._styleSummary.forEach((t,l)=>{const V=this._styleSummary.get(l);(!V||t.time>V.time)&&this._updateStyle(l,t.value)})}buildKeyframes(){this.applyStylesToKeyframe();const e=new Set,t=new Set,l=1===this._keyframes.size&&0===this.duration;let V=[];this._keyframes.forEach((U,N)=>{const R=bl(U,new Map,this._backFill);R.forEach((Z,r)=>{"!"===Z?e.add(r):Z===Vl&&t.add(r)}),l||R.set("offset",N/this.duration),V.push(R)});const d=e.size?uR(e.values()):[],a=t.size?uR(t.values()):[];if(l){const U=V[0],N=new Map(U);U.set("offset",0),N.set("offset",1),V=[U,N]}return Ho(this.element,V,d,a,this.duration,this.startTime,this.easing,!1)}}class TO extends BR{constructor(e,t,l,V,d,a,U=!1){super(e,t,a.delay),this.keyframes=l,this.preStyleProps=V,this.postStyleProps=d,this._stretchStartingKeyframe=U,this.timings={duration:a.duration,delay:a.delay,easing:a.easing}}containsAnimation(){return this.keyframes.length>1}buildKeyframes(){let e=this.keyframes,{delay:t,duration:l,easing:V}=this.timings;if(this._stretchStartingKeyframe&&t){const d=[],a=l+t,U=t/a,N=bl(e[0]);N.set("offset",0),d.push(N);const R=bl(e[0]);R.set("offset",zk(U)),d.push(R);const Z=e.length-1;for(let r=1;r<=Z;r++){let c=bl(e[r]);const i=c.get("offset");c.set("offset",zk((t+i*l)/a)),d.push(c)}l=a,t=0,V="",e=d}return Ho(this.element,e,this.preStyleProps,this.postStyleProps,l,t,V,!0)}}function zk(n,e=3){const t=Math.pow(10,e-1);return Math.round(n*t)/t}class vo{}const WO=new Set(["width","height","minWidth","minHeight","maxWidth","maxHeight","left","top","bottom","right","fontSize","outlineWidth","outlineOffset","paddingTop","paddingLeft","paddingBottom","paddingRight","marginTop","marginLeft","marginBottom","marginRight","borderRadius","borderWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","textIndent","perspective"]);class FO extends vo{normalizePropertyName(e,t){return Xo(e)}normalizeStyleValue(e,t,l,V){let d="";const a=l.toString().trim();if(WO.has(t)&&0!==l&&"0"!==l)if("number"==typeof l)d="px";else{const U=l.match(/^[+-]?[\d\.]+([a-z]*)$/);U&&0==U[1].length&&V.push(function RB(n,e){return new k(3005,!1)}())}return a+d}}function bk(n,e,t,l,V,d,a,U,N,R,Z,r,c){return{type:0,element:n,triggerName:e,isRemovalTransition:V,fromState:t,fromStyles:d,toState:l,toStyles:a,timelines:U,queriedElements:N,preStyleProps:R,postStyleProps:Z,totalTime:r,errors:c}}const wo={};class uk{constructor(e,t,l){this._triggerName=e,this.ast=t,this._stateStyles=l}match(e,t,l,V){return function MO(n,e,t,l,V){return n.some(d=>d(e,t,l,V))}(this.ast.matchers,e,t,l,V)}buildStyles(e,t,l){let V=this._stateStyles.get("*");return void 0!==e&&(V=this._stateStyles.get(e?.toString())||V),V?V.buildStyles(t,l):new Map}build(e,t,l,V,d,a,U,N,R,Z){const r=[],c=this.ast.options&&this.ast.options.params||wo,o=this.buildStyles(l,U&&U.params||wo,r),s=N&&N.params||wo,T=this.buildStyles(V,s,r),W=new Set,p=new Map,F=new Map,Y="void"===V,L={params:mO(s,c),delay:this.ast.options?.delay},$=Z?[]:Bo(e,t,this.ast.animation,d,a,o,T,L,R,r);let Je=0;if($.forEach(Ot=>{Je=Math.max(Ot.duration+Ot.delay,Je)}),r.length)return bk(t,this._triggerName,l,V,Y,o,T,[],[],p,F,Je,r);$.forEach(Ot=>{const vt=Ot.element,Jd=jt(p,vt,new Set);Ot.preStyleProps.forEach(mn=>Jd.add(mn));const Ul=jt(F,vt,new Set);Ot.postStyleProps.forEach(mn=>Ul.add(mn)),vt!==t&&W.add(vt)});const Bt=uR(W.values());return bk(t,this._triggerName,l,V,Y,o,T,$,Bt,p,F,Je)}}function mO(n,e){const t=Pa(e);for(const l in n)n.hasOwnProperty(l)&&null!=n[l]&&(t[l]=n[l]);return t}class pO{constructor(e,t,l){this.styles=e,this.defaultParams=t,this.normalizer=l}buildStyles(e,t){const l=new Map,V=Pa(this.defaultParams);return Object.keys(e).forEach(d=>{const a=e[d];null!==a&&(V[d]=a)}),this.styles.styles.forEach(d=>{"string"!=typeof d&&d.forEach((a,U)=>{a&&(a=qa(a,V,t));const N=this.normalizer.normalizePropertyName(U,t);a=this.normalizer.normalizeStyleValue(U,N,a,t),l.set(N,a)})}),l}}class EO{constructor(e,t,l){this.name=e,this.ast=t,this._normalizer=l,this.transitionFactories=[],this.states=new Map,t.states.forEach(V=>{this.states.set(V.name,new pO(V.style,V.options&&V.options.params||{},l))}),Gk(this.states,"true","1"),Gk(this.states,"false","0"),t.transitions.forEach(V=>{this.transitionFactories.push(new uk(e,V,this.states))}),this.fallbackTransition=function SO(n,e,t){return new uk(n,{type:1,animation:{type:2,steps:[],options:null},matchers:[(a,U)=>!0],options:null,queryCount:0,depCount:0},e)}(e,this.states)}get containsQueries(){return this.ast.queryCount>0}matchTransition(e,t,l,V){return this.transitionFactories.find(a=>a.match(e,t,l,V))||null}matchStyles(e,t,l){return this.fallbackTransition.buildStyles(e,t,l)}}function Gk(n,e,t){n.has(e)?n.has(t)||n.set(t,n.get(e)):n.has(t)&&n.set(e,n.get(t))}const YO=new jR;class JO{constructor(e,t,l){this.bodyNode=e,this._driver=t,this._normalizer=l,this._animations=new Map,this._playersById=new Map,this.players=[]}register(e,t){const l=[],d=yo(this._driver,t,l,[]);if(l.length)throw function JB(n){return new k(3503,!1)}();this._animations.set(e,d)}_buildPlayer(e,t,l){const V=e.element,d=Zk(0,this._normalizer,0,e.keyframes,t,l);return this._driver.animate(V,d,e.duration,e.delay,e.easing,[],!0)}create(e,t,l={}){const V=[],d=this._animations.get(e);let a;const U=new Map;if(d?(a=Bo(this._driver,t,d,uo,JR,new Map,new Map,l,YO,V),a.forEach(Z=>{const r=jt(U,Z.element,new Map);Z.postStyleProps.forEach(c=>r.set(c,null))})):(V.push(function QB(){return new k(3300,!1)}()),a=[]),V.length)throw function zB(n){return new k(3504,!1)}();U.forEach((Z,r)=>{Z.forEach((c,i)=>{Z.set(i,this._driver.computeStyle(r,i,Vl))})});const R=zl(a.map(Z=>{const r=U.get(Z.element);return this._buildPlayer(Z,new Map,r)}));return this._playersById.set(e,R),R.onDestroy(()=>this.destroy(e)),this.players.push(R),R}destroy(e){const t=this._getPlayer(e);t.destroy(),this._playersById.delete(e);const l=this.players.indexOf(t);l>=0&&this.players.splice(l,1)}_getPlayer(e){const t=this._playersById.get(e);if(!t)throw function bB(n){return new k(3301,!1)}();return t}listen(e,t,l,V){const d=Jo(t,"","","");return So(this._getPlayer(e),l,d,V),()=>{}}command(e,t,l,V){if("register"==l)return void this.register(e,V[0]);if("create"==l)return void this.create(e,t,V[0]||{});const d=this._getPlayer(e);switch(l){case"play":d.play();break;case"pause":d.pause();break;case"reset":d.reset();break;case"restart":d.restart();break;case"finish":d.finish();break;case"init":d.init();break;case"setPosition":d.setPosition(parseFloat(V[0]));break;case"destroy":this.destroy(e)}}}const Dk="ng-animate-queued",go="ng-animate-disabled",GO=[],xk={namespaceId:"",setForRemoval:!1,setForMove:!1,hasAnimation:!1,removedBeforeQueried:!1},DO={namespaceId:"",setForMove:!1,setForRemoval:!1,hasAnimation:!1,removedBeforeQueried:!0},$t="__ng_removed";class Io{constructor(e,t=""){this.namespaceId=t;const l=e&&e.hasOwnProperty("value");if(this.value=function jO(n){return n??null}(l?e.value:e),l){const d=Pa(e);delete d.value,this.options=d}else this.options={};this.options.params||(this.options.params={})}get params(){return this.options.params}absorbOptions(e){const t=e.params;if(t){const l=this.options.params;Object.keys(t).forEach(V=>{null==l[V]&&(l[V]=t[V])})}}}const Aa="void",fo=new Io(Aa);class xO{constructor(e,t,l){this.id=e,this.hostElement=t,this._engine=l,this.players=[],this._triggers=new Map,this._queue=[],this._elementListeners=new Map,this._hostClassName="ng-tns-"+e,en(t,this._hostClassName)}listen(e,t,l,V){if(!this._triggers.has(t))throw function uB(n,e){return new k(3302,!1)}();if(null==l||0==l.length)throw function GB(n){return new k(3303,!1)}();if(!function HO(n){return"start"==n||"done"==n}(l))throw function DB(n,e){return new k(3400,!1)}();const d=jt(this._elementListeners,e,[]),a={name:t,phase:l,callback:V};d.push(a);const U=jt(this._engine.statesByElement,e,new Map);return U.has(t)||(en(e,QR),en(e,QR+"-"+t),U.set(t,fo)),()=>{this._engine.afterFlush(()=>{const N=d.indexOf(a);N>=0&&d.splice(N,1),this._triggers.has(t)||U.delete(t)})}}register(e,t){return!this._triggers.has(e)&&(this._triggers.set(e,t),!0)}_getTrigger(e){const t=this._triggers.get(e);if(!t)throw function xB(n){return new k(3401,!1)}();return t}trigger(e,t,l,V=!0){const d=this._getTrigger(t),a=new Lo(this.id,t,e);let U=this._engine.statesByElement.get(e);U||(en(e,QR),en(e,QR+"-"+t),this._engine.statesByElement.set(e,U=new Map));let N=U.get(t);const R=new Io(l,this.id);if(!(l&&l.hasOwnProperty("value"))&&N&&R.absorbOptions(N.options),U.set(t,R),N||(N=fo),R.value!==Aa&&N.value===R.value){if(!function vO(n,e){const t=Object.keys(n),l=Object.keys(e);if(t.length!=l.length)return!1;for(let V=0;V<t.length;V++){const d=t[V];if(!e.hasOwnProperty(d)||n[d]!==e[d])return!1}return!0}(N.params,R.params)){const s=[],T=d.matchStyles(N.value,N.params,s),W=d.matchStyles(R.value,R.params,s);s.length?this._engine.reportError(s):this._engine.afterFlush(()=>{TV(e,T),Xn(e,W)})}return}const c=jt(this._engine.playersByElement,e,[]);c.forEach(s=>{s.namespaceId==this.id&&s.triggerName==t&&s.queued&&s.destroy()});let i=d.matchTransition(N.value,R.value,e,R.params),o=!1;if(!i){if(!V)return;i=d.fallbackTransition,o=!0}return this._engine.totalQueuedPlayers++,this._queue.push({element:e,triggerName:t,transition:i,fromState:N,toState:R,player:a,isFallbackTransition:o}),o||(en(e,Dk),a.onStart(()=>{Yd(e,Dk)})),a.onDone(()=>{let s=this.players.indexOf(a);s>=0&&this.players.splice(s,1);const T=this._engine.playersByElement.get(e);if(T){let W=T.indexOf(a);W>=0&&T.splice(W,1)}}),this.players.push(a),c.push(a),a}deregister(e){this._triggers.delete(e),this._engine.statesByElement.forEach(t=>t.delete(e)),this._elementListeners.forEach((t,l)=>{this._elementListeners.set(l,t.filter(V=>V.name!=e))})}clearElementCache(e){this._engine.statesByElement.delete(e),this._elementListeners.delete(e);const t=this._engine.playersByElement.get(e);t&&(t.forEach(l=>l.destroy()),this._engine.playersByElement.delete(e))}_signalRemovalForInnerTriggers(e,t){const l=this._engine.driver.query(e,zR,!0);l.forEach(V=>{if(V[$t])return;const d=this._engine.fetchNamespacesByElement(V);d.size?d.forEach(a=>a.triggerLeaveAnimation(V,t,!1,!0)):this.clearElementCache(V)}),this._engine.afterFlushAnimationsDone(()=>l.forEach(V=>this.clearElementCache(V)))}triggerLeaveAnimation(e,t,l,V){const d=this._engine.statesByElement.get(e),a=new Map;if(d){const U=[];if(d.forEach((N,R)=>{if(a.set(R,N.value),this._triggers.has(R)){const Z=this.trigger(e,R,Aa,V);Z&&U.push(Z)}}),U.length)return this._engine.markElementAsRemoved(this.id,e,!0,t,a),l&&zl(U).onDone(()=>this._engine.processLeaveNode(e)),!0}return!1}prepareLeaveAnimationListeners(e){const t=this._elementListeners.get(e),l=this._engine.statesByElement.get(e);if(t&&l){const V=new Set;t.forEach(d=>{const a=d.name;if(V.has(a))return;V.add(a);const N=this._triggers.get(a).fallbackTransition,R=l.get(a)||fo,Z=new Io(Aa),r=new Lo(this.id,a,e);this._engine.totalQueuedPlayers++,this._queue.push({element:e,triggerName:a,transition:N,fromState:R,toState:Z,player:r,isFallbackTransition:!0})})}}removeNode(e,t){const l=this._engine;if(e.childElementCount&&this._signalRemovalForInnerTriggers(e,t),this.triggerLeaveAnimation(e,t,!0))return;let V=!1;if(l.totalAnimations){const d=l.players.length?l.playersByQueriedElement.get(e):[];if(d&&d.length)V=!0;else{let a=e;for(;a=a.parentNode;)if(l.statesByElement.get(a)){V=!0;break}}}if(this.prepareLeaveAnimationListeners(e),V)l.markElementAsRemoved(this.id,e,!1,t);else{const d=e[$t];(!d||d===xk)&&(l.afterFlush(()=>this.clearElementCache(e)),l.destroyInnerAnimations(e),l._onRemovalComplete(e,t))}}insertNode(e,t){en(e,this._hostClassName)}drainQueuedTransitions(e){const t=[];return this._queue.forEach(l=>{const V=l.player;if(V.destroyed)return;const d=l.element,a=this._elementListeners.get(d);a&&a.forEach(U=>{if(U.name==l.triggerName){const N=Jo(d,l.triggerName,l.fromState.value,l.toState.value);N._data=e,So(l.player,U.phase,N,U.callback)}}),V.markedForDestroy?this._engine.afterFlush(()=>{V.destroy()}):t.push(l)}),this._queue=[],t.sort((l,V)=>{const d=l.transition.ast.depCount,a=V.transition.ast.depCount;return 0==d||0==a?d-a:this._engine.driver.containsElement(l.element,V.element)?1:-1})}destroy(e){this.players.forEach(t=>t.destroy()),this._signalRemovalForInnerTriggers(this.hostElement,e)}elementContainsData(e){let t=!1;return this._elementListeners.has(e)&&(t=!0),t=!!this._queue.find(l=>l.element===e)||t,t}}class XO{constructor(e,t,l){this.bodyNode=e,this.driver=t,this._normalizer=l,this.players=[],this.newHostElements=new Map,this.playersByElement=new Map,this.playersByQueriedElement=new Map,this.statesByElement=new Map,this.disabledNodes=new Set,this.totalAnimations=0,this.totalQueuedPlayers=0,this._namespaceLookup={},this._namespaceList=[],this._flushFns=[],this._whenQuietFns=[],this.namespacesByHostElement=new Map,this.collectedEnterElements=[],this.collectedLeaveElements=[],this.onRemovalComplete=(V,d)=>{}}_onRemovalComplete(e,t){this.onRemovalComplete(e,t)}get queuedPlayers(){const e=[];return this._namespaceList.forEach(t=>{t.players.forEach(l=>{l.queued&&e.push(l)})}),e}createNamespace(e,t){const l=new xO(e,t,this);return this.bodyNode&&this.driver.containsElement(this.bodyNode,t)?this._balanceNamespaceList(l,t):(this.newHostElements.set(t,l),this.collectEnterElement(t)),this._namespaceLookup[e]=l}_balanceNamespaceList(e,t){const l=this._namespaceList,V=this.namespacesByHostElement;if(l.length-1>=0){let a=!1,U=this.driver.getParentElement(t);for(;U;){const N=V.get(U);if(N){const R=l.indexOf(N);l.splice(R+1,0,e),a=!0;break}U=this.driver.getParentElement(U)}a||l.unshift(e)}else l.push(e);return V.set(t,e),e}register(e,t){let l=this._namespaceLookup[e];return l||(l=this.createNamespace(e,t)),l}registerTrigger(e,t,l){let V=this._namespaceLookup[e];V&&V.register(t,l)&&this.totalAnimations++}destroy(e,t){if(!e)return;const l=this._fetchNamespace(e);this.afterFlush(()=>{this.namespacesByHostElement.delete(l.hostElement),delete this._namespaceLookup[e];const V=this._namespaceList.indexOf(l);V>=0&&this._namespaceList.splice(V,1)}),this.afterFlushAnimationsDone(()=>l.destroy(t))}_fetchNamespace(e){return this._namespaceLookup[e]}fetchNamespacesByElement(e){const t=new Set,l=this.statesByElement.get(e);if(l)for(let V of l.values())if(V.namespaceId){const d=this._fetchNamespace(V.namespaceId);d&&t.add(d)}return t}trigger(e,t,l,V){if(OR(t)){const d=this._fetchNamespace(e);if(d)return d.trigger(t,l,V),!0}return!1}insertNode(e,t,l,V){if(!OR(t))return;const d=t[$t];if(d&&d.setForRemoval){d.setForRemoval=!1,d.setForMove=!0;const a=this.collectedLeaveElements.indexOf(t);a>=0&&this.collectedLeaveElements.splice(a,1)}if(e){const a=this._fetchNamespace(e);a&&a.insertNode(t,l)}V&&this.collectEnterElement(t)}collectEnterElement(e){this.collectedEnterElements.push(e)}markElementAsDisabled(e,t){t?this.disabledNodes.has(e)||(this.disabledNodes.add(e),en(e,go)):this.disabledNodes.has(e)&&(this.disabledNodes.delete(e),Yd(e,go))}removeNode(e,t,l,V){if(OR(t)){const d=e?this._fetchNamespace(e):null;if(d?d.removeNode(t,V):this.markElementAsRemoved(e,t,!1,V),l){const a=this.namespacesByHostElement.get(t);a&&a.id!==e&&a.removeNode(t,V)}}else this._onRemovalComplete(t,V)}markElementAsRemoved(e,t,l,V,d){this.collectedLeaveElements.push(t),t[$t]={namespaceId:e,setForRemoval:V,hasAnimation:l,removedBeforeQueried:!1,previousTriggersValues:d}}listen(e,t,l,V,d){return OR(t)?this._fetchNamespace(e).listen(t,l,V,d):()=>{}}_buildInstruction(e,t,l,V,d){return e.transition.build(this.driver,e.element,e.fromState.value,e.toState.value,l,V,e.fromState.options,e.toState.options,t,d)}destroyInnerAnimations(e){let t=this.driver.query(e,zR,!0);t.forEach(l=>this.destroyActiveAnimationsForElement(l)),0!=this.playersByQueriedElement.size&&(t=this.driver.query(e,Go,!0),t.forEach(l=>this.finishActiveQueriedAnimationOnElement(l)))}destroyActiveAnimationsForElement(e){const t=this.playersByElement.get(e);t&&t.forEach(l=>{l.queued?l.markedForDestroy=!0:l.destroy()})}finishActiveQueriedAnimationOnElement(e){const t=this.playersByQueriedElement.get(e);t&&t.forEach(l=>l.finish())}whenRenderingDone(){return new Promise(e=>{if(this.players.length)return zl(this.players).onDone(()=>e());e()})}processLeaveNode(e){const t=e[$t];if(t&&t.setForRemoval){if(e[$t]=xk,t.namespaceId){this.destroyInnerAnimations(e);const l=this._fetchNamespace(t.namespaceId);l&&l.clearElementCache(e)}this._onRemovalComplete(e,t.setForRemoval)}e.classList?.contains(go)&&this.markElementAsDisabled(e,!1),this.driver.query(e,".ng-animate-disabled",!0).forEach(l=>{this.markElementAsDisabled(l,!1)})}flush(e=-1){let t=[];if(this.newHostElements.size&&(this.newHostElements.forEach((l,V)=>this._balanceNamespaceList(l,V)),this.newHostElements.clear()),this.totalAnimations&&this.collectedEnterElements.length)for(let l=0;l<this.collectedEnterElements.length;l++)en(this.collectedEnterElements[l],"ng-star-inserted");if(this._namespaceList.length&&(this.totalQueuedPlayers||this.collectedLeaveElements.length)){const l=[];try{t=this._flushAnimations(l,e)}finally{for(let V=0;V<l.length;V++)l[V]()}}else for(let l=0;l<this.collectedLeaveElements.length;l++)this.processLeaveNode(this.collectedLeaveElements[l]);if(this.totalQueuedPlayers=0,this.collectedEnterElements.length=0,this.collectedLeaveElements.length=0,this._flushFns.forEach(l=>l()),this._flushFns=[],this._whenQuietFns.length){const l=this._whenQuietFns;this._whenQuietFns=[],t.length?zl(t).onDone(()=>{l.forEach(V=>V())}):l.forEach(V=>V())}}reportError(e){throw function XB(n){return new k(3402,!1)}()}_flushAnimations(e,t){const l=new jR,V=[],d=new Map,a=[],U=new Map,N=new Map,R=new Map,Z=new Set;this.disabledNodes.forEach(z=>{Z.add(z);const G=this.driver.query(z,".ng-animate-queued",!0);for(let j=0;j<G.length;j++)Z.add(G[j])});const r=this.bodyNode,c=Array.from(this.statesByElement.keys()),i=jk(c,this.collectedEnterElements),o=new Map;let s=0;i.forEach((z,G)=>{const j=uo+s++;o.set(G,j),z.forEach(ne=>en(ne,j))});const T=[],W=new Set,p=new Set;for(let z=0;z<this.collectedLeaveElements.length;z++){const G=this.collectedLeaveElements[z],j=G[$t];j&&j.setForRemoval&&(T.push(G),W.add(G),j.hasAnimation?this.driver.query(G,".ng-star-inserted",!0).forEach(ne=>W.add(ne)):p.add(G))}const F=new Map,Y=jk(c,Array.from(W));Y.forEach((z,G)=>{const j=JR+s++;F.set(G,j),z.forEach(ne=>en(ne,j))}),e.push(()=>{i.forEach((z,G)=>{const j=o.get(G);z.forEach(ne=>Yd(ne,j))}),Y.forEach((z,G)=>{const j=F.get(G);z.forEach(ne=>Yd(ne,j))}),T.forEach(z=>{this.processLeaveNode(z)})});const L=[],$=[];for(let z=this._namespaceList.length-1;z>=0;z--)this._namespaceList[z].drainQueuedTransitions(t).forEach(j=>{const ne=j.player,Pe=j.element;if(L.push(ne),this.collectedEnterElements.length){const lt=Pe[$t];if(lt&&lt.setForMove){if(lt.previousTriggersValues&&lt.previousTriggersValues.has(j.triggerName)){const FV=lt.previousTriggersValues.get(j.triggerName),tn=this.statesByElement.get(j.element);if(tn&&tn.has(j.triggerName)){const fR=tn.get(j.triggerName);fR.value=FV,tn.set(j.triggerName,fR)}}return void ne.destroy()}}const yn=!r||!this.driver.containsElement(r,Pe),wt=F.get(Pe),ul=o.get(Pe),Qe=this._buildInstruction(j,l,ul,wt,yn);if(Qe.errors&&Qe.errors.length)return void $.push(Qe);if(yn)return ne.onStart(()=>TV(Pe,Qe.fromStyles)),ne.onDestroy(()=>Xn(Pe,Qe.toStyles)),void V.push(ne);if(j.isFallbackTransition)return ne.onStart(()=>TV(Pe,Qe.fromStyles)),ne.onDestroy(()=>Xn(Pe,Qe.toStyles)),void V.push(ne);const $k=[];Qe.timelines.forEach(lt=>{lt.stretchStartingKeyframe=!0,this.disabledNodes.has(lt.element)||$k.push(lt)}),Qe.timelines=$k,l.append(Pe,Qe.timelines),a.push({instruction:Qe,player:ne,element:Pe}),Qe.queriedElements.forEach(lt=>jt(U,lt,[]).push(ne)),Qe.preStyleProps.forEach((lt,FV)=>{if(lt.size){let tn=N.get(FV);tn||N.set(FV,tn=new Set),lt.forEach((fR,_o)=>tn.add(_o))}}),Qe.postStyleProps.forEach((lt,FV)=>{let tn=R.get(FV);tn||R.set(FV,tn=new Set),lt.forEach((fR,_o)=>tn.add(_o))})});if($.length){const z=[];$.forEach(G=>{z.push(function yB(n,e){return new k(3505,!1)}())}),L.forEach(G=>G.destroy()),this.reportError(z)}const Je=new Map,Bt=new Map;a.forEach(z=>{const G=z.element;l.has(G)&&(Bt.set(G,G),this._beforeAnimationBuild(z.player.namespaceId,z.instruction,Je))}),V.forEach(z=>{const G=z.element;this._getPreviousPlayers(G,!1,z.namespaceId,z.triggerName,null).forEach(ne=>{jt(Je,G,[]).push(ne),ne.destroy()})});const Ot=T.filter(z=>Bk(z,N,R)),vt=new Map;yk(vt,this.driver,p,R,Vl).forEach(z=>{Bk(z,N,R)&&Ot.push(z)});const Ul=new Map;i.forEach((z,G)=>{yk(Ul,this.driver,new Set(z),N,"!")}),Ot.forEach(z=>{const G=vt.get(z),j=Ul.get(z);vt.set(z,new Map([...Array.from(G?.entries()??[]),...Array.from(j?.entries()??[])]))});const mn=[],Qd=[],zd={};a.forEach(z=>{const{element:G,player:j,instruction:ne}=z;if(l.has(G)){if(Z.has(G))return j.onDestroy(()=>Xn(G,ne.toStyles)),j.disabled=!0,j.overrideTotalTime(ne.totalTime),void V.push(j);let Pe=zd;if(Bt.size>1){let wt=G;const ul=[];for(;wt=wt.parentNode;){const Qe=Bt.get(wt);if(Qe){Pe=Qe;break}ul.push(wt)}ul.forEach(Qe=>Bt.set(Qe,Pe))}const yn=this._buildAnimation(j.namespaceId,ne,Je,d,Ul,vt);if(j.setRealPlayer(yn),Pe===zd)mn.push(j);else{const wt=this.playersByElement.get(Pe);wt&&wt.length&&(j.parentPlayer=zl(wt)),V.push(j)}}else TV(G,ne.fromStyles),j.onDestroy(()=>Xn(G,ne.toStyles)),Qd.push(j),Z.has(G)&&V.push(j)}),Qd.forEach(z=>{const G=d.get(z.element);if(G&&G.length){const j=zl(G);z.setRealPlayer(j)}}),V.forEach(z=>{z.parentPlayer?z.syncPlayerEvents(z.parentPlayer):z.destroy()});for(let z=0;z<T.length;z++){const G=T[z],j=G[$t];if(Yd(G,JR),j&&j.hasAnimation)continue;let ne=[];if(U.size){let yn=U.get(G);yn&&yn.length&&ne.push(...yn);let wt=this.driver.query(G,Go,!0);for(let ul=0;ul<wt.length;ul++){let Qe=U.get(wt[ul]);Qe&&Qe.length&&ne.push(...Qe)}}const Pe=ne.filter(yn=>!yn.destroyed);Pe.length?BO(this,G,Pe):this.processLeaveNode(G)}return T.length=0,mn.forEach(z=>{this.players.push(z),z.onDone(()=>{z.destroy();const G=this.players.indexOf(z);this.players.splice(G,1)}),z.play()}),mn}elementContainsData(e,t){let l=!1;const V=t[$t];return V&&V.setForRemoval&&(l=!0),this.playersByElement.has(t)&&(l=!0),this.playersByQueriedElement.has(t)&&(l=!0),this.statesByElement.has(t)&&(l=!0),this._fetchNamespace(e).elementContainsData(t)||l}afterFlush(e){this._flushFns.push(e)}afterFlushAnimationsDone(e){this._whenQuietFns.push(e)}_getPreviousPlayers(e,t,l,V,d){let a=[];if(t){const U=this.playersByQueriedElement.get(e);U&&(a=U)}else{const U=this.playersByElement.get(e);if(U){const N=!d||d==Aa;U.forEach(R=>{R.queued||!N&&R.triggerName!=V||a.push(R)})}}return(l||V)&&(a=a.filter(U=>!(l&&l!=U.namespaceId||V&&V!=U.triggerName))),a}_beforeAnimationBuild(e,t,l){const d=t.element,a=t.isRemovalTransition?void 0:e,U=t.isRemovalTransition?void 0:t.triggerName;for(const N of t.timelines){const R=N.element,Z=R!==d,r=jt(l,R,[]);this._getPreviousPlayers(R,Z,a,U,t.toState).forEach(i=>{const o=i.getRealPlayer();o.beforeDestroy&&o.beforeDestroy(),i.destroy(),r.push(i)})}TV(d,t.fromStyles)}_buildAnimation(e,t,l,V,d,a){const U=t.triggerName,N=t.element,R=[],Z=new Set,r=new Set,c=t.timelines.map(o=>{const s=o.element;Z.add(s);const T=s[$t];if(T&&T.removedBeforeQueried)return new Ka(o.duration,o.delay);const W=s!==N,p=function OO(n){const e=[];return Hk(n,e),e}((l.get(s)||GO).map(Je=>Je.getRealPlayer())).filter(Je=>!!Je.element&&Je.element===s),F=d.get(s),Y=a.get(s),L=Zk(0,this._normalizer,0,o.keyframes,F,Y),$=this._buildPlayer(o,L,p);if(o.subTimeline&&V&&r.add(s),W){const Je=new Lo(e,U,s);Je.setRealPlayer($),R.push(Je)}return $});R.forEach(o=>{jt(this.playersByQueriedElement,o.element,[]).push(o),o.onDone(()=>function yO(n,e,t){let l=n.get(e);if(l){if(l.length){const V=l.indexOf(t);l.splice(V,1)}0==l.length&&n.delete(e)}return l}(this.playersByQueriedElement,o.element,o))}),Z.forEach(o=>en(o,Fk));const i=zl(c);return i.onDestroy(()=>{Z.forEach(o=>Yd(o,Fk)),Xn(N,t.toStyles)}),r.forEach(o=>{jt(V,o,[]).push(i)}),i}_buildPlayer(e,t,l){return t.length>0?this.driver.animate(e.element,t,e.duration,e.delay,e.easing,l):new Ka(e.duration,e.delay)}}class Lo{constructor(e,t,l){this.namespaceId=e,this.triggerName=t,this.element=l,this._player=new Ka,this._containsRealPlayer=!1,this._queuedCallbacks=new Map,this.destroyed=!1,this.markedForDestroy=!1,this.disabled=!1,this.queued=!0,this.totalTime=0}setRealPlayer(e){this._containsRealPlayer||(this._player=e,this._queuedCallbacks.forEach((t,l)=>{t.forEach(V=>So(e,l,void 0,V))}),this._queuedCallbacks.clear(),this._containsRealPlayer=!0,this.overrideTotalTime(e.totalTime),this.queued=!1)}getRealPlayer(){return this._player}overrideTotalTime(e){this.totalTime=e}syncPlayerEvents(e){const t=this._player;t.triggerCallback&&e.onStart(()=>t.triggerCallback("start")),e.onDone(()=>this.finish()),e.onDestroy(()=>this.destroy())}_queueEvent(e,t){jt(this._queuedCallbacks,e,[]).push(t)}onDone(e){this.queued&&this._queueEvent("done",e),this._player.onDone(e)}onStart(e){this.queued&&this._queueEvent("start",e),this._player.onStart(e)}onDestroy(e){this.queued&&this._queueEvent("destroy",e),this._player.onDestroy(e)}init(){this._player.init()}hasStarted(){return!this.queued&&this._player.hasStarted()}play(){!this.queued&&this._player.play()}pause(){!this.queued&&this._player.pause()}restart(){!this.queued&&this._player.restart()}finish(){this._player.finish()}destroy(){this.destroyed=!0,this._player.destroy()}reset(){!this.queued&&this._player.reset()}setPosition(e){this.queued||this._player.setPosition(e)}getPosition(){return this.queued?0:this._player.getPosition()}triggerCallback(e){const t=this._player;t.triggerCallback&&t.triggerCallback(e)}}function OR(n){return n&&1===n.nodeType}function Xk(n,e){const t=n.style.display;return n.style.display=e??"none",t}function yk(n,e,t,l,V){const d=[];t.forEach(N=>d.push(Xk(N)));const a=[];l.forEach((N,R)=>{const Z=new Map;N.forEach(r=>{const c=e.computeStyle(R,r,V);Z.set(r,c),(!c||0==c.length)&&(R[$t]=DO,a.push(R))}),n.set(R,Z)});let U=0;return t.forEach(N=>Xk(N,d[U++])),a}function jk(n,e){const t=new Map;if(n.forEach(U=>t.set(U,[])),0==e.length)return t;const V=new Set(e),d=new Map;function a(U){if(!U)return 1;let N=d.get(U);if(N)return N;const R=U.parentNode;return N=t.has(R)?R:V.has(R)?1:a(R),d.set(U,N),N}return e.forEach(U=>{const N=a(U);1!==N&&t.get(N).push(U)}),t}function en(n,e){n.classList?.add(e)}function Yd(n,e){n.classList?.remove(e)}function BO(n,e,t){zl(t).onDone(()=>n.processLeaveNode(e))}function Hk(n,e){for(let t=0;t<n.length;t++){const l=n[t];l instanceof _p?Hk(l.players,e):e.push(l)}}function Bk(n,e,t){const l=t.get(n);if(!l)return!1;let V=e.get(n);return V?l.forEach(d=>V.add(d)):e.set(n,l),t.delete(n),!0}class vR{constructor(e,t,l){this.bodyNode=e,this._driver=t,this._normalizer=l,this._triggerCache={},this.onRemovalComplete=(V,d)=>{},this._transitionEngine=new XO(e,t,l),this._timelineEngine=new JO(e,t,l),this._transitionEngine.onRemovalComplete=(V,d)=>this.onRemovalComplete(V,d)}registerTrigger(e,t,l,V,d){const a=e+"-"+V;let U=this._triggerCache[a];if(!U){const N=[],Z=yo(this._driver,d,N,[]);if(N.length)throw function SB(n,e){return new k(3404,!1)}();U=function kO(n,e,t){return new EO(n,e,t)}(V,Z,this._normalizer),this._triggerCache[a]=U}this._transitionEngine.registerTrigger(t,V,U)}register(e,t){this._transitionEngine.register(e,t)}destroy(e,t){this._transitionEngine.destroy(e,t)}onInsert(e,t,l,V){this._transitionEngine.insertNode(e,t,l,V)}onRemove(e,t,l,V){this._transitionEngine.removeNode(e,t,V||!1,l)}disableAnimations(e,t){this._transitionEngine.markElementAsDisabled(e,t)}process(e,t,l,V){if("@"==l.charAt(0)){const[d,a]=rk(l);this._timelineEngine.command(d,t,a,V)}else this._transitionEngine.trigger(e,t,l,V)}listen(e,t,l,V,d){if("@"==l.charAt(0)){const[a,U]=rk(l);return this._timelineEngine.listen(a,t,U,d)}return this._transitionEngine.listen(e,t,l,V,d)}flush(e=-1){this._transitionEngine.flush(e)}get players(){return this._transitionEngine.players.concat(this._timelineEngine.players)}whenRenderingDone(){return this._transitionEngine.whenRenderingDone()}}let gO=(()=>{class n{constructor(t,l,V){this._element=t,this._startStyles=l,this._endStyles=V,this._state=0;let d=n.initialStylesByElement.get(t);d||n.initialStylesByElement.set(t,d=new Map),this._initialStyles=d}start(){this._state<1&&(this._startStyles&&Xn(this._element,this._startStyles,this._initialStyles),this._state=1)}finish(){this.start(),this._state<2&&(Xn(this._element,this._initialStyles),this._endStyles&&(Xn(this._element,this._endStyles),this._endStyles=null),this._state=1)}destroy(){this.finish(),this._state<3&&(n.initialStylesByElement.delete(this._element),this._startStyles&&(TV(this._element,this._startStyles),this._endStyles=null),this._endStyles&&(TV(this._element,this._endStyles),this._endStyles=null),Xn(this._element,this._initialStyles),this._state=3)}}return n.initialStylesByElement=new WeakMap,n})();function Co(n){let e=null;return n.forEach((t,l)=>{(function IO(n){return"display"===n||"position"===n})(l)&&(e=e||new Map,e.set(l,t))}),e}class Ok{constructor(e,t,l,V){this.element=e,this.keyframes=t,this.options=l,this._specialStyles=V,this._onDoneFns=[],this._onStartFns=[],this._onDestroyFns=[],this._initialized=!1,this._finished=!1,this._started=!1,this._destroyed=!1,this._originalOnDoneFns=[],this._originalOnStartFns=[],this.time=0,this.parentPlayer=null,this.currentSnapshot=new Map,this._duration=l.duration,this._delay=l.delay||0,this.time=this._duration+this._delay}_onFinish(){this._finished||(this._finished=!0,this._onDoneFns.forEach(e=>e()),this._onDoneFns=[])}init(){this._buildPlayer(),this._preparePlayerBeforeStart()}_buildPlayer(){if(this._initialized)return;this._initialized=!0;const e=this.keyframes;this.domPlayer=this._triggerWebAnimation(this.element,e,this.options),this._finalKeyframe=e.length?e[e.length-1]:new Map,this.domPlayer.addEventListener("finish",()=>this._onFinish())}_preparePlayerBeforeStart(){this._delay?this._resetDomPlayerState():this.domPlayer.pause()}_convertKeyframesToObject(e){const t=[];return e.forEach(l=>{t.push(Object.fromEntries(l))}),t}_triggerWebAnimation(e,t,l){return e.animate(this._convertKeyframesToObject(t),l)}onStart(e){this._originalOnStartFns.push(e),this._onStartFns.push(e)}onDone(e){this._originalOnDoneFns.push(e),this._onDoneFns.push(e)}onDestroy(e){this._onDestroyFns.push(e)}play(){this._buildPlayer(),this.hasStarted()||(this._onStartFns.forEach(e=>e()),this._onStartFns=[],this._started=!0,this._specialStyles&&this._specialStyles.start()),this.domPlayer.play()}pause(){this.init(),this.domPlayer.pause()}finish(){this.init(),this._specialStyles&&this._specialStyles.finish(),this._onFinish(),this.domPlayer.finish()}reset(){this._resetDomPlayerState(),this._destroyed=!1,this._finished=!1,this._started=!1,this._onStartFns=this._originalOnStartFns,this._onDoneFns=this._originalOnDoneFns}_resetDomPlayerState(){this.domPlayer&&this.domPlayer.cancel()}restart(){this.reset(),this.play()}hasStarted(){return this._started}destroy(){this._destroyed||(this._destroyed=!0,this._resetDomPlayerState(),this._onFinish(),this._specialStyles&&this._specialStyles.destroy(),this._onDestroyFns.forEach(e=>e()),this._onDestroyFns=[])}setPosition(e){void 0===this.domPlayer&&this.init(),this.domPlayer.currentTime=e*this.time}getPosition(){return this.domPlayer.currentTime/this.time}get totalTime(){return this._delay+this._duration}beforeDestroy(){const e=new Map;this.hasStarted()&&this._finalKeyframe.forEach((l,V)=>{"offset"!==V&&e.set(V,this._finished?l:Sk(this.element,V))}),this.currentSnapshot=e}triggerCallback(e){const t="start"===e?this._onStartFns:this._onDoneFns;t.forEach(l=>l()),t.length=0}}class fO{validateStyleProperty(e){return!0}validateAnimatableStyleProperty(e){return!0}matchesElement(e,t){return!1}containsElement(e,t){return sk(e,t)}getParentElement(e){return zo(e)}query(e,t,l){return Tk(e,t,l)}computeStyle(e,t,l){return window.getComputedStyle(e)[t]}animate(e,t,l,V,d,a=[]){const N={duration:l,delay:V,fill:0==V?"both":"forwards"};d&&(N.easing=d);const R=new Map,Z=a.filter(i=>i instanceof Ok);(function PB(n,e){return 0===n||0===e})(l,V)&&Z.forEach(i=>{i.currentSnapshot.forEach((o,s)=>R.set(s,o))});let r=function fB(n){return n.length?n[0]instanceof Map?n:n.map(e=>Mk(e)):[]}(t).map(i=>bl(i));r=function _B(n,e,t){if(t.size&&e.length){let l=e[0],V=[];if(t.forEach((d,a)=>{l.has(a)||V.push(a),l.set(a,d)}),V.length)for(let d=1;d<e.length;d++){let a=e[d];V.forEach(U=>a.set(U,Sk(n,U)))}}return e}(e,r,R);const c=function wO(n,e){let t=null,l=null;return Array.isArray(e)&&e.length?(t=Co(e[0]),e.length>1&&(l=Co(e[e.length-1]))):e instanceof Map&&(t=Co(e)),t||l?new gO(n,t,l):null}(e,r);return new Ok(e,r,N,c)}}let LO=(()=>{class n extends Cp{constructor(t,l){super(),this._nextAnimationId=0,this._renderer=t.createRenderer(l.body,{id:"0",encapsulation:ln.None,styles:[],data:{animation:[]}})}build(t){const l=this._nextAnimationId.toString();this._nextAnimationId++;const V=Array.isArray(t)?Kp(t):t;return vk(this._renderer,null,l,"register",[V]),new CO(l,this._renderer)}}return n.\u0275fac=function(t){return new(t||n)(h(la),h(w))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();class CO extends class Aj{}{constructor(e,t){super(),this._id=e,this._renderer=t}create(e,t){return new KO(this._id,e,t||{},this._renderer)}}class KO{constructor(e,t,l,V){this.id=e,this.element=t,this._renderer=V,this.parentPlayer=null,this._started=!1,this.totalTime=0,this._command("create",l)}_listen(e,t){return this._renderer.listen(this.element,`@@${this.id}:${e}`,t)}_command(e,...t){return vk(this._renderer,this.element,this.id,e,t)}onDone(e){this._listen("done",e)}onStart(e){this._listen("start",e)}onDestroy(e){this._listen("destroy",e)}init(){this._command("init")}hasStarted(){return this._started}play(){this._command("play"),this._started=!0}pause(){this._command("pause")}restart(){this._command("restart")}finish(){this._command("finish")}destroy(){this._command("destroy")}reset(){this._command("reset"),this._started=!1}setPosition(e){this._command("setPosition",e)}getPosition(){return this._renderer.engine.players[+this.id]?.getPosition()??0}}function vk(n,e,t,l,V){return n.setProperty(e,`@@${t}:${l}`,V)}const wk="@.disabled";let PO=(()=>{class n{constructor(t,l,V){this.delegate=t,this.engine=l,this._zone=V,this._currentId=0,this._microtaskId=1,this._animationCallbacksBuffer=[],this._rendererCache=new Map,this._cdRecurDepth=0,this.promise=Promise.resolve(0),l.onRemovalComplete=(d,a)=>{const U=a?.parentNode(d);U&&a.removeChild(U,d)}}createRenderer(t,l){const d=this.delegate.createRenderer(t,l);if(!(t&&l&&l.data&&l.data.animation)){let Z=this._rendererCache.get(d);return Z||(Z=new gk("",d,this.engine,()=>this._rendererCache.delete(d)),this._rendererCache.set(d,Z)),Z}const a=l.id,U=l.id+"-"+this._currentId;this._currentId++,this.engine.register(U,t);const N=Z=>{Array.isArray(Z)?Z.forEach(N):this.engine.registerTrigger(a,U,t,Z.name,Z)};return l.data.animation.forEach(N),new _O(this,U,d,this.engine)}begin(){this._cdRecurDepth++,this.delegate.begin&&this.delegate.begin()}_scheduleCountTask(){this.promise.then(()=>{this._microtaskId++})}scheduleListenerCallback(t,l,V){t>=0&&t<this._microtaskId?this._zone.run(()=>l(V)):(0==this._animationCallbacksBuffer.length&&Promise.resolve(null).then(()=>{this._zone.run(()=>{this._animationCallbacksBuffer.forEach(d=>{const[a,U]=d;a(U)}),this._animationCallbacksBuffer=[]})}),this._animationCallbacksBuffer.push([l,V]))}end(){this._cdRecurDepth--,0==this._cdRecurDepth&&this._zone.runOutsideAngular(()=>{this._scheduleCountTask(),this.engine.flush(this._microtaskId)}),this.delegate.end&&this.delegate.end()}whenRenderingDone(){return this.engine.whenRenderingDone()}}return n.\u0275fac=function(t){return new(t||n)(h(la),h(vR),h(_))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})();class gk{constructor(e,t,l,V){this.namespaceId=e,this.delegate=t,this.engine=l,this._onDestroy=V,this.destroyNode=this.delegate.destroyNode?d=>t.destroyNode(d):null}get data(){return this.delegate.data}destroy(){this.engine.destroy(this.namespaceId,this.delegate),this.delegate.destroy(),this._onDestroy?.()}createElement(e,t){return this.delegate.createElement(e,t)}createComment(e){return this.delegate.createComment(e)}createText(e){return this.delegate.createText(e)}appendChild(e,t){this.delegate.appendChild(e,t),this.engine.onInsert(this.namespaceId,t,e,!1)}insertBefore(e,t,l,V=!0){this.delegate.insertBefore(e,t,l),this.engine.onInsert(this.namespaceId,t,e,V)}removeChild(e,t,l){this.engine.onRemove(this.namespaceId,t,this.delegate,l)}selectRootElement(e,t){return this.delegate.selectRootElement(e,t)}parentNode(e){return this.delegate.parentNode(e)}nextSibling(e){return this.delegate.nextSibling(e)}setAttribute(e,t,l,V){this.delegate.setAttribute(e,t,l,V)}removeAttribute(e,t,l){this.delegate.removeAttribute(e,t,l)}addClass(e,t){this.delegate.addClass(e,t)}removeClass(e,t){this.delegate.removeClass(e,t)}setStyle(e,t,l,V){this.delegate.setStyle(e,t,l,V)}removeStyle(e,t,l){this.delegate.removeStyle(e,t,l)}setProperty(e,t,l){"@"==t.charAt(0)&&t==wk?this.disableAnimations(e,!!l):this.delegate.setProperty(e,t,l)}setValue(e,t){this.delegate.setValue(e,t)}listen(e,t,l){return this.delegate.listen(e,t,l)}disableAnimations(e,t){this.engine.disableAnimations(e,t)}}class _O extends gk{constructor(e,t,l,V,d){super(t,l,V,d),this.factory=e,this.namespaceId=t}setProperty(e,t,l){"@"==t.charAt(0)?"."==t.charAt(1)&&t==wk?this.disableAnimations(e,l=void 0===l||!!l):this.engine.process(this.namespaceId,e,t.slice(1),l):this.delegate.setProperty(e,t,l)}listen(e,t,l){if("@"==t.charAt(0)){const V=function qO(n){switch(n){case"body":return document.body;case"document":return document;case"window":return window;default:return n}}(e);let d=t.slice(1),a="";return"@"!=d.charAt(0)&&([d,a]=function AO(n){const e=n.indexOf(".");return[n.substring(0,e),n.slice(e+1)]}(d)),this.engine.listen(this.namespaceId,V,d,a,U=>{this.factory.scheduleListenerCallback(U._data||-1,l,U)})}return this.delegate.listen(e,t,l)}}const Ik=[{provide:Cp,useClass:LO},{provide:vo,useFactory:function ev(){return new FO}},{provide:vR,useClass:(()=>{class n extends vR{constructor(t,l,V,d){super(t.body,l,V)}ngOnDestroy(){this.flush()}}return n.\u0275fac=function(t){return new(t||n)(h(w),h(bo),h(vo),h(tV))},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})()},{provide:la,useFactory:function tv(n,e,t){return new PO(n,e,t)},deps:[yN,vR,_]}],Ko=[{provide:bo,useFactory:()=>new fO},{provide:eV,useValue:"BrowserAnimations"},...Ik],fk=[{provide:bo,useClass:hk},{provide:eV,useValue:"NoopAnimations"},...Ik];let nv=(()=>{class n{static withConfig(t){return{ngModule:n,providers:t.disableAnimations?fk:Ko}}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:Ko,imports:[d0]}),n})(),_k=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[ct],ct]}),n})(),qk=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[[ct],ct]}),n})();const cv={provide:new E("mat-tooltip-scroll-strategy"),deps:[ER],useFactory:function rv(n){return()=>n.scrollStrategies.reposition({scrollThrottle:20})}};let Ak=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[cv],imports:[[B5,VV,Hp,ct],ct,TR]}),n})(),ov=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[VV,Wo,_k,qk,Tp,Jp,tk,Ak,mo,Nk,Wo,_k,qk,Tp,Jp,tk,Ak,mo,Nk]}),n})(),sv=(()=>{class n{}return n.\u0275fac=function(t){return new(t||n)},n.\u0275mod=ae({type:n}),n.\u0275inj=le({imports:[VV,ov]}),n})(),Tv=(()=>{class n{constructor(){}intercept(t,l){let V=window.hasOwnProperty("Liferay")?window.Liferay.authToken:"";return V?(t.params.append("p_auth",V),t=t.clone({params:(t.params?t.params:new ll).set("p_auth",V)})):t=t.clone({setHeaders:{Authorization:"Basic YWRtaW4uYWRhbUBsaWZlcmF5LmNvbTpMMWbigqxyQHkK",Accept:"application/json"}}),l.handle(t)}}return n.\u0275fac=function(t){return new(t||n)},n.\u0275prov=S({token:n,factory:n.\u0275fac}),n})(),hv=(()=>{class n{constructor(t){this.injector=t}ngDoBootstrap(t){const{injector:l}=this,V=function PD(n,e){const t=function wD(n,e){return e.get(fn).resolveComponentFactory(n).inputs}(n,e.injector),l=e.strategyFactory||new LD(n,e.injector),V=function vD(n){const e={};return n.forEach(({propName:t,templateName:l})=>{e[function yD(n){return n.replace(/[A-Z]/g,e=>`-${e.toLowerCase()}`)}(l)]=t}),e}(t);class d extends KD{constructor(U){super(),this.injector=U}get ngElementStrategy(){if(!this._ngElementStrategy){const U=this._ngElementStrategy=l.create(this.injector||e.injector);t.forEach(({propName:N})=>{if(!this.hasOwnProperty(N))return;const R=this[N];delete this[N],U.setInputValue(N,R)})}return this._ngElementStrategy}attributeChangedCallback(U,N,R,Z){this.ngElementStrategy.setInputValue(V[U],R)}connectedCallback(){let U=!1;this.ngElementStrategy.events&&(this.subscribeToEvents(),U=!0),this.ngElementStrategy.connect(this),U||this.subscribeToEvents()}disconnectedCallback(){this._ngElementStrategy&&this._ngElementStrategy.disconnect(),this.ngElementEventsSubscription&&(this.ngElementEventsSubscription.unsubscribe(),this.ngElementEventsSubscription=null)}subscribeToEvents(){this.ngElementEventsSubscription=this.ngElementStrategy.events.subscribe(U=>{const N=new CustomEvent(U.name,{detail:U.value});this.dispatchEvent(N)})}}return d.observedAttributes=Object.keys(V),t.forEach(({propName:a})=>{Object.defineProperty(d.prototype,a,{get(){return this.ngElementStrategy.getInputValue(a)},set(U){this.ngElementStrategy.setInputValue(a,U)},configurable:!0,enumerable:!0})}),d}(lB,{injector:l});customElements.define("remote-apps",V)}}return n.\u0275fac=function(t){return new(t||n)(h(ge))},n.\u0275mod=ae({type:n}),n.\u0275inj=le({providers:[{provide:ao,useClass:Tv,multi:!0}],imports:[d0,Yy,nv,sv]}),n})();(function gb(){if(t1)throw new Error("Cannot enable prod mode after platform setup.");e1=!1})(),SD().bootstrapModule(hv).catch(n=>console.error(n))}},te=>{te(te.s=186)}]);